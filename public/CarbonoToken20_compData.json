{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"contracts/carbono.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.4.0\\npragma solidity ^0.8.27;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title CarbonoToken20 (CBO)\\n * @notice ERC-20 comprable con ETH (buyCarbonoToken20). Precio por defecto: 0.001 ETH por 1 CBO.\\n *   - priceWeiPerToken (wei por token, 18 decimales)\\n *   - setPriceWeiPerToken(): cambia el precio (solo owner)\\n *   - buyCarbonoToken20(): payable, acuña CBO proporcional a msg.value\\n *   - withdraw(): retira el ETH acumulado (solo owner)\\n *\\n * tokensOut = (msg.value * 1e18) / priceWeiPerToken\\n */\\ncontract CarbonoToken20 is ERC20, Ownable, ReentrancyGuard {\\n    // Por defecto 0.001 ether por 1 CBO (1e15 wei)\\n    uint256 public priceWeiPerToken = 1e15;\\n\\n    event CarbonoToken20Purchased(address indexed buyer, uint256 ethIn, uint256 tokensOut);\\n    event PriceUpdated(uint256 newPrice);\\n    event Withdraw(address indexed to, uint256 amount);\\n\\n    constructor() ERC20(\\\"CarbonoToken20\\\", \\\"CBO\\\") Ownable(msg.sender) {}\\n\\n    /// @notice Comprar CBO enviando ETH\\n    function buyCarbonoToken20() public payable nonReentrant {\\n        require(msg.value > 0, \\\"no ETH\\\");\\n        uint256 tokensOut = (msg.value * (10 ** decimals())) / priceWeiPerToken;\\n        require(tokensOut > 0, \\\"too little ETH\\\");\\n        _mint(msg.sender, tokensOut);\\n        emit CarbonoToken20Purchased(msg.sender, msg.value, tokensOut);\\n    }\\n\\n    /// @notice Cambiar el precio (wei por 1 CBO)\\n    function setPriceWeiPerToken(uint256 newPrice) external onlyOwner {\\n        require(newPrice > 0, \\\"price=0\\\");\\n        priceWeiPerToken = newPrice;\\n        emit PriceUpdated(newPrice);\\n    }\\n\\n    /// @notice Retirar el ETH recaudado\\n    function withdraw(address payable to) external onlyOwner {\\n        require(to != address(0), \\\"to=0\\\");\\n        uint256 bal = address(this).balance;\\n        require(bal > 0, \\\"empty\\\");\\n        (bool ok, ) = to.call{value: bal}(\\\"\\\");\\n        require(ok, \\\"withdraw fail\\\");\\n        emit Withdraw(to, bal);\\n    }\\n\\n    /// @notice Recibir ETH directo también compra CBO\\n    receive() external payable {\\n        buyCarbonoToken20();\\n    }\\n}\\n\\n\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[]}}",
	"name": "CarbonoToken20",
	"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"CarbonoToken20Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCarbonoToken20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceWeiPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceWeiPerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"CarbonoToken20 (CBO)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyCarbonoToken20()\":{\"notice\":\"Comprar CBO enviando ETH\"},\"setPriceWeiPerToken(uint256)\":{\"notice\":\"Cambiar el precio (wei por 1 CBO)\"},\"withdraw(address)\":{\"notice\":\"Retirar el ETH recaudado\"}},\"notice\":\"ERC-20 comprable con ETH (buyCarbonoToken20). Precio por defecto: 0.001 ETH por 1 CBO.   - priceWeiPerToken (wei por token, 18 decimales)   - setPriceWeiPerToken(): cambia el precio (solo owner)   - buyCarbonoToken20(): payable, acu\\u00f1a CBO proporcional a msg.value   - withdraw(): retira el ETH acumulado (solo owner) tokensOut = (msg.value * 1e18) / priceWeiPerToken\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/carbono.sol\":\"CarbonoToken20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3490d794728f5bfecb46820431adaff71ba374141545ec20b650bb60353fac23\",\"dweb:/ipfs/QmPsfxjVpMcZbpE7BH93DzTpEaktESigEw4SmDzkXuJ4WR\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1dc2db8d94a21eac8efe03adf574c419b08536409b416057a2b5b95cb772c43c\",\"dweb:/ipfs/QmZfqJCKVU1ScuX2A7s8WZdQEaikwJbDH5JBrBdKTUT4Gu\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f95ee0bbd4dd3ac730d066ba3e785ded4565e890dbec2fa7d3b9fe3bad9d0d6e\",\"dweb:/ipfs/QmSLr6bHkPFWT7ntj34jmwfyskpwo97T9jZUrk5sz3sdtR\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"contracts/carbono.sol\":{\"keccak256\":\"0xb3fcc64c42c7d9f78343bc18326ef5483691cb6a3800e43f444bf4832708c5b7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5a0e48f7fd594cd77f060754157df298d6f6f85c3c083b3c09b591f0d73e071\",\"dweb:/ipfs/Qmbhj41tKJkudWwhHkLbFwNUZnFJ5s6uR6GgiYd2heMRFK\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_1050": {
				"entryPoint": null,
				"id": 1050,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_336": {
				"entryPoint": null,
				"id": 336,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_50": {
				"entryPoint": null,
				"id": 50,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_955": {
				"entryPoint": null,
				"id": 955,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_transferOwnership_146": {
				"entryPoint": 311,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 1334,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 1349,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_dataslot_t_string_storage": {
				"entryPoint": 654,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 506,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_t_string_storage": {
				"entryPoint": 942,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"cleanup_t_address": {
				"entryPoint": 1317,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 1286,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 780,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clear_storage_range_t_bytes1": {
				"entryPoint": 908,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"convert_t_uint256_to_t_uint256": {
				"entryPoint": 798,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 1079,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"divide_by_32_ceil": {
				"entryPoint": 672,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 606,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": 1052,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"identity": {
				"entryPoint": 789,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"mask_bytes_dynamic": {
				"entryPoint": 1024,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x22": {
				"entryPoint": 561,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 516,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"prepare_store_t_uint256": {
				"entryPoint": 831,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"shift_left_dynamic": {
				"entryPoint": 687,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"shift_right_unsigned_dynamic": {
				"entryPoint": 1012,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"storage_set_to_zero_t_uint256": {
				"entryPoint": 884,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"update_byte_slice_dynamic32": {
				"entryPoint": 699,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"update_storage_value_t_uint256_to_t_uint256": {
				"entryPoint": 840,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"zero_value_for_split_t_uint256": {
				"entryPoint": 877,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:5817:8",
					"nodeType": "YulBlock",
					"src": "0:5817:8",
					"statements": [
						{
							"body": {
								"nativeSrc": "66:40:8",
								"nodeType": "YulBlock",
								"src": "66:40:8",
								"statements": [
									{
										"nativeSrc": "77:22:8",
										"nodeType": "YulAssignment",
										"src": "77:22:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "93:5:8",
													"nodeType": "YulIdentifier",
													"src": "93:5:8"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "87:5:8",
												"nodeType": "YulIdentifier",
												"src": "87:5:8"
											},
											"nativeSrc": "87:12:8",
											"nodeType": "YulFunctionCall",
											"src": "87:12:8"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "77:6:8",
												"nodeType": "YulIdentifier",
												"src": "77:6:8"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nativeSrc": "7:99:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "49:5:8",
									"nodeType": "YulTypedName",
									"src": "49:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "59:6:8",
									"nodeType": "YulTypedName",
									"src": "59:6:8",
									"type": ""
								}
							],
							"src": "7:99:8"
						},
						{
							"body": {
								"nativeSrc": "140:152:8",
								"nodeType": "YulBlock",
								"src": "140:152:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "157:1:8",
													"nodeType": "YulLiteral",
													"src": "157:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "160:77:8",
													"nodeType": "YulLiteral",
													"src": "160:77:8",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "150:6:8",
												"nodeType": "YulIdentifier",
												"src": "150:6:8"
											},
											"nativeSrc": "150:88:8",
											"nodeType": "YulFunctionCall",
											"src": "150:88:8"
										},
										"nativeSrc": "150:88:8",
										"nodeType": "YulExpressionStatement",
										"src": "150:88:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "254:1:8",
													"nodeType": "YulLiteral",
													"src": "254:1:8",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "257:4:8",
													"nodeType": "YulLiteral",
													"src": "257:4:8",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "247:6:8",
												"nodeType": "YulIdentifier",
												"src": "247:6:8"
											},
											"nativeSrc": "247:15:8",
											"nodeType": "YulFunctionCall",
											"src": "247:15:8"
										},
										"nativeSrc": "247:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "247:15:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "278:1:8",
													"nodeType": "YulLiteral",
													"src": "278:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "281:4:8",
													"nodeType": "YulLiteral",
													"src": "281:4:8",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "271:6:8",
												"nodeType": "YulIdentifier",
												"src": "271:6:8"
											},
											"nativeSrc": "271:15:8",
											"nodeType": "YulFunctionCall",
											"src": "271:15:8"
										},
										"nativeSrc": "271:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "271:15:8"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "112:180:8",
							"nodeType": "YulFunctionDefinition",
							"src": "112:180:8"
						},
						{
							"body": {
								"nativeSrc": "326:152:8",
								"nodeType": "YulBlock",
								"src": "326:152:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "343:1:8",
													"nodeType": "YulLiteral",
													"src": "343:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "346:77:8",
													"nodeType": "YulLiteral",
													"src": "346:77:8",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "336:6:8",
												"nodeType": "YulIdentifier",
												"src": "336:6:8"
											},
											"nativeSrc": "336:88:8",
											"nodeType": "YulFunctionCall",
											"src": "336:88:8"
										},
										"nativeSrc": "336:88:8",
										"nodeType": "YulExpressionStatement",
										"src": "336:88:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "440:1:8",
													"nodeType": "YulLiteral",
													"src": "440:1:8",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "443:4:8",
													"nodeType": "YulLiteral",
													"src": "443:4:8",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "433:6:8",
												"nodeType": "YulIdentifier",
												"src": "433:6:8"
											},
											"nativeSrc": "433:15:8",
											"nodeType": "YulFunctionCall",
											"src": "433:15:8"
										},
										"nativeSrc": "433:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "433:15:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "464:1:8",
													"nodeType": "YulLiteral",
													"src": "464:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "467:4:8",
													"nodeType": "YulLiteral",
													"src": "467:4:8",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "457:6:8",
												"nodeType": "YulIdentifier",
												"src": "457:6:8"
											},
											"nativeSrc": "457:15:8",
											"nodeType": "YulFunctionCall",
											"src": "457:15:8"
										},
										"nativeSrc": "457:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "457:15:8"
									}
								]
							},
							"name": "panic_error_0x22",
							"nativeSrc": "298:180:8",
							"nodeType": "YulFunctionDefinition",
							"src": "298:180:8"
						},
						{
							"body": {
								"nativeSrc": "535:269:8",
								"nodeType": "YulBlock",
								"src": "535:269:8",
								"statements": [
									{
										"nativeSrc": "545:22:8",
										"nodeType": "YulAssignment",
										"src": "545:22:8",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "559:4:8",
													"nodeType": "YulIdentifier",
													"src": "559:4:8"
												},
												{
													"kind": "number",
													"nativeSrc": "565:1:8",
													"nodeType": "YulLiteral",
													"src": "565:1:8",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "555:3:8",
												"nodeType": "YulIdentifier",
												"src": "555:3:8"
											},
											"nativeSrc": "555:12:8",
											"nodeType": "YulFunctionCall",
											"src": "555:12:8"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "545:6:8",
												"nodeType": "YulIdentifier",
												"src": "545:6:8"
											}
										]
									},
									{
										"nativeSrc": "576:38:8",
										"nodeType": "YulVariableDeclaration",
										"src": "576:38:8",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "606:4:8",
													"nodeType": "YulIdentifier",
													"src": "606:4:8"
												},
												{
													"kind": "number",
													"nativeSrc": "612:1:8",
													"nodeType": "YulLiteral",
													"src": "612:1:8",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "602:3:8",
												"nodeType": "YulIdentifier",
												"src": "602:3:8"
											},
											"nativeSrc": "602:12:8",
											"nodeType": "YulFunctionCall",
											"src": "602:12:8"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "580:18:8",
												"nodeType": "YulTypedName",
												"src": "580:18:8",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "653:51:8",
											"nodeType": "YulBlock",
											"src": "653:51:8",
											"statements": [
												{
													"nativeSrc": "667:27:8",
													"nodeType": "YulAssignment",
													"src": "667:27:8",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "681:6:8",
																"nodeType": "YulIdentifier",
																"src": "681:6:8"
															},
															{
																"kind": "number",
																"nativeSrc": "689:4:8",
																"nodeType": "YulLiteral",
																"src": "689:4:8",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "677:3:8",
															"nodeType": "YulIdentifier",
															"src": "677:3:8"
														},
														"nativeSrc": "677:17:8",
														"nodeType": "YulFunctionCall",
														"src": "677:17:8"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "667:6:8",
															"nodeType": "YulIdentifier",
															"src": "667:6:8"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "633:18:8",
													"nodeType": "YulIdentifier",
													"src": "633:18:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "626:6:8",
												"nodeType": "YulIdentifier",
												"src": "626:6:8"
											},
											"nativeSrc": "626:26:8",
											"nodeType": "YulFunctionCall",
											"src": "626:26:8"
										},
										"nativeSrc": "623:81:8",
										"nodeType": "YulIf",
										"src": "623:81:8"
									},
									{
										"body": {
											"nativeSrc": "756:42:8",
											"nodeType": "YulBlock",
											"src": "756:42:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nativeSrc": "770:16:8",
															"nodeType": "YulIdentifier",
															"src": "770:16:8"
														},
														"nativeSrc": "770:18:8",
														"nodeType": "YulFunctionCall",
														"src": "770:18:8"
													},
													"nativeSrc": "770:18:8",
													"nodeType": "YulExpressionStatement",
													"src": "770:18:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "720:18:8",
													"nodeType": "YulIdentifier",
													"src": "720:18:8"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "743:6:8",
															"nodeType": "YulIdentifier",
															"src": "743:6:8"
														},
														{
															"kind": "number",
															"nativeSrc": "751:2:8",
															"nodeType": "YulLiteral",
															"src": "751:2:8",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "740:2:8",
														"nodeType": "YulIdentifier",
														"src": "740:2:8"
													},
													"nativeSrc": "740:14:8",
													"nodeType": "YulFunctionCall",
													"src": "740:14:8"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "717:2:8",
												"nodeType": "YulIdentifier",
												"src": "717:2:8"
											},
											"nativeSrc": "717:38:8",
											"nodeType": "YulFunctionCall",
											"src": "717:38:8"
										},
										"nativeSrc": "714:84:8",
										"nodeType": "YulIf",
										"src": "714:84:8"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "484:320:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "519:4:8",
									"nodeType": "YulTypedName",
									"src": "519:4:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "528:6:8",
									"nodeType": "YulTypedName",
									"src": "528:6:8",
									"type": ""
								}
							],
							"src": "484:320:8"
						},
						{
							"body": {
								"nativeSrc": "864:87:8",
								"nodeType": "YulBlock",
								"src": "864:87:8",
								"statements": [
									{
										"nativeSrc": "874:11:8",
										"nodeType": "YulAssignment",
										"src": "874:11:8",
										"value": {
											"name": "ptr",
											"nativeSrc": "882:3:8",
											"nodeType": "YulIdentifier",
											"src": "882:3:8"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "874:4:8",
												"nodeType": "YulIdentifier",
												"src": "874:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "902:1:8",
													"nodeType": "YulLiteral",
													"src": "902:1:8",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nativeSrc": "905:3:8",
													"nodeType": "YulIdentifier",
													"src": "905:3:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "895:6:8",
												"nodeType": "YulIdentifier",
												"src": "895:6:8"
											},
											"nativeSrc": "895:14:8",
											"nodeType": "YulFunctionCall",
											"src": "895:14:8"
										},
										"nativeSrc": "895:14:8",
										"nodeType": "YulExpressionStatement",
										"src": "895:14:8"
									},
									{
										"nativeSrc": "918:26:8",
										"nodeType": "YulAssignment",
										"src": "918:26:8",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "936:1:8",
													"nodeType": "YulLiteral",
													"src": "936:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "939:4:8",
													"nodeType": "YulLiteral",
													"src": "939:4:8",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nativeSrc": "926:9:8",
												"nodeType": "YulIdentifier",
												"src": "926:9:8"
											},
											"nativeSrc": "926:18:8",
											"nodeType": "YulFunctionCall",
											"src": "926:18:8"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "918:4:8",
												"nodeType": "YulIdentifier",
												"src": "918:4:8"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_string_storage",
							"nativeSrc": "810:141:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "851:3:8",
									"nodeType": "YulTypedName",
									"src": "851:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "859:4:8",
									"nodeType": "YulTypedName",
									"src": "859:4:8",
									"type": ""
								}
							],
							"src": "810:141:8"
						},
						{
							"body": {
								"nativeSrc": "1001:49:8",
								"nodeType": "YulBlock",
								"src": "1001:49:8",
								"statements": [
									{
										"nativeSrc": "1011:33:8",
										"nodeType": "YulAssignment",
										"src": "1011:33:8",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1029:5:8",
															"nodeType": "YulIdentifier",
															"src": "1029:5:8"
														},
														{
															"kind": "number",
															"nativeSrc": "1036:2:8",
															"nodeType": "YulLiteral",
															"src": "1036:2:8",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1025:3:8",
														"nodeType": "YulIdentifier",
														"src": "1025:3:8"
													},
													"nativeSrc": "1025:14:8",
													"nodeType": "YulFunctionCall",
													"src": "1025:14:8"
												},
												{
													"kind": "number",
													"nativeSrc": "1041:2:8",
													"nodeType": "YulLiteral",
													"src": "1041:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "1021:3:8",
												"nodeType": "YulIdentifier",
												"src": "1021:3:8"
											},
											"nativeSrc": "1021:23:8",
											"nodeType": "YulFunctionCall",
											"src": "1021:23:8"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "1011:6:8",
												"nodeType": "YulIdentifier",
												"src": "1011:6:8"
											}
										]
									}
								]
							},
							"name": "divide_by_32_ceil",
							"nativeSrc": "957:93:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "984:5:8",
									"nodeType": "YulTypedName",
									"src": "984:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "994:6:8",
									"nodeType": "YulTypedName",
									"src": "994:6:8",
									"type": ""
								}
							],
							"src": "957:93:8"
						},
						{
							"body": {
								"nativeSrc": "1109:54:8",
								"nodeType": "YulBlock",
								"src": "1109:54:8",
								"statements": [
									{
										"nativeSrc": "1119:37:8",
										"nodeType": "YulAssignment",
										"src": "1119:37:8",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nativeSrc": "1144:4:8",
													"nodeType": "YulIdentifier",
													"src": "1144:4:8"
												},
												{
													"name": "value",
													"nativeSrc": "1150:5:8",
													"nodeType": "YulIdentifier",
													"src": "1150:5:8"
												}
											],
											"functionName": {
												"name": "shl",
												"nativeSrc": "1140:3:8",
												"nodeType": "YulIdentifier",
												"src": "1140:3:8"
											},
											"nativeSrc": "1140:16:8",
											"nodeType": "YulFunctionCall",
											"src": "1140:16:8"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "1119:8:8",
												"nodeType": "YulIdentifier",
												"src": "1119:8:8"
											}
										]
									}
								]
							},
							"name": "shift_left_dynamic",
							"nativeSrc": "1056:107:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nativeSrc": "1084:4:8",
									"nodeType": "YulTypedName",
									"src": "1084:4:8",
									"type": ""
								},
								{
									"name": "value",
									"nativeSrc": "1090:5:8",
									"nodeType": "YulTypedName",
									"src": "1090:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "1100:8:8",
									"nodeType": "YulTypedName",
									"src": "1100:8:8",
									"type": ""
								}
							],
							"src": "1056:107:8"
						},
						{
							"body": {
								"nativeSrc": "1245:317:8",
								"nodeType": "YulBlock",
								"src": "1245:317:8",
								"statements": [
									{
										"nativeSrc": "1255:35:8",
										"nodeType": "YulVariableDeclaration",
										"src": "1255:35:8",
										"value": {
											"arguments": [
												{
													"name": "shiftBytes",
													"nativeSrc": "1276:10:8",
													"nodeType": "YulIdentifier",
													"src": "1276:10:8"
												},
												{
													"kind": "number",
													"nativeSrc": "1288:1:8",
													"nodeType": "YulLiteral",
													"src": "1288:1:8",
													"type": "",
													"value": "8"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "1272:3:8",
												"nodeType": "YulIdentifier",
												"src": "1272:3:8"
											},
											"nativeSrc": "1272:18:8",
											"nodeType": "YulFunctionCall",
											"src": "1272:18:8"
										},
										"variables": [
											{
												"name": "shiftBits",
												"nativeSrc": "1259:9:8",
												"nodeType": "YulTypedName",
												"src": "1259:9:8",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1299:109:8",
										"nodeType": "YulVariableDeclaration",
										"src": "1299:109:8",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nativeSrc": "1330:9:8",
													"nodeType": "YulIdentifier",
													"src": "1330:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "1341:66:8",
													"nodeType": "YulLiteral",
													"src": "1341:66:8",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nativeSrc": "1311:18:8",
												"nodeType": "YulIdentifier",
												"src": "1311:18:8"
											},
											"nativeSrc": "1311:97:8",
											"nodeType": "YulFunctionCall",
											"src": "1311:97:8"
										},
										"variables": [
											{
												"name": "mask",
												"nativeSrc": "1303:4:8",
												"nodeType": "YulTypedName",
												"src": "1303:4:8",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1417:51:8",
										"nodeType": "YulAssignment",
										"src": "1417:51:8",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nativeSrc": "1448:9:8",
													"nodeType": "YulIdentifier",
													"src": "1448:9:8"
												},
												{
													"name": "toInsert",
													"nativeSrc": "1459:8:8",
													"nodeType": "YulIdentifier",
													"src": "1459:8:8"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nativeSrc": "1429:18:8",
												"nodeType": "YulIdentifier",
												"src": "1429:18:8"
											},
											"nativeSrc": "1429:39:8",
											"nodeType": "YulFunctionCall",
											"src": "1429:39:8"
										},
										"variableNames": [
											{
												"name": "toInsert",
												"nativeSrc": "1417:8:8",
												"nodeType": "YulIdentifier",
												"src": "1417:8:8"
											}
										]
									},
									{
										"nativeSrc": "1477:30:8",
										"nodeType": "YulAssignment",
										"src": "1477:30:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1490:5:8",
													"nodeType": "YulIdentifier",
													"src": "1490:5:8"
												},
												{
													"arguments": [
														{
															"name": "mask",
															"nativeSrc": "1501:4:8",
															"nodeType": "YulIdentifier",
															"src": "1501:4:8"
														}
													],
													"functionName": {
														"name": "not",
														"nativeSrc": "1497:3:8",
														"nodeType": "YulIdentifier",
														"src": "1497:3:8"
													},
													"nativeSrc": "1497:9:8",
													"nodeType": "YulFunctionCall",
													"src": "1497:9:8"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "1486:3:8",
												"nodeType": "YulIdentifier",
												"src": "1486:3:8"
											},
											"nativeSrc": "1486:21:8",
											"nodeType": "YulFunctionCall",
											"src": "1486:21:8"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1477:5:8",
												"nodeType": "YulIdentifier",
												"src": "1477:5:8"
											}
										]
									},
									{
										"nativeSrc": "1516:40:8",
										"nodeType": "YulAssignment",
										"src": "1516:40:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1529:5:8",
													"nodeType": "YulIdentifier",
													"src": "1529:5:8"
												},
												{
													"arguments": [
														{
															"name": "toInsert",
															"nativeSrc": "1540:8:8",
															"nodeType": "YulIdentifier",
															"src": "1540:8:8"
														},
														{
															"name": "mask",
															"nativeSrc": "1550:4:8",
															"nodeType": "YulIdentifier",
															"src": "1550:4:8"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "1536:3:8",
														"nodeType": "YulIdentifier",
														"src": "1536:3:8"
													},
													"nativeSrc": "1536:19:8",
													"nodeType": "YulFunctionCall",
													"src": "1536:19:8"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "1526:2:8",
												"nodeType": "YulIdentifier",
												"src": "1526:2:8"
											},
											"nativeSrc": "1526:30:8",
											"nodeType": "YulFunctionCall",
											"src": "1526:30:8"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "1516:6:8",
												"nodeType": "YulIdentifier",
												"src": "1516:6:8"
											}
										]
									}
								]
							},
							"name": "update_byte_slice_dynamic32",
							"nativeSrc": "1169:393:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1206:5:8",
									"nodeType": "YulTypedName",
									"src": "1206:5:8",
									"type": ""
								},
								{
									"name": "shiftBytes",
									"nativeSrc": "1213:10:8",
									"nodeType": "YulTypedName",
									"src": "1213:10:8",
									"type": ""
								},
								{
									"name": "toInsert",
									"nativeSrc": "1225:8:8",
									"nodeType": "YulTypedName",
									"src": "1225:8:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "1238:6:8",
									"nodeType": "YulTypedName",
									"src": "1238:6:8",
									"type": ""
								}
							],
							"src": "1169:393:8"
						},
						{
							"body": {
								"nativeSrc": "1613:32:8",
								"nodeType": "YulBlock",
								"src": "1613:32:8",
								"statements": [
									{
										"nativeSrc": "1623:16:8",
										"nodeType": "YulAssignment",
										"src": "1623:16:8",
										"value": {
											"name": "value",
											"nativeSrc": "1634:5:8",
											"nodeType": "YulIdentifier",
											"src": "1634:5:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1623:7:8",
												"nodeType": "YulIdentifier",
												"src": "1623:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nativeSrc": "1568:77:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1595:5:8",
									"nodeType": "YulTypedName",
									"src": "1595:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1605:7:8",
									"nodeType": "YulTypedName",
									"src": "1605:7:8",
									"type": ""
								}
							],
							"src": "1568:77:8"
						},
						{
							"body": {
								"nativeSrc": "1683:28:8",
								"nodeType": "YulBlock",
								"src": "1683:28:8",
								"statements": [
									{
										"nativeSrc": "1693:12:8",
										"nodeType": "YulAssignment",
										"src": "1693:12:8",
										"value": {
											"name": "value",
											"nativeSrc": "1700:5:8",
											"nodeType": "YulIdentifier",
											"src": "1700:5:8"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "1693:3:8",
												"nodeType": "YulIdentifier",
												"src": "1693:3:8"
											}
										]
									}
								]
							},
							"name": "identity",
							"nativeSrc": "1651:60:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1669:5:8",
									"nodeType": "YulTypedName",
									"src": "1669:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "1679:3:8",
									"nodeType": "YulTypedName",
									"src": "1679:3:8",
									"type": ""
								}
							],
							"src": "1651:60:8"
						},
						{
							"body": {
								"nativeSrc": "1777:82:8",
								"nodeType": "YulBlock",
								"src": "1777:82:8",
								"statements": [
									{
										"nativeSrc": "1787:66:8",
										"nodeType": "YulAssignment",
										"src": "1787:66:8",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "1845:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "1845:5:8"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "1827:17:8",
																"nodeType": "YulIdentifier",
																"src": "1827:17:8"
															},
															"nativeSrc": "1827:24:8",
															"nodeType": "YulFunctionCall",
															"src": "1827:24:8"
														}
													],
													"functionName": {
														"name": "identity",
														"nativeSrc": "1818:8:8",
														"nodeType": "YulIdentifier",
														"src": "1818:8:8"
													},
													"nativeSrc": "1818:34:8",
													"nodeType": "YulFunctionCall",
													"src": "1818:34:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "1800:17:8",
												"nodeType": "YulIdentifier",
												"src": "1800:17:8"
											},
											"nativeSrc": "1800:53:8",
											"nodeType": "YulFunctionCall",
											"src": "1800:53:8"
										},
										"variableNames": [
											{
												"name": "converted",
												"nativeSrc": "1787:9:8",
												"nodeType": "YulIdentifier",
												"src": "1787:9:8"
											}
										]
									}
								]
							},
							"name": "convert_t_uint256_to_t_uint256",
							"nativeSrc": "1717:142:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1757:5:8",
									"nodeType": "YulTypedName",
									"src": "1757:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "converted",
									"nativeSrc": "1767:9:8",
									"nodeType": "YulTypedName",
									"src": "1767:9:8",
									"type": ""
								}
							],
							"src": "1717:142:8"
						},
						{
							"body": {
								"nativeSrc": "1912:28:8",
								"nodeType": "YulBlock",
								"src": "1912:28:8",
								"statements": [
									{
										"nativeSrc": "1922:12:8",
										"nodeType": "YulAssignment",
										"src": "1922:12:8",
										"value": {
											"name": "value",
											"nativeSrc": "1929:5:8",
											"nodeType": "YulIdentifier",
											"src": "1929:5:8"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "1922:3:8",
												"nodeType": "YulIdentifier",
												"src": "1922:3:8"
											}
										]
									}
								]
							},
							"name": "prepare_store_t_uint256",
							"nativeSrc": "1865:75:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1898:5:8",
									"nodeType": "YulTypedName",
									"src": "1898:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "1908:3:8",
									"nodeType": "YulTypedName",
									"src": "1908:3:8",
									"type": ""
								}
							],
							"src": "1865:75:8"
						},
						{
							"body": {
								"nativeSrc": "2022:193:8",
								"nodeType": "YulBlock",
								"src": "2022:193:8",
								"statements": [
									{
										"nativeSrc": "2032:63:8",
										"nodeType": "YulVariableDeclaration",
										"src": "2032:63:8",
										"value": {
											"arguments": [
												{
													"name": "value_0",
													"nativeSrc": "2087:7:8",
													"nodeType": "YulIdentifier",
													"src": "2087:7:8"
												}
											],
											"functionName": {
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "2056:30:8",
												"nodeType": "YulIdentifier",
												"src": "2056:30:8"
											},
											"nativeSrc": "2056:39:8",
											"nodeType": "YulFunctionCall",
											"src": "2056:39:8"
										},
										"variables": [
											{
												"name": "convertedValue_0",
												"nativeSrc": "2036:16:8",
												"nodeType": "YulTypedName",
												"src": "2036:16:8",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "2111:4:8",
													"nodeType": "YulIdentifier",
													"src": "2111:4:8"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nativeSrc": "2151:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "2151:4:8"
																}
															],
															"functionName": {
																"name": "sload",
																"nativeSrc": "2145:5:8",
																"nodeType": "YulIdentifier",
																"src": "2145:5:8"
															},
															"nativeSrc": "2145:11:8",
															"nodeType": "YulFunctionCall",
															"src": "2145:11:8"
														},
														{
															"name": "offset",
															"nativeSrc": "2158:6:8",
															"nodeType": "YulIdentifier",
															"src": "2158:6:8"
														},
														{
															"arguments": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "2190:16:8",
																	"nodeType": "YulIdentifier",
																	"src": "2190:16:8"
																}
															],
															"functionName": {
																"name": "prepare_store_t_uint256",
																"nativeSrc": "2166:23:8",
																"nodeType": "YulIdentifier",
																"src": "2166:23:8"
															},
															"nativeSrc": "2166:41:8",
															"nodeType": "YulFunctionCall",
															"src": "2166:41:8"
														}
													],
													"functionName": {
														"name": "update_byte_slice_dynamic32",
														"nativeSrc": "2117:27:8",
														"nodeType": "YulIdentifier",
														"src": "2117:27:8"
													},
													"nativeSrc": "2117:91:8",
													"nodeType": "YulFunctionCall",
													"src": "2117:91:8"
												}
											],
											"functionName": {
												"name": "sstore",
												"nativeSrc": "2104:6:8",
												"nodeType": "YulIdentifier",
												"src": "2104:6:8"
											},
											"nativeSrc": "2104:105:8",
											"nodeType": "YulFunctionCall",
											"src": "2104:105:8"
										},
										"nativeSrc": "2104:105:8",
										"nodeType": "YulExpressionStatement",
										"src": "2104:105:8"
									}
								]
							},
							"name": "update_storage_value_t_uint256_to_t_uint256",
							"nativeSrc": "1946:269:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "1999:4:8",
									"nodeType": "YulTypedName",
									"src": "1999:4:8",
									"type": ""
								},
								{
									"name": "offset",
									"nativeSrc": "2005:6:8",
									"nodeType": "YulTypedName",
									"src": "2005:6:8",
									"type": ""
								},
								{
									"name": "value_0",
									"nativeSrc": "2013:7:8",
									"nodeType": "YulTypedName",
									"src": "2013:7:8",
									"type": ""
								}
							],
							"src": "1946:269:8"
						},
						{
							"body": {
								"nativeSrc": "2270:24:8",
								"nodeType": "YulBlock",
								"src": "2270:24:8",
								"statements": [
									{
										"nativeSrc": "2280:8:8",
										"nodeType": "YulAssignment",
										"src": "2280:8:8",
										"value": {
											"kind": "number",
											"nativeSrc": "2287:1:8",
											"nodeType": "YulLiteral",
											"src": "2287:1:8",
											"type": "",
											"value": "0"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "2280:3:8",
												"nodeType": "YulIdentifier",
												"src": "2280:3:8"
											}
										]
									}
								]
							},
							"name": "zero_value_for_split_t_uint256",
							"nativeSrc": "2221:73:8",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "2266:3:8",
									"nodeType": "YulTypedName",
									"src": "2266:3:8",
									"type": ""
								}
							],
							"src": "2221:73:8"
						},
						{
							"body": {
								"nativeSrc": "2353:136:8",
								"nodeType": "YulBlock",
								"src": "2353:136:8",
								"statements": [
									{
										"nativeSrc": "2363:46:8",
										"nodeType": "YulVariableDeclaration",
										"src": "2363:46:8",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "2377:30:8",
												"nodeType": "YulIdentifier",
												"src": "2377:30:8"
											},
											"nativeSrc": "2377:32:8",
											"nodeType": "YulFunctionCall",
											"src": "2377:32:8"
										},
										"variables": [
											{
												"name": "zero_0",
												"nativeSrc": "2367:6:8",
												"nodeType": "YulTypedName",
												"src": "2367:6:8",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "2462:4:8",
													"nodeType": "YulIdentifier",
													"src": "2462:4:8"
												},
												{
													"name": "offset",
													"nativeSrc": "2468:6:8",
													"nodeType": "YulIdentifier",
													"src": "2468:6:8"
												},
												{
													"name": "zero_0",
													"nativeSrc": "2476:6:8",
													"nodeType": "YulIdentifier",
													"src": "2476:6:8"
												}
											],
											"functionName": {
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "2418:43:8",
												"nodeType": "YulIdentifier",
												"src": "2418:43:8"
											},
											"nativeSrc": "2418:65:8",
											"nodeType": "YulFunctionCall",
											"src": "2418:65:8"
										},
										"nativeSrc": "2418:65:8",
										"nodeType": "YulExpressionStatement",
										"src": "2418:65:8"
									}
								]
							},
							"name": "storage_set_to_zero_t_uint256",
							"nativeSrc": "2300:189:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "2339:4:8",
									"nodeType": "YulTypedName",
									"src": "2339:4:8",
									"type": ""
								},
								{
									"name": "offset",
									"nativeSrc": "2345:6:8",
									"nodeType": "YulTypedName",
									"src": "2345:6:8",
									"type": ""
								}
							],
							"src": "2300:189:8"
						},
						{
							"body": {
								"nativeSrc": "2545:136:8",
								"nodeType": "YulBlock",
								"src": "2545:136:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "2612:63:8",
											"nodeType": "YulBlock",
											"src": "2612:63:8",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "2656:5:8",
																"nodeType": "YulIdentifier",
																"src": "2656:5:8"
															},
															{
																"kind": "number",
																"nativeSrc": "2663:1:8",
																"nodeType": "YulLiteral",
																"src": "2663:1:8",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "storage_set_to_zero_t_uint256",
															"nativeSrc": "2626:29:8",
															"nodeType": "YulIdentifier",
															"src": "2626:29:8"
														},
														"nativeSrc": "2626:39:8",
														"nodeType": "YulFunctionCall",
														"src": "2626:39:8"
													},
													"nativeSrc": "2626:39:8",
													"nodeType": "YulExpressionStatement",
													"src": "2626:39:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "start",
													"nativeSrc": "2565:5:8",
													"nodeType": "YulIdentifier",
													"src": "2565:5:8"
												},
												{
													"name": "end",
													"nativeSrc": "2572:3:8",
													"nodeType": "YulIdentifier",
													"src": "2572:3:8"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "2562:2:8",
												"nodeType": "YulIdentifier",
												"src": "2562:2:8"
											},
											"nativeSrc": "2562:14:8",
											"nodeType": "YulFunctionCall",
											"src": "2562:14:8"
										},
										"nativeSrc": "2555:120:8",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "2577:26:8",
											"nodeType": "YulBlock",
											"src": "2577:26:8",
											"statements": [
												{
													"nativeSrc": "2579:22:8",
													"nodeType": "YulAssignment",
													"src": "2579:22:8",
													"value": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "2592:5:8",
																"nodeType": "YulIdentifier",
																"src": "2592:5:8"
															},
															{
																"kind": "number",
																"nativeSrc": "2599:1:8",
																"nodeType": "YulLiteral",
																"src": "2599:1:8",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "2588:3:8",
															"nodeType": "YulIdentifier",
															"src": "2588:3:8"
														},
														"nativeSrc": "2588:13:8",
														"nodeType": "YulFunctionCall",
														"src": "2588:13:8"
													},
													"variableNames": [
														{
															"name": "start",
															"nativeSrc": "2579:5:8",
															"nodeType": "YulIdentifier",
															"src": "2579:5:8"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "2559:2:8",
											"nodeType": "YulBlock",
											"src": "2559:2:8",
											"statements": []
										},
										"src": "2555:120:8"
									}
								]
							},
							"name": "clear_storage_range_t_bytes1",
							"nativeSrc": "2495:186:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "start",
									"nativeSrc": "2533:5:8",
									"nodeType": "YulTypedName",
									"src": "2533:5:8",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "2540:3:8",
									"nodeType": "YulTypedName",
									"src": "2540:3:8",
									"type": ""
								}
							],
							"src": "2495:186:8"
						},
						{
							"body": {
								"nativeSrc": "2766:464:8",
								"nodeType": "YulBlock",
								"src": "2766:464:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "2792:431:8",
											"nodeType": "YulBlock",
											"src": "2792:431:8",
											"statements": [
												{
													"nativeSrc": "2806:54:8",
													"nodeType": "YulVariableDeclaration",
													"src": "2806:54:8",
													"value": {
														"arguments": [
															{
																"name": "array",
																"nativeSrc": "2854:5:8",
																"nodeType": "YulIdentifier",
																"src": "2854:5:8"
															}
														],
														"functionName": {
															"name": "array_dataslot_t_string_storage",
															"nativeSrc": "2822:31:8",
															"nodeType": "YulIdentifier",
															"src": "2822:31:8"
														},
														"nativeSrc": "2822:38:8",
														"nodeType": "YulFunctionCall",
														"src": "2822:38:8"
													},
													"variables": [
														{
															"name": "dataArea",
															"nativeSrc": "2810:8:8",
															"nodeType": "YulTypedName",
															"src": "2810:8:8",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "2873:63:8",
													"nodeType": "YulVariableDeclaration",
													"src": "2873:63:8",
													"value": {
														"arguments": [
															{
																"name": "dataArea",
																"nativeSrc": "2896:8:8",
																"nodeType": "YulIdentifier",
																"src": "2896:8:8"
															},
															{
																"arguments": [
																	{
																		"name": "startIndex",
																		"nativeSrc": "2924:10:8",
																		"nodeType": "YulIdentifier",
																		"src": "2924:10:8"
																	}
																],
																"functionName": {
																	"name": "divide_by_32_ceil",
																	"nativeSrc": "2906:17:8",
																	"nodeType": "YulIdentifier",
																	"src": "2906:17:8"
																},
																"nativeSrc": "2906:29:8",
																"nodeType": "YulFunctionCall",
																"src": "2906:29:8"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "2892:3:8",
															"nodeType": "YulIdentifier",
															"src": "2892:3:8"
														},
														"nativeSrc": "2892:44:8",
														"nodeType": "YulFunctionCall",
														"src": "2892:44:8"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nativeSrc": "2877:11:8",
															"nodeType": "YulTypedName",
															"src": "2877:11:8",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "3093:27:8",
														"nodeType": "YulBlock",
														"src": "3093:27:8",
														"statements": [
															{
																"nativeSrc": "3095:23:8",
																"nodeType": "YulAssignment",
																"src": "3095:23:8",
																"value": {
																	"name": "dataArea",
																	"nativeSrc": "3110:8:8",
																	"nodeType": "YulIdentifier",
																	"src": "3110:8:8"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nativeSrc": "3095:11:8",
																		"nodeType": "YulIdentifier",
																		"src": "3095:11:8"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nativeSrc": "3077:10:8",
																"nodeType": "YulIdentifier",
																"src": "3077:10:8"
															},
															{
																"kind": "number",
																"nativeSrc": "3089:2:8",
																"nodeType": "YulLiteral",
																"src": "3089:2:8",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "3074:2:8",
															"nodeType": "YulIdentifier",
															"src": "3074:2:8"
														},
														"nativeSrc": "3074:18:8",
														"nodeType": "YulFunctionCall",
														"src": "3074:18:8"
													},
													"nativeSrc": "3071:49:8",
													"nodeType": "YulIf",
													"src": "3071:49:8"
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "deleteStart",
																"nativeSrc": "3162:11:8",
																"nodeType": "YulIdentifier",
																"src": "3162:11:8"
															},
															{
																"arguments": [
																	{
																		"name": "dataArea",
																		"nativeSrc": "3179:8:8",
																		"nodeType": "YulIdentifier",
																		"src": "3179:8:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nativeSrc": "3207:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "3207:3:8"
																			}
																		],
																		"functionName": {
																			"name": "divide_by_32_ceil",
																			"nativeSrc": "3189:17:8",
																			"nodeType": "YulIdentifier",
																			"src": "3189:17:8"
																		},
																		"nativeSrc": "3189:22:8",
																		"nodeType": "YulFunctionCall",
																		"src": "3189:22:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3175:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "3175:3:8"
																},
																"nativeSrc": "3175:37:8",
																"nodeType": "YulFunctionCall",
																"src": "3175:37:8"
															}
														],
														"functionName": {
															"name": "clear_storage_range_t_bytes1",
															"nativeSrc": "3133:28:8",
															"nodeType": "YulIdentifier",
															"src": "3133:28:8"
														},
														"nativeSrc": "3133:80:8",
														"nodeType": "YulFunctionCall",
														"src": "3133:80:8"
													},
													"nativeSrc": "3133:80:8",
													"nodeType": "YulExpressionStatement",
													"src": "3133:80:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nativeSrc": "2783:3:8",
													"nodeType": "YulIdentifier",
													"src": "2783:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "2788:2:8",
													"nodeType": "YulLiteral",
													"src": "2788:2:8",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "2780:2:8",
												"nodeType": "YulIdentifier",
												"src": "2780:2:8"
											},
											"nativeSrc": "2780:11:8",
											"nodeType": "YulFunctionCall",
											"src": "2780:11:8"
										},
										"nativeSrc": "2777:446:8",
										"nodeType": "YulIf",
										"src": "2777:446:8"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_t_string_storage",
							"nativeSrc": "2687:543:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "2742:5:8",
									"nodeType": "YulTypedName",
									"src": "2742:5:8",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "2749:3:8",
									"nodeType": "YulTypedName",
									"src": "2749:3:8",
									"type": ""
								},
								{
									"name": "startIndex",
									"nativeSrc": "2754:10:8",
									"nodeType": "YulTypedName",
									"src": "2754:10:8",
									"type": ""
								}
							],
							"src": "2687:543:8"
						},
						{
							"body": {
								"nativeSrc": "3299:54:8",
								"nodeType": "YulBlock",
								"src": "3299:54:8",
								"statements": [
									{
										"nativeSrc": "3309:37:8",
										"nodeType": "YulAssignment",
										"src": "3309:37:8",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nativeSrc": "3334:4:8",
													"nodeType": "YulIdentifier",
													"src": "3334:4:8"
												},
												{
													"name": "value",
													"nativeSrc": "3340:5:8",
													"nodeType": "YulIdentifier",
													"src": "3340:5:8"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "3330:3:8",
												"nodeType": "YulIdentifier",
												"src": "3330:3:8"
											},
											"nativeSrc": "3330:16:8",
											"nodeType": "YulFunctionCall",
											"src": "3330:16:8"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "3309:8:8",
												"nodeType": "YulIdentifier",
												"src": "3309:8:8"
											}
										]
									}
								]
							},
							"name": "shift_right_unsigned_dynamic",
							"nativeSrc": "3236:117:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nativeSrc": "3274:4:8",
									"nodeType": "YulTypedName",
									"src": "3274:4:8",
									"type": ""
								},
								{
									"name": "value",
									"nativeSrc": "3280:5:8",
									"nodeType": "YulTypedName",
									"src": "3280:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "3290:8:8",
									"nodeType": "YulTypedName",
									"src": "3290:8:8",
									"type": ""
								}
							],
							"src": "3236:117:8"
						},
						{
							"body": {
								"nativeSrc": "3410:118:8",
								"nodeType": "YulBlock",
								"src": "3410:118:8",
								"statements": [
									{
										"nativeSrc": "3420:68:8",
										"nodeType": "YulVariableDeclaration",
										"src": "3420:68:8",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "3469:1:8",
																	"nodeType": "YulLiteral",
																	"src": "3469:1:8",
																	"type": "",
																	"value": "8"
																},
																{
																	"name": "bytes",
																	"nativeSrc": "3472:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "3472:5:8"
																}
															],
															"functionName": {
																"name": "mul",
																"nativeSrc": "3465:3:8",
																"nodeType": "YulIdentifier",
																"src": "3465:3:8"
															},
															"nativeSrc": "3465:13:8",
															"nodeType": "YulFunctionCall",
															"src": "3465:13:8"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "3484:1:8",
																	"nodeType": "YulLiteral",
																	"src": "3484:1:8",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "3480:3:8",
																"nodeType": "YulIdentifier",
																"src": "3480:3:8"
															},
															"nativeSrc": "3480:6:8",
															"nodeType": "YulFunctionCall",
															"src": "3480:6:8"
														}
													],
													"functionName": {
														"name": "shift_right_unsigned_dynamic",
														"nativeSrc": "3436:28:8",
														"nodeType": "YulIdentifier",
														"src": "3436:28:8"
													},
													"nativeSrc": "3436:51:8",
													"nodeType": "YulFunctionCall",
													"src": "3436:51:8"
												}
											],
											"functionName": {
												"name": "not",
												"nativeSrc": "3432:3:8",
												"nodeType": "YulIdentifier",
												"src": "3432:3:8"
											},
											"nativeSrc": "3432:56:8",
											"nodeType": "YulFunctionCall",
											"src": "3432:56:8"
										},
										"variables": [
											{
												"name": "mask",
												"nativeSrc": "3424:4:8",
												"nodeType": "YulTypedName",
												"src": "3424:4:8",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3497:25:8",
										"nodeType": "YulAssignment",
										"src": "3497:25:8",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "3511:4:8",
													"nodeType": "YulIdentifier",
													"src": "3511:4:8"
												},
												{
													"name": "mask",
													"nativeSrc": "3517:4:8",
													"nodeType": "YulIdentifier",
													"src": "3517:4:8"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "3507:3:8",
												"nodeType": "YulIdentifier",
												"src": "3507:3:8"
											},
											"nativeSrc": "3507:15:8",
											"nodeType": "YulFunctionCall",
											"src": "3507:15:8"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "3497:6:8",
												"nodeType": "YulIdentifier",
												"src": "3497:6:8"
											}
										]
									}
								]
							},
							"name": "mask_bytes_dynamic",
							"nativeSrc": "3359:169:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "3387:4:8",
									"nodeType": "YulTypedName",
									"src": "3387:4:8",
									"type": ""
								},
								{
									"name": "bytes",
									"nativeSrc": "3393:5:8",
									"nodeType": "YulTypedName",
									"src": "3393:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "3403:6:8",
									"nodeType": "YulTypedName",
									"src": "3403:6:8",
									"type": ""
								}
							],
							"src": "3359:169:8"
						},
						{
							"body": {
								"nativeSrc": "3614:214:8",
								"nodeType": "YulBlock",
								"src": "3614:214:8",
								"statements": [
									{
										"nativeSrc": "3747:37:8",
										"nodeType": "YulAssignment",
										"src": "3747:37:8",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "3774:4:8",
													"nodeType": "YulIdentifier",
													"src": "3774:4:8"
												},
												{
													"name": "len",
													"nativeSrc": "3780:3:8",
													"nodeType": "YulIdentifier",
													"src": "3780:3:8"
												}
											],
											"functionName": {
												"name": "mask_bytes_dynamic",
												"nativeSrc": "3755:18:8",
												"nodeType": "YulIdentifier",
												"src": "3755:18:8"
											},
											"nativeSrc": "3755:29:8",
											"nodeType": "YulFunctionCall",
											"src": "3755:29:8"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "3747:4:8",
												"nodeType": "YulIdentifier",
												"src": "3747:4:8"
											}
										]
									},
									{
										"nativeSrc": "3793:29:8",
										"nodeType": "YulAssignment",
										"src": "3793:29:8",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "3804:4:8",
													"nodeType": "YulIdentifier",
													"src": "3804:4:8"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "3814:1:8",
															"nodeType": "YulLiteral",
															"src": "3814:1:8",
															"type": "",
															"value": "2"
														},
														{
															"name": "len",
															"nativeSrc": "3817:3:8",
															"nodeType": "YulIdentifier",
															"src": "3817:3:8"
														}
													],
													"functionName": {
														"name": "mul",
														"nativeSrc": "3810:3:8",
														"nodeType": "YulIdentifier",
														"src": "3810:3:8"
													},
													"nativeSrc": "3810:11:8",
													"nodeType": "YulFunctionCall",
													"src": "3810:11:8"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "3801:2:8",
												"nodeType": "YulIdentifier",
												"src": "3801:2:8"
											},
											"nativeSrc": "3801:21:8",
											"nodeType": "YulFunctionCall",
											"src": "3801:21:8"
										},
										"variableNames": [
											{
												"name": "used",
												"nativeSrc": "3793:4:8",
												"nodeType": "YulIdentifier",
												"src": "3793:4:8"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nativeSrc": "3533:295:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "3595:4:8",
									"nodeType": "YulTypedName",
									"src": "3595:4:8",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "3601:3:8",
									"nodeType": "YulTypedName",
									"src": "3601:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nativeSrc": "3609:4:8",
									"nodeType": "YulTypedName",
									"src": "3609:4:8",
									"type": ""
								}
							],
							"src": "3533:295:8"
						},
						{
							"body": {
								"nativeSrc": "3925:1303:8",
								"nodeType": "YulBlock",
								"src": "3925:1303:8",
								"statements": [
									{
										"nativeSrc": "3936:51:8",
										"nodeType": "YulVariableDeclaration",
										"src": "3936:51:8",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "3983:3:8",
													"nodeType": "YulIdentifier",
													"src": "3983:3:8"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "3950:32:8",
												"nodeType": "YulIdentifier",
												"src": "3950:32:8"
											},
											"nativeSrc": "3950:37:8",
											"nodeType": "YulFunctionCall",
											"src": "3950:37:8"
										},
										"variables": [
											{
												"name": "newLen",
												"nativeSrc": "3940:6:8",
												"nodeType": "YulTypedName",
												"src": "3940:6:8",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4072:22:8",
											"nodeType": "YulBlock",
											"src": "4072:22:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "4074:16:8",
															"nodeType": "YulIdentifier",
															"src": "4074:16:8"
														},
														"nativeSrc": "4074:18:8",
														"nodeType": "YulFunctionCall",
														"src": "4074:18:8"
													},
													"nativeSrc": "4074:18:8",
													"nodeType": "YulExpressionStatement",
													"src": "4074:18:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "4044:6:8",
													"nodeType": "YulIdentifier",
													"src": "4044:6:8"
												},
												{
													"kind": "number",
													"nativeSrc": "4052:18:8",
													"nodeType": "YulLiteral",
													"src": "4052:18:8",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "4041:2:8",
												"nodeType": "YulIdentifier",
												"src": "4041:2:8"
											},
											"nativeSrc": "4041:30:8",
											"nodeType": "YulFunctionCall",
											"src": "4041:30:8"
										},
										"nativeSrc": "4038:56:8",
										"nodeType": "YulIf",
										"src": "4038:56:8"
									},
									{
										"nativeSrc": "4104:52:8",
										"nodeType": "YulVariableDeclaration",
										"src": "4104:52:8",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "slot",
															"nativeSrc": "4150:4:8",
															"nodeType": "YulIdentifier",
															"src": "4150:4:8"
														}
													],
													"functionName": {
														"name": "sload",
														"nativeSrc": "4144:5:8",
														"nodeType": "YulIdentifier",
														"src": "4144:5:8"
													},
													"nativeSrc": "4144:11:8",
													"nodeType": "YulFunctionCall",
													"src": "4144:11:8"
												}
											],
											"functionName": {
												"name": "extract_byte_array_length",
												"nativeSrc": "4118:25:8",
												"nodeType": "YulIdentifier",
												"src": "4118:25:8"
											},
											"nativeSrc": "4118:38:8",
											"nodeType": "YulFunctionCall",
											"src": "4118:38:8"
										},
										"variables": [
											{
												"name": "oldLen",
												"nativeSrc": "4108:6:8",
												"nodeType": "YulTypedName",
												"src": "4108:6:8",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "4249:4:8",
													"nodeType": "YulIdentifier",
													"src": "4249:4:8"
												},
												{
													"name": "oldLen",
													"nativeSrc": "4255:6:8",
													"nodeType": "YulIdentifier",
													"src": "4255:6:8"
												},
												{
													"name": "newLen",
													"nativeSrc": "4263:6:8",
													"nodeType": "YulIdentifier",
													"src": "4263:6:8"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "4203:45:8",
												"nodeType": "YulIdentifier",
												"src": "4203:45:8"
											},
											"nativeSrc": "4203:67:8",
											"nodeType": "YulFunctionCall",
											"src": "4203:67:8"
										},
										"nativeSrc": "4203:67:8",
										"nodeType": "YulExpressionStatement",
										"src": "4203:67:8"
									},
									{
										"nativeSrc": "4280:18:8",
										"nodeType": "YulVariableDeclaration",
										"src": "4280:18:8",
										"value": {
											"kind": "number",
											"nativeSrc": "4297:1:8",
											"nodeType": "YulLiteral",
											"src": "4297:1:8",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nativeSrc": "4284:9:8",
												"nodeType": "YulTypedName",
												"src": "4284:9:8",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "4308:17:8",
										"nodeType": "YulAssignment",
										"src": "4308:17:8",
										"value": {
											"kind": "number",
											"nativeSrc": "4321:4:8",
											"nodeType": "YulLiteral",
											"src": "4321:4:8",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nativeSrc": "4308:9:8",
												"nodeType": "YulIdentifier",
												"src": "4308:9:8"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "4372:611:8",
													"nodeType": "YulBlock",
													"src": "4372:611:8",
													"statements": [
														{
															"nativeSrc": "4386:37:8",
															"nodeType": "YulVariableDeclaration",
															"src": "4386:37:8",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "4405:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "4405:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4417:4:8",
																				"nodeType": "YulLiteral",
																				"src": "4417:4:8",
																				"type": "",
																				"value": "0x1f"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "4413:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "4413:3:8"
																		},
																		"nativeSrc": "4413:9:8",
																		"nodeType": "YulFunctionCall",
																		"src": "4413:9:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4401:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "4401:3:8"
																},
																"nativeSrc": "4401:22:8",
																"nodeType": "YulFunctionCall",
																"src": "4401:22:8"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nativeSrc": "4390:7:8",
																	"nodeType": "YulTypedName",
																	"src": "4390:7:8",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4437:51:8",
															"nodeType": "YulVariableDeclaration",
															"src": "4437:51:8",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "4483:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "4483:4:8"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_string_storage",
																	"nativeSrc": "4451:31:8",
																	"nodeType": "YulIdentifier",
																	"src": "4451:31:8"
																},
																"nativeSrc": "4451:37:8",
																"nodeType": "YulFunctionCall",
																"src": "4451:37:8"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nativeSrc": "4441:6:8",
																	"nodeType": "YulTypedName",
																	"src": "4441:6:8",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4501:10:8",
															"nodeType": "YulVariableDeclaration",
															"src": "4501:10:8",
															"value": {
																"kind": "number",
																"nativeSrc": "4510:1:8",
																"nodeType": "YulLiteral",
																"src": "4510:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "4505:1:8",
																	"nodeType": "YulTypedName",
																	"src": "4505:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4569:163:8",
																"nodeType": "YulBlock",
																"src": "4569:163:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "4594:6:8",
																					"nodeType": "YulIdentifier",
																					"src": "4594:6:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "4612:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "4612:3:8"
																								},
																								{
																									"name": "srcOffset",
																									"nativeSrc": "4617:9:8",
																									"nodeType": "YulIdentifier",
																									"src": "4617:9:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "4608:3:8",
																								"nodeType": "YulIdentifier",
																								"src": "4608:3:8"
																							},
																							"nativeSrc": "4608:19:8",
																							"nodeType": "YulFunctionCall",
																							"src": "4608:19:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "4602:5:8",
																						"nodeType": "YulIdentifier",
																						"src": "4602:5:8"
																					},
																					"nativeSrc": "4602:26:8",
																					"nodeType": "YulFunctionCall",
																					"src": "4602:26:8"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "4587:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "4587:6:8"
																			},
																			"nativeSrc": "4587:42:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4587:42:8"
																		},
																		"nativeSrc": "4587:42:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "4587:42:8"
																	},
																	{
																		"nativeSrc": "4646:24:8",
																		"nodeType": "YulAssignment",
																		"src": "4646:24:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "4660:6:8",
																					"nodeType": "YulIdentifier",
																					"src": "4660:6:8"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4668:1:8",
																					"nodeType": "YulLiteral",
																					"src": "4668:1:8",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4656:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "4656:3:8"
																			},
																			"nativeSrc": "4656:14:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4656:14:8"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nativeSrc": "4646:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "4646:6:8"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4687:31:8",
																		"nodeType": "YulAssignment",
																		"src": "4687:31:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nativeSrc": "4704:9:8",
																					"nodeType": "YulIdentifier",
																					"src": "4704:9:8"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4715:2:8",
																					"nodeType": "YulLiteral",
																					"src": "4715:2:8",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4700:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "4700:3:8"
																			},
																			"nativeSrc": "4700:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4700:18:8"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nativeSrc": "4687:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "4687:9:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "4535:1:8",
																		"nodeType": "YulIdentifier",
																		"src": "4535:1:8"
																	},
																	{
																		"name": "loopEnd",
																		"nativeSrc": "4538:7:8",
																		"nodeType": "YulIdentifier",
																		"src": "4538:7:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "4532:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "4532:2:8"
																},
																"nativeSrc": "4532:14:8",
																"nodeType": "YulFunctionCall",
																"src": "4532:14:8"
															},
															"nativeSrc": "4524:208:8",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "4547:21:8",
																"nodeType": "YulBlock",
																"src": "4547:21:8",
																"statements": [
																	{
																		"nativeSrc": "4549:17:8",
																		"nodeType": "YulAssignment",
																		"src": "4549:17:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "4558:1:8",
																					"nodeType": "YulIdentifier",
																					"src": "4558:1:8"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4561:4:8",
																					"nodeType": "YulLiteral",
																					"src": "4561:4:8",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4554:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "4554:3:8"
																			},
																			"nativeSrc": "4554:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4554:12:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "4549:1:8",
																				"nodeType": "YulIdentifier",
																				"src": "4549:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "4528:3:8",
																"nodeType": "YulBlock",
																"src": "4528:3:8",
																"statements": []
															},
															"src": "4524:208:8"
														},
														{
															"body": {
																"nativeSrc": "4768:156:8",
																"nodeType": "YulBlock",
																"src": "4768:156:8",
																"statements": [
																	{
																		"nativeSrc": "4786:43:8",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4786:43:8",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "4813:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "4813:3:8"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "4818:9:8",
																							"nodeType": "YulIdentifier",
																							"src": "4818:9:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "4809:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "4809:3:8"
																					},
																					"nativeSrc": "4809:19:8",
																					"nodeType": "YulFunctionCall",
																					"src": "4809:19:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "4803:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "4803:5:8"
																			},
																			"nativeSrc": "4803:26:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4803:26:8"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nativeSrc": "4790:9:8",
																				"nodeType": "YulTypedName",
																				"src": "4790:9:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "4853:6:8",
																					"nodeType": "YulIdentifier",
																					"src": "4853:6:8"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nativeSrc": "4880:9:8",
																							"nodeType": "YulIdentifier",
																							"src": "4880:9:8"
																						},
																						{
																							"arguments": [
																								{
																									"name": "newLen",
																									"nativeSrc": "4895:6:8",
																									"nodeType": "YulIdentifier",
																									"src": "4895:6:8"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "4903:4:8",
																									"nodeType": "YulLiteral",
																									"src": "4903:4:8",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nativeSrc": "4891:3:8",
																								"nodeType": "YulIdentifier",
																								"src": "4891:3:8"
																							},
																							"nativeSrc": "4891:17:8",
																							"nodeType": "YulFunctionCall",
																							"src": "4891:17:8"
																						}
																					],
																					"functionName": {
																						"name": "mask_bytes_dynamic",
																						"nativeSrc": "4861:18:8",
																						"nodeType": "YulIdentifier",
																						"src": "4861:18:8"
																					},
																					"nativeSrc": "4861:48:8",
																					"nodeType": "YulFunctionCall",
																					"src": "4861:48:8"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "4846:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "4846:6:8"
																			},
																			"nativeSrc": "4846:64:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4846:64:8"
																		},
																		"nativeSrc": "4846:64:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "4846:64:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nativeSrc": "4751:7:8",
																		"nodeType": "YulIdentifier",
																		"src": "4751:7:8"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "4760:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "4760:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "4748:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "4748:2:8"
																},
																"nativeSrc": "4748:19:8",
																"nodeType": "YulFunctionCall",
																"src": "4748:19:8"
															},
															"nativeSrc": "4745:179:8",
															"nodeType": "YulIf",
															"src": "4745:179:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "4944:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "4944:4:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "newLen",
																						"nativeSrc": "4958:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "4958:6:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4966:1:8",
																						"nodeType": "YulLiteral",
																						"src": "4966:1:8",
																						"type": "",
																						"value": "2"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "4954:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "4954:3:8"
																				},
																				"nativeSrc": "4954:14:8",
																				"nodeType": "YulFunctionCall",
																				"src": "4954:14:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4970:1:8",
																				"nodeType": "YulLiteral",
																				"src": "4970:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4950:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "4950:3:8"
																		},
																		"nativeSrc": "4950:22:8",
																		"nodeType": "YulFunctionCall",
																		"src": "4950:22:8"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "4937:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4937:6:8"
																},
																"nativeSrc": "4937:36:8",
																"nodeType": "YulFunctionCall",
																"src": "4937:36:8"
															},
															"nativeSrc": "4937:36:8",
															"nodeType": "YulExpressionStatement",
															"src": "4937:36:8"
														}
													]
												},
												"nativeSrc": "4365:618:8",
												"nodeType": "YulCase",
												"src": "4365:618:8",
												"value": {
													"kind": "number",
													"nativeSrc": "4370:1:8",
													"nodeType": "YulLiteral",
													"src": "4370:1:8",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "5000:222:8",
													"nodeType": "YulBlock",
													"src": "5000:222:8",
													"statements": [
														{
															"nativeSrc": "5014:14:8",
															"nodeType": "YulVariableDeclaration",
															"src": "5014:14:8",
															"value": {
																"kind": "number",
																"nativeSrc": "5027:1:8",
																"nodeType": "YulLiteral",
																"src": "5027:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "5018:5:8",
																	"nodeType": "YulTypedName",
																	"src": "5018:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5051:67:8",
																"nodeType": "YulBlock",
																"src": "5051:67:8",
																"statements": [
																	{
																		"nativeSrc": "5069:35:8",
																		"nodeType": "YulAssignment",
																		"src": "5069:35:8",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "5088:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "5088:3:8"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "5093:9:8",
																							"nodeType": "YulIdentifier",
																							"src": "5093:9:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "5084:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "5084:3:8"
																					},
																					"nativeSrc": "5084:19:8",
																					"nodeType": "YulFunctionCall",
																					"src": "5084:19:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "5078:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "5078:5:8"
																			},
																			"nativeSrc": "5078:26:8",
																			"nodeType": "YulFunctionCall",
																			"src": "5078:26:8"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "5069:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "5069:5:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nativeSrc": "5044:6:8",
																"nodeType": "YulIdentifier",
																"src": "5044:6:8"
															},
															"nativeSrc": "5041:77:8",
															"nodeType": "YulIf",
															"src": "5041:77:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5138:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "5138:4:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5197:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "5197:5:8"
																			},
																			{
																				"name": "newLen",
																				"nativeSrc": "5204:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "5204:6:8"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nativeSrc": "5144:52:8",
																			"nodeType": "YulIdentifier",
																			"src": "5144:52:8"
																		},
																		"nativeSrc": "5144:67:8",
																		"nodeType": "YulFunctionCall",
																		"src": "5144:67:8"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "5131:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "5131:6:8"
																},
																"nativeSrc": "5131:81:8",
																"nodeType": "YulFunctionCall",
																"src": "5131:81:8"
															},
															"nativeSrc": "5131:81:8",
															"nodeType": "YulExpressionStatement",
															"src": "5131:81:8"
														}
													]
												},
												"nativeSrc": "4992:230:8",
												"nodeType": "YulCase",
												"src": "4992:230:8",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "4345:6:8",
													"nodeType": "YulIdentifier",
													"src": "4345:6:8"
												},
												{
													"kind": "number",
													"nativeSrc": "4353:2:8",
													"nodeType": "YulLiteral",
													"src": "4353:2:8",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "4342:2:8",
												"nodeType": "YulIdentifier",
												"src": "4342:2:8"
											},
											"nativeSrc": "4342:14:8",
											"nodeType": "YulFunctionCall",
											"src": "4342:14:8"
										},
										"nativeSrc": "4335:887:8",
										"nodeType": "YulSwitch",
										"src": "4335:887:8"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nativeSrc": "3833:1395:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "3914:4:8",
									"nodeType": "YulTypedName",
									"src": "3914:4:8",
									"type": ""
								},
								{
									"name": "src",
									"nativeSrc": "3920:3:8",
									"nodeType": "YulTypedName",
									"src": "3920:3:8",
									"type": ""
								}
							],
							"src": "3833:1395:8"
						},
						{
							"body": {
								"nativeSrc": "5279:81:8",
								"nodeType": "YulBlock",
								"src": "5279:81:8",
								"statements": [
									{
										"nativeSrc": "5289:65:8",
										"nodeType": "YulAssignment",
										"src": "5289:65:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "5304:5:8",
													"nodeType": "YulIdentifier",
													"src": "5304:5:8"
												},
												{
													"kind": "number",
													"nativeSrc": "5311:42:8",
													"nodeType": "YulLiteral",
													"src": "5311:42:8",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "5300:3:8",
												"nodeType": "YulIdentifier",
												"src": "5300:3:8"
											},
											"nativeSrc": "5300:54:8",
											"nodeType": "YulFunctionCall",
											"src": "5300:54:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "5289:7:8",
												"nodeType": "YulIdentifier",
												"src": "5289:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "5234:126:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5261:5:8",
									"nodeType": "YulTypedName",
									"src": "5261:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "5271:7:8",
									"nodeType": "YulTypedName",
									"src": "5271:7:8",
									"type": ""
								}
							],
							"src": "5234:126:8"
						},
						{
							"body": {
								"nativeSrc": "5411:51:8",
								"nodeType": "YulBlock",
								"src": "5411:51:8",
								"statements": [
									{
										"nativeSrc": "5421:35:8",
										"nodeType": "YulAssignment",
										"src": "5421:35:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "5450:5:8",
													"nodeType": "YulIdentifier",
													"src": "5450:5:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "5432:17:8",
												"nodeType": "YulIdentifier",
												"src": "5432:17:8"
											},
											"nativeSrc": "5432:24:8",
											"nodeType": "YulFunctionCall",
											"src": "5432:24:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "5421:7:8",
												"nodeType": "YulIdentifier",
												"src": "5421:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "5366:96:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5393:5:8",
									"nodeType": "YulTypedName",
									"src": "5393:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "5403:7:8",
									"nodeType": "YulTypedName",
									"src": "5403:7:8",
									"type": ""
								}
							],
							"src": "5366:96:8"
						},
						{
							"body": {
								"nativeSrc": "5533:53:8",
								"nodeType": "YulBlock",
								"src": "5533:53:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "5550:3:8",
													"nodeType": "YulIdentifier",
													"src": "5550:3:8"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "5573:5:8",
															"nodeType": "YulIdentifier",
															"src": "5573:5:8"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nativeSrc": "5555:17:8",
														"nodeType": "YulIdentifier",
														"src": "5555:17:8"
													},
													"nativeSrc": "5555:24:8",
													"nodeType": "YulFunctionCall",
													"src": "5555:24:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5543:6:8",
												"nodeType": "YulIdentifier",
												"src": "5543:6:8"
											},
											"nativeSrc": "5543:37:8",
											"nodeType": "YulFunctionCall",
											"src": "5543:37:8"
										},
										"nativeSrc": "5543:37:8",
										"nodeType": "YulExpressionStatement",
										"src": "5543:37:8"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nativeSrc": "5468:118:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5521:5:8",
									"nodeType": "YulTypedName",
									"src": "5521:5:8",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "5528:3:8",
									"nodeType": "YulTypedName",
									"src": "5528:3:8",
									"type": ""
								}
							],
							"src": "5468:118:8"
						},
						{
							"body": {
								"nativeSrc": "5690:124:8",
								"nodeType": "YulBlock",
								"src": "5690:124:8",
								"statements": [
									{
										"nativeSrc": "5700:26:8",
										"nodeType": "YulAssignment",
										"src": "5700:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5712:9:8",
													"nodeType": "YulIdentifier",
													"src": "5712:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "5723:2:8",
													"nodeType": "YulLiteral",
													"src": "5723:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5708:3:8",
												"nodeType": "YulIdentifier",
												"src": "5708:3:8"
											},
											"nativeSrc": "5708:18:8",
											"nodeType": "YulFunctionCall",
											"src": "5708:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5700:4:8",
												"nodeType": "YulIdentifier",
												"src": "5700:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "5780:6:8",
													"nodeType": "YulIdentifier",
													"src": "5780:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5793:9:8",
															"nodeType": "YulIdentifier",
															"src": "5793:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "5804:1:8",
															"nodeType": "YulLiteral",
															"src": "5804:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5789:3:8",
														"nodeType": "YulIdentifier",
														"src": "5789:3:8"
													},
													"nativeSrc": "5789:17:8",
													"nodeType": "YulFunctionCall",
													"src": "5789:17:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5736:43:8",
												"nodeType": "YulIdentifier",
												"src": "5736:43:8"
											},
											"nativeSrc": "5736:71:8",
											"nodeType": "YulFunctionCall",
											"src": "5736:71:8"
										},
										"nativeSrc": "5736:71:8",
										"nodeType": "YulExpressionStatement",
										"src": "5736:71:8"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "5592:222:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5662:9:8",
									"nodeType": "YulTypedName",
									"src": "5662:9:8",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5674:6:8",
									"nodeType": "YulTypedName",
									"src": "5674:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5685:4:8",
									"nodeType": "YulTypedName",
									"src": "5685:4:8",
									"type": ""
								}
							],
							"src": "5592:222:8"
						}
					]
				},
				"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
				"id": 8,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "608060405266038d7ea4c6800060075534801561001a575f5ffd5b50336040518060400160405280600e81526020017f436172626f6e6f546f6b656e32300000000000000000000000000000000000008152506040518060400160405280600381526020017f43424f000000000000000000000000000000000000000000000000000000000081525081600390816100979190610437565b5080600490816100a79190610437565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361011a575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101119190610545565b60405180910390fd5b6101298161013760201b60201c565b50600160068190555061055e565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061027557607f821691505b60208210810361028857610287610231565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026102ea7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102af565b6102f486836102af565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61033861033361032e8461030c565b610315565b61030c565b9050919050565b5f819050919050565b6103518361031e565b61036561035d8261033f565b8484546102bb565b825550505050565b5f5f905090565b61037c61036d565b610387818484610348565b505050565b5b818110156103aa5761039f5f82610374565b60018101905061038d565b5050565b601f8211156103ef576103c08161028e565b6103c9846102a0565b810160208510156103d8578190505b6103ec6103e4856102a0565b83018261038c565b50505b505050565b5f82821c905092915050565b5f61040f5f19846008026103f4565b1980831691505092915050565b5f6104278383610400565b9150826002028217905092915050565b610440826101fa565b67ffffffffffffffff81111561045957610458610204565b5b610463825461025e565b61046e8282856103ae565b5f60209050601f83116001811461049f575f841561048d578287015190505b610497858261041c565b8655506104fe565b601f1984166104ad8661028e565b5f5b828110156104d4578489015182556001820191506020850194506020810190506104af565b868310156104f157848901516104ed601f891682610400565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61052f82610506565b9050919050565b61053f81610525565b82525050565b5f6020820190506105585f830184610536565b92915050565b611b6e8061056b5f395ff3fe6080604052600436106100f6575f3560e01c8063715018a611610089578063c133106111610058578063c133106114610331578063dbf09d661461033b578063dd62ed3e14610365578063f2fde38b146103a157610105565b8063715018a61461028b5780638da5cb5b146102a157806395d89b41146102cb578063a9059cbb146102f557610105565b8063313ce567116100c5578063313ce567146101d557806351cff8d9146101ff578063707e422f1461022757806370a082311461024f57610105565b806306fdde0314610109578063095ea7b31461013357806318160ddd1461016f57806323b872dd1461019957610105565b36610105576101036103c9565b005b5f5ffd5b348015610114575f5ffd5b5061011d6104e9565b60405161012a9190611267565b60405180910390f35b34801561013e575f5ffd5b5061015960048036038101906101549190611318565b610579565b6040516101669190611370565b60405180910390f35b34801561017a575f5ffd5b5061018361059b565b6040516101909190611398565b60405180910390f35b3480156101a4575f5ffd5b506101bf60048036038101906101ba91906113b1565b6105a4565b6040516101cc9190611370565b60405180910390f35b3480156101e0575f5ffd5b506101e96105d2565b6040516101f6919061141c565b60405180910390f35b34801561020a575f5ffd5b5061022560048036038101906102209190611470565b6105da565b005b348015610232575f5ffd5b5061024d6004803603810190610248919061149b565b610791565b005b34801561025a575f5ffd5b50610275600480360381019061027091906114c6565b61081c565b6040516102829190611398565b60405180910390f35b348015610296575f5ffd5b5061029f610861565b005b3480156102ac575f5ffd5b506102b5610874565b6040516102c29190611500565b60405180910390f35b3480156102d6575f5ffd5b506102df61089c565b6040516102ec9190611267565b60405180910390f35b348015610300575f5ffd5b5061031b60048036038101906103169190611318565b61092c565b6040516103289190611370565b60405180910390f35b6103396103c9565b005b348015610346575f5ffd5b5061034f61094e565b60405161035c9190611398565b60405180910390f35b348015610370575f5ffd5b5061038b60048036038101906103869190611519565b610954565b6040516103989190611398565b60405180910390f35b3480156103ac575f5ffd5b506103c760048036038101906103c291906114c6565b6109d6565b005b6103d1610a5a565b5f3411610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040a906115a1565b60405180910390fd5b5f60075461041f6105d2565b600a61042b919061171b565b346104369190611765565b61044091906117d3565b90505f8111610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b9061184d565b60405180910390fd5b61048e3382610aa0565b3373ffffffffffffffffffffffffffffffffffffffff167f1226f1537b00d316270056dd247f05739ee0aca67a32cdd8258b675b6f0658b034836040516104d692919061186b565b60405180910390a2506104e7610b1f565b565b6060600380546104f8906118bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610524906118bf565b801561056f5780601f106105465761010080835404028352916020019161056f565b820191905f5260205f20905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b5f5f610583610b29565b9050610590818585610b30565b600191505092915050565b5f600254905090565b5f5f6105ae610b29565b90506105bb858285610b42565b6105c6858585610bd5565b60019150509392505050565b5f6012905090565b6105e2610cc5565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064790611939565b60405180910390fd5b5f4790505f8111610696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068d906119a1565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff16826040516106bb906119ec565b5f6040518083038185875af1925050503d805f81146106f5576040519150601f19603f3d011682016040523d82523d5f602084013e6106fa565b606091505b505090508061073e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073590611a4a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040516107849190611398565b60405180910390a2505050565b610799610cc5565b5f81116107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d290611ab2565b60405180910390fd5b806007819055507f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe0816040516108119190611398565b60405180910390a150565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610869610cc5565b6108725f610d4c565b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546108ab906118bf565b80601f01602080910402602001604051908101604052809291908181526020018280546108d7906118bf565b80156109225780601f106108f957610100808354040283529160200191610922565b820191905f5260205f20905b81548152906001019060200180831161090557829003601f168201915b5050505050905090565b5f5f610936610b29565b9050610943818585610bd5565b600191505092915050565b60075481565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6109de610cc5565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a4e575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610a459190611500565b60405180910390fd5b610a5781610d4c565b50565b600260065403610a96576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b10575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610b079190611500565b60405180910390fd5b610b1b5f8383610e0f565b5050565b6001600681905550565b5f33905090565b610b3d8383836001611028565b505050565b5f610b4d8484610954565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610bcf5781811015610bc0578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610bb793929190611ad0565b60405180910390fd5b610bce84848484035f611028565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c45575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610c3c9190611500565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cb5575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610cac9190611500565b60405180910390fd5b610cc0838383610e0f565b505050565b610ccd610b29565b73ffffffffffffffffffffffffffffffffffffffff16610ceb610874565b73ffffffffffffffffffffffffffffffffffffffff1614610d4a57610d0e610b29565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d419190611500565b60405180910390fd5b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e5f578060025f828254610e539190611b05565b92505081905550610f2d565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610ee8578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610edf93929190611ad0565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f74578060025f8282540392505081905550610fbe565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161101b9190611398565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611098575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161108f9190611500565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611108575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016110ff9190611500565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156111f1578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516111e89190611398565b60405180910390a35b50505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611239826111f7565b6112438185611201565b9350611253818560208601611211565b61125c8161121f565b840191505092915050565b5f6020820190508181035f83015261127f818461122f565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6112b48261128b565b9050919050565b6112c4816112aa565b81146112ce575f5ffd5b50565b5f813590506112df816112bb565b92915050565b5f819050919050565b6112f7816112e5565b8114611301575f5ffd5b50565b5f81359050611312816112ee565b92915050565b5f5f6040838503121561132e5761132d611287565b5b5f61133b858286016112d1565b925050602061134c85828601611304565b9150509250929050565b5f8115159050919050565b61136a81611356565b82525050565b5f6020820190506113835f830184611361565b92915050565b611392816112e5565b82525050565b5f6020820190506113ab5f830184611389565b92915050565b5f5f5f606084860312156113c8576113c7611287565b5b5f6113d5868287016112d1565b93505060206113e6868287016112d1565b92505060406113f786828701611304565b9150509250925092565b5f60ff82169050919050565b61141681611401565b82525050565b5f60208201905061142f5f83018461140d565b92915050565b5f61143f8261128b565b9050919050565b61144f81611435565b8114611459575f5ffd5b50565b5f8135905061146a81611446565b92915050565b5f6020828403121561148557611484611287565b5b5f6114928482850161145c565b91505092915050565b5f602082840312156114b0576114af611287565b5b5f6114bd84828501611304565b91505092915050565b5f602082840312156114db576114da611287565b5b5f6114e8848285016112d1565b91505092915050565b6114fa816112aa565b82525050565b5f6020820190506115135f8301846114f1565b92915050565b5f5f6040838503121561152f5761152e611287565b5b5f61153c858286016112d1565b925050602061154d858286016112d1565b9150509250929050565b7f6e6f2045544800000000000000000000000000000000000000000000000000005f82015250565b5f61158b600683611201565b915061159682611557565b602082019050919050565b5f6020820190508181035f8301526115b88161157f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f5f8291508390505b60018511156116415780860481111561161d5761161c6115bf565b5b600185161561162c5780820291505b808102905061163a856115ec565b9450611601565b94509492505050565b5f826116595760019050611714565b81611666575f9050611714565b816001811461167c5760028114611686576116b5565b6001915050611714565b60ff841115611698576116976115bf565b5b8360020a9150848211156116af576116ae6115bf565b5b50611714565b5060208310610133831016604e8410600b84101617156116ea5782820a9050838111156116e5576116e46115bf565b5b611714565b6116f784848460016115f8565b9250905081840481111561170e5761170d6115bf565b5b81810290505b9392505050565b5f611725826112e5565b915061173083611401565b925061175d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461164a565b905092915050565b5f61176f826112e5565b915061177a836112e5565b9250828202611788816112e5565b9150828204841483151761179f5761179e6115bf565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6117dd826112e5565b91506117e8836112e5565b9250826117f8576117f76117a6565b5b828204905092915050565b7f746f6f206c6974746c65204554480000000000000000000000000000000000005f82015250565b5f611837600e83611201565b915061184282611803565b602082019050919050565b5f6020820190508181035f8301526118648161182b565b9050919050565b5f60408201905061187e5f830185611389565b61188b6020830184611389565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806118d657607f821691505b6020821081036118e9576118e8611892565b5b50919050565b7f746f3d30000000000000000000000000000000000000000000000000000000005f82015250565b5f611923600483611201565b915061192e826118ef565b602082019050919050565b5f6020820190508181035f83015261195081611917565b9050919050565b7f656d7074790000000000000000000000000000000000000000000000000000005f82015250565b5f61198b600583611201565b915061199682611957565b602082019050919050565b5f6020820190508181035f8301526119b88161197f565b9050919050565b5f81905092915050565b50565b5f6119d75f836119bf565b91506119e2826119c9565b5f82019050919050565b5f6119f6826119cc565b9150819050919050565b7f7769746864726177206661696c000000000000000000000000000000000000005f82015250565b5f611a34600d83611201565b9150611a3f82611a00565b602082019050919050565b5f6020820190508181035f830152611a6181611a28565b9050919050565b7f70726963653d30000000000000000000000000000000000000000000000000005f82015250565b5f611a9c600783611201565b9150611aa782611a68565b602082019050919050565b5f6020820190508181035f830152611ac981611a90565b9050919050565b5f606082019050611ae35f8301866114f1565b611af06020830185611389565b611afd6040830184611389565b949350505050565b5f611b0f826112e5565b9150611b1a836112e5565b9250828201905080821115611b3257611b316115bf565b5b9291505056fea26469706673582212206d2e3883aea79d1b3d43c94261dc2971d8bdeaabcd6b8d337f55462889155bc664736f6c634300081e0033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH7 0x38D7EA4C68000 PUSH1 0x7 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLER PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x436172626F6E6F546F6B656E3230000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x43424F0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x437 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0xA7 SWAP2 SWAP1 PUSH2 0x437 JUMP JUMPDEST POP POP POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0x545 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x129 DUP2 PUSH2 0x137 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH2 0x55E JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x275 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x288 JUMPI PUSH2 0x287 PUSH2 0x231 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x2EA PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2AF JUMP JUMPDEST PUSH2 0x2F4 DUP7 DUP4 PUSH2 0x2AF JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x338 PUSH2 0x333 PUSH2 0x32E DUP5 PUSH2 0x30C JUMP JUMPDEST PUSH2 0x315 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x351 DUP4 PUSH2 0x31E JUMP JUMPDEST PUSH2 0x365 PUSH2 0x35D DUP3 PUSH2 0x33F JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2BB JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x37C PUSH2 0x36D JUMP JUMPDEST PUSH2 0x387 DUP2 DUP5 DUP5 PUSH2 0x348 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3AA JUMPI PUSH2 0x39F PUSH0 DUP3 PUSH2 0x374 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x38D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3EF JUMPI PUSH2 0x3C0 DUP2 PUSH2 0x28E JUMP JUMPDEST PUSH2 0x3C9 DUP5 PUSH2 0x2A0 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3D8 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3EC PUSH2 0x3E4 DUP6 PUSH2 0x2A0 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x38C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x40F PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3F4 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x427 DUP4 DUP4 PUSH2 0x400 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x440 DUP3 PUSH2 0x1FA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x459 JUMPI PUSH2 0x458 PUSH2 0x204 JUMP JUMPDEST JUMPDEST PUSH2 0x463 DUP3 SLOAD PUSH2 0x25E JUMP JUMPDEST PUSH2 0x46E DUP3 DUP3 DUP6 PUSH2 0x3AE JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x49F JUMPI PUSH0 DUP5 ISZERO PUSH2 0x48D JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x497 DUP6 DUP3 PUSH2 0x41C JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x4FE JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4AD DUP7 PUSH2 0x28E JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4AF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x4F1 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x4ED PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x400 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x52F DUP3 PUSH2 0x506 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x53F DUP2 PUSH2 0x525 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x558 PUSH0 DUP4 ADD DUP5 PUSH2 0x536 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B6E DUP1 PUSH2 0x56B PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF6 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x89 JUMPI DUP1 PUSH4 0xC1331061 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0xC1331061 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0xDBF09D66 EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x365 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3A1 JUMPI PUSH2 0x105 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x28B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2CB JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2F5 JUMPI PUSH2 0x105 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xC5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x707E422F EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x24F JUMPI PUSH2 0x105 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x199 JUMPI PUSH2 0x105 JUMP JUMPDEST CALLDATASIZE PUSH2 0x105 JUMPI PUSH2 0x103 PUSH2 0x3C9 JUMP JUMPDEST STOP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x114 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x4E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x154 SWAP2 SWAP1 PUSH2 0x1318 JUMP JUMPDEST PUSH2 0x579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x1370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x190 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x13B1 JUMP JUMPDEST PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CC SWAP2 SWAP1 PUSH2 0x1370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E0 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x1E9 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x225 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x1470 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x24D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH2 0x791 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x275 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x270 SWAP2 SWAP1 PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x296 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x861 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AC JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x2B5 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D6 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x2DF PUSH2 0x89C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EC SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x300 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x31B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x1318 JUMP JUMPDEST PUSH2 0x92C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x328 SWAP2 SWAP1 PUSH2 0x1370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x339 PUSH2 0x3C9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x346 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x34F PUSH2 0x94E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x35C SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x370 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x38B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x386 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH2 0x954 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x398 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x3C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C2 SWAP2 SWAP1 PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x9D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D1 PUSH2 0xA5A JUMP JUMPDEST PUSH0 CALLVALUE GT PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40A SWAP1 PUSH2 0x15A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x7 SLOAD PUSH2 0x41F PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0xA PUSH2 0x42B SWAP2 SWAP1 PUSH2 0x171B JUMP JUMPDEST CALLVALUE PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x1765 JUMP JUMPDEST PUSH2 0x440 SWAP2 SWAP1 PUSH2 0x17D3 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 GT PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x47B SWAP1 PUSH2 0x184D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x48E CALLER DUP3 PUSH2 0xAA0 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1226F1537B00D316270056DD247F05739EE0ACA67A32CDD8258B675B6F0658B0 CALLVALUE DUP4 PUSH1 0x40 MLOAD PUSH2 0x4D6 SWAP3 SWAP2 SWAP1 PUSH2 0x186B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x4E7 PUSH2 0xB1F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x4F8 SWAP1 PUSH2 0x18BF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x524 SWAP1 PUSH2 0x18BF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x56F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x546 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x552 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x583 PUSH2 0xB29 JUMP JUMPDEST SWAP1 POP PUSH2 0x590 DUP2 DUP6 DUP6 PUSH2 0xB30 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x5AE PUSH2 0xB29 JUMP JUMPDEST SWAP1 POP PUSH2 0x5BB DUP6 DUP3 DUP6 PUSH2 0xB42 JUMP JUMPDEST PUSH2 0x5C6 DUP6 DUP6 DUP6 PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x5E2 PUSH2 0xCC5 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x650 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x647 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SELFBALANCE SWAP1 POP PUSH0 DUP2 GT PUSH2 0x696 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68D SWAP1 PUSH2 0x19A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x6BB SWAP1 PUSH2 0x19EC JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x6F5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6FA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x73E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP1 PUSH2 0x1A4A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364 DUP4 PUSH1 0x40 MLOAD PUSH2 0x784 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x799 PUSH2 0xCC5 JUMP JUMPDEST PUSH0 DUP2 GT PUSH2 0x7DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D2 SWAP1 PUSH2 0x1AB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH32 0x66CBCA4F3C64FECF1DCB9CE094ABCF7F68C3450A1D4E3A8E917DD621EDB4EBE0 DUP2 PUSH1 0x40 MLOAD PUSH2 0x811 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x869 PUSH2 0xCC5 JUMP JUMPDEST PUSH2 0x872 PUSH0 PUSH2 0xD4C JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x8AB SWAP1 PUSH2 0x18BF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8D7 SWAP1 PUSH2 0x18BF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x922 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x922 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x905 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x936 PUSH2 0xB29 JUMP JUMPDEST SWAP1 POP PUSH2 0x943 DUP2 DUP6 DUP6 PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x9DE PUSH2 0xCC5 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA4E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA45 SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA57 DUP2 PUSH2 0xD4C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x6 SLOAD SUB PUSH2 0xA96 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB10 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB07 SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB1B PUSH0 DUP4 DUP4 PUSH2 0xE0F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB3D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1028 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB4D DUP5 DUP5 PUSH2 0x954 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 LT ISZERO PUSH2 0xBCF JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xBC0 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBCE DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1028 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC45 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3C SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCB5 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCAC SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC0 DUP4 DUP4 DUP4 PUSH2 0xE0F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xCCD PUSH2 0xB29 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xCEB PUSH2 0x874 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD4A JUMPI PUSH2 0xD0E PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD41 SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE5F JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xE53 SWAP2 SWAP1 PUSH2 0x1B05 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xF2D JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xEE8 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEDF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF74 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xFBE JUMP JUMPDEST DUP1 PUSH0 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x101B SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1098 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x108F SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1108 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10FF SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x11F1 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x11E8 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1239 DUP3 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x1243 DUP2 DUP6 PUSH2 0x1201 JUMP JUMPDEST SWAP4 POP PUSH2 0x1253 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1211 JUMP JUMPDEST PUSH2 0x125C DUP2 PUSH2 0x121F JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x127F DUP2 DUP5 PUSH2 0x122F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x12B4 DUP3 PUSH2 0x128B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12C4 DUP2 PUSH2 0x12AA JUMP JUMPDEST DUP2 EQ PUSH2 0x12CE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x12DF DUP2 PUSH2 0x12BB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12F7 DUP2 PUSH2 0x12E5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1301 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1312 DUP2 PUSH2 0x12EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x132E JUMPI PUSH2 0x132D PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x133B DUP6 DUP3 DUP7 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x134C DUP6 DUP3 DUP7 ADD PUSH2 0x1304 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x136A DUP2 PUSH2 0x1356 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1383 PUSH0 DUP4 ADD DUP5 PUSH2 0x1361 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1392 DUP2 PUSH2 0x12E5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x13AB PUSH0 DUP4 ADD DUP5 PUSH2 0x1389 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x13C8 JUMPI PUSH2 0x13C7 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x13D5 DUP7 DUP3 DUP8 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x13E6 DUP7 DUP3 DUP8 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x13F7 DUP7 DUP3 DUP8 ADD PUSH2 0x1304 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1416 DUP2 PUSH2 0x1401 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x142F PUSH0 DUP4 ADD DUP5 PUSH2 0x140D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x143F DUP3 PUSH2 0x128B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x144F DUP2 PUSH2 0x1435 JUMP JUMPDEST DUP2 EQ PUSH2 0x1459 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x146A DUP2 PUSH2 0x1446 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1485 JUMPI PUSH2 0x1484 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1492 DUP5 DUP3 DUP6 ADD PUSH2 0x145C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14B0 JUMPI PUSH2 0x14AF PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x14BD DUP5 DUP3 DUP6 ADD PUSH2 0x1304 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14DB JUMPI PUSH2 0x14DA PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x14E8 DUP5 DUP3 DUP6 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x14FA DUP2 PUSH2 0x12AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1513 PUSH0 DUP4 ADD DUP5 PUSH2 0x14F1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x152F JUMPI PUSH2 0x152E PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x153C DUP6 DUP3 DUP7 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x154D DUP6 DUP3 DUP7 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F204554480000000000000000000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x158B PUSH1 0x6 DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1596 DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x15B8 DUP2 PUSH2 0x157F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x1641 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x161D JUMPI PUSH2 0x161C PUSH2 0x15BF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x162C JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x163A DUP6 PUSH2 0x15EC JUMP JUMPDEST SWAP5 POP PUSH2 0x1601 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1659 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1714 JUMP JUMPDEST DUP2 PUSH2 0x1666 JUMPI PUSH0 SWAP1 POP PUSH2 0x1714 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x167C JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1686 JUMPI PUSH2 0x16B5 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1714 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1698 JUMPI PUSH2 0x1697 PUSH2 0x15BF JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x16AF JUMPI PUSH2 0x16AE PUSH2 0x15BF JUMP JUMPDEST JUMPDEST POP PUSH2 0x1714 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x16EA JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x16E5 JUMPI PUSH2 0x16E4 PUSH2 0x15BF JUMP JUMPDEST JUMPDEST PUSH2 0x1714 JUMP JUMPDEST PUSH2 0x16F7 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x15F8 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x170E JUMPI PUSH2 0x170D PUSH2 0x15BF JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1725 DUP3 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1730 DUP4 PUSH2 0x1401 JUMP JUMPDEST SWAP3 POP PUSH2 0x175D PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x164A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x176F DUP3 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x177A DUP4 PUSH2 0x12E5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x1788 DUP2 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x179F JUMPI PUSH2 0x179E PUSH2 0x15BF JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x17DD DUP3 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x17E8 DUP4 PUSH2 0x12E5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x17F8 JUMPI PUSH2 0x17F7 PUSH2 0x17A6 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x746F6F206C6974746C6520455448000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1837 PUSH1 0xE DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1842 DUP3 PUSH2 0x1803 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1864 DUP2 PUSH2 0x182B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x187E PUSH0 DUP4 ADD DUP6 PUSH2 0x1389 JUMP JUMPDEST PUSH2 0x188B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1389 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x18D6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x18E9 JUMPI PUSH2 0x18E8 PUSH2 0x1892 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x746F3D3000000000000000000000000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1923 PUSH1 0x4 DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x192E DUP3 PUSH2 0x18EF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1950 DUP2 PUSH2 0x1917 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x656D707479000000000000000000000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x198B PUSH1 0x5 DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1996 DUP3 PUSH2 0x1957 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x19B8 DUP2 PUSH2 0x197F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0x19D7 PUSH0 DUP4 PUSH2 0x19BF JUMP JUMPDEST SWAP2 POP PUSH2 0x19E2 DUP3 PUSH2 0x19C9 JUMP JUMPDEST PUSH0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x19F6 DUP3 PUSH2 0x19CC JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x7769746864726177206661696C00000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1A34 PUSH1 0xD DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A3F DUP3 PUSH2 0x1A00 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1A61 DUP2 PUSH2 0x1A28 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x70726963653D3000000000000000000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1A9C PUSH1 0x7 DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AA7 DUP3 PUSH2 0x1A68 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1AC9 DUP2 PUSH2 0x1A90 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1AE3 PUSH0 DUP4 ADD DUP7 PUSH2 0x14F1 JUMP JUMPDEST PUSH2 0x1AF0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1389 JUMP JUMPDEST PUSH2 0x1AFD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1389 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1B0F DUP3 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B1A DUP4 PUSH2 0x12E5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B32 JUMPI PUSH2 0x1B31 PUSH2 0x15BF JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x2E3883AEA79D1B3D43C94261DC29 PUSH18 0xD8BDEAABCD6B8D337F55462889155BC66473 PUSH16 0x6C634300081E00330000000000000000 ",
		"sourceMap": "764:1537:7:-:0;;;915:4;881:38;;1117:67;;;;;;;;;;1170:10;1582:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1656:5;1648;:13;;;;;;:::i;:::-;;1681:7;1671;:17;;;;;;:::i;:::-;;1582:113;;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;1857:1:6;2061:7;:21;;;;764:1537:7;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;7:99:8:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2287:1;2280:8;;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;5234:126::-;5271:7;5311:42;5304:5;5300:54;5289:65;;5234:126;;;:::o;5366:96::-;5403:7;5432:24;5450:5;5432:24;:::i;:::-;5421:35;;5366:96;;;:::o;5468:118::-;5555:24;5573:5;5555:24;:::i;:::-;5550:3;5543:37;5468:118;;:::o;5592:222::-;5685:4;5723:2;5712:9;5708:18;5700:26;;5736:71;5804:1;5793:9;5789:17;5780:6;5736:71;:::i;:::-;5592:222;;;;:::o;764:1537:7:-;;;;;;;"
	},
	"abi": [
		{
			"inputs": [],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "allowance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientAllowance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "balance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientBalance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSpender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "OwnableInvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "OwnableUnauthorizedAccount",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ReentrancyGuardReentrantCall",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "buyer",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "ethIn",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "tokensOut",
					"type": "uint256"
				}
			],
			"name": "CarbonoToken20Purchased",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "newPrice",
					"type": "uint256"
				}
			],
			"name": "PriceUpdated",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "Withdraw",
			"type": "event"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "allowance",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "buyCarbonoToken20",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "decimals",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "priceWeiPerToken",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "newPrice",
					"type": "uint256"
				}
			],
			"name": "setPriceWeiPerToken",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address payable",
					"name": "to",
					"type": "address"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"stateMutability": "payable",
			"type": "receive"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 307,
				"contract": "contracts/carbono.sol:CarbonoToken20",
				"label": "_balances",
				"offset": 0,
				"slot": "0",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 313,
				"contract": "contracts/carbono.sol:CarbonoToken20",
				"label": "_allowances",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 315,
				"contract": "contracts/carbono.sol:CarbonoToken20",
				"label": "_totalSupply",
				"offset": 0,
				"slot": "2",
				"type": "t_uint256"
			},
			{
				"astId": 317,
				"contract": "contracts/carbono.sol:CarbonoToken20",
				"label": "_name",
				"offset": 0,
				"slot": "3",
				"type": "t_string_storage"
			},
			{
				"astId": 319,
				"contract": "contracts/carbono.sol:CarbonoToken20",
				"label": "_symbol",
				"offset": 0,
				"slot": "4",
				"type": "t_string_storage"
			},
			{
				"astId": 8,
				"contract": "contracts/carbono.sol:CarbonoToken20",
				"label": "_owner",
				"offset": 0,
				"slot": "5",
				"type": "t_address"
			},
			{
				"astId": 944,
				"contract": "contracts/carbono.sol:CarbonoToken20",
				"label": "_status",
				"offset": 0,
				"slot": "6",
				"type": "t_uint256"
			},
			{
				"astId": 1020,
				"contract": "contracts/carbono.sol:CarbonoToken20",
				"label": "priceWeiPerToken",
				"offset": 0,
				"slot": "7",
				"type": "t_uint256"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => uint256))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_uint256)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var carbonotoken20Contract = new web3.eth.Contract([{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"CarbonoToken20Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCarbonoToken20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceWeiPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceWeiPerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]);\nvar carbonotoken20 = carbonotoken20Contract.deploy({\n     data: '0x608060405266038d7ea4c6800060075534801561001a575f5ffd5b50336040518060400160405280600e81526020017f436172626f6e6f546f6b656e32300000000000000000000000000000000000008152506040518060400160405280600381526020017f43424f000000000000000000000000000000000000000000000000000000000081525081600390816100979190610437565b5080600490816100a79190610437565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361011a575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101119190610545565b60405180910390fd5b6101298161013760201b60201c565b50600160068190555061055e565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061027557607f821691505b60208210810361028857610287610231565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026102ea7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102af565b6102f486836102af565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61033861033361032e8461030c565b610315565b61030c565b9050919050565b5f819050919050565b6103518361031e565b61036561035d8261033f565b8484546102bb565b825550505050565b5f5f905090565b61037c61036d565b610387818484610348565b505050565b5b818110156103aa5761039f5f82610374565b60018101905061038d565b5050565b601f8211156103ef576103c08161028e565b6103c9846102a0565b810160208510156103d8578190505b6103ec6103e4856102a0565b83018261038c565b50505b505050565b5f82821c905092915050565b5f61040f5f19846008026103f4565b1980831691505092915050565b5f6104278383610400565b9150826002028217905092915050565b610440826101fa565b67ffffffffffffffff81111561045957610458610204565b5b610463825461025e565b61046e8282856103ae565b5f60209050601f83116001811461049f575f841561048d578287015190505b610497858261041c565b8655506104fe565b601f1984166104ad8661028e565b5f5b828110156104d4578489015182556001820191506020850194506020810190506104af565b868310156104f157848901516104ed601f891682610400565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61052f82610506565b9050919050565b61053f81610525565b82525050565b5f6020820190506105585f830184610536565b92915050565b611b6e8061056b5f395ff3fe6080604052600436106100f6575f3560e01c8063715018a611610089578063c133106111610058578063c133106114610331578063dbf09d661461033b578063dd62ed3e14610365578063f2fde38b146103a157610105565b8063715018a61461028b5780638da5cb5b146102a157806395d89b41146102cb578063a9059cbb146102f557610105565b8063313ce567116100c5578063313ce567146101d557806351cff8d9146101ff578063707e422f1461022757806370a082311461024f57610105565b806306fdde0314610109578063095ea7b31461013357806318160ddd1461016f57806323b872dd1461019957610105565b36610105576101036103c9565b005b5f5ffd5b348015610114575f5ffd5b5061011d6104e9565b60405161012a9190611267565b60405180910390f35b34801561013e575f5ffd5b5061015960048036038101906101549190611318565b610579565b6040516101669190611370565b60405180910390f35b34801561017a575f5ffd5b5061018361059b565b6040516101909190611398565b60405180910390f35b3480156101a4575f5ffd5b506101bf60048036038101906101ba91906113b1565b6105a4565b6040516101cc9190611370565b60405180910390f35b3480156101e0575f5ffd5b506101e96105d2565b6040516101f6919061141c565b60405180910390f35b34801561020a575f5ffd5b5061022560048036038101906102209190611470565b6105da565b005b348015610232575f5ffd5b5061024d6004803603810190610248919061149b565b610791565b005b34801561025a575f5ffd5b50610275600480360381019061027091906114c6565b61081c565b6040516102829190611398565b60405180910390f35b348015610296575f5ffd5b5061029f610861565b005b3480156102ac575f5ffd5b506102b5610874565b6040516102c29190611500565b60405180910390f35b3480156102d6575f5ffd5b506102df61089c565b6040516102ec9190611267565b60405180910390f35b348015610300575f5ffd5b5061031b60048036038101906103169190611318565b61092c565b6040516103289190611370565b60405180910390f35b6103396103c9565b005b348015610346575f5ffd5b5061034f61094e565b60405161035c9190611398565b60405180910390f35b348015610370575f5ffd5b5061038b60048036038101906103869190611519565b610954565b6040516103989190611398565b60405180910390f35b3480156103ac575f5ffd5b506103c760048036038101906103c291906114c6565b6109d6565b005b6103d1610a5a565b5f3411610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040a906115a1565b60405180910390fd5b5f60075461041f6105d2565b600a61042b919061171b565b346104369190611765565b61044091906117d3565b90505f8111610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b9061184d565b60405180910390fd5b61048e3382610aa0565b3373ffffffffffffffffffffffffffffffffffffffff167f1226f1537b00d316270056dd247f05739ee0aca67a32cdd8258b675b6f0658b034836040516104d692919061186b565b60405180910390a2506104e7610b1f565b565b6060600380546104f8906118bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610524906118bf565b801561056f5780601f106105465761010080835404028352916020019161056f565b820191905f5260205f20905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b5f5f610583610b29565b9050610590818585610b30565b600191505092915050565b5f600254905090565b5f5f6105ae610b29565b90506105bb858285610b42565b6105c6858585610bd5565b60019150509392505050565b5f6012905090565b6105e2610cc5565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064790611939565b60405180910390fd5b5f4790505f8111610696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068d906119a1565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff16826040516106bb906119ec565b5f6040518083038185875af1925050503d805f81146106f5576040519150601f19603f3d011682016040523d82523d5f602084013e6106fa565b606091505b505090508061073e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073590611a4a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040516107849190611398565b60405180910390a2505050565b610799610cc5565b5f81116107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d290611ab2565b60405180910390fd5b806007819055507f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe0816040516108119190611398565b60405180910390a150565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610869610cc5565b6108725f610d4c565b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546108ab906118bf565b80601f01602080910402602001604051908101604052809291908181526020018280546108d7906118bf565b80156109225780601f106108f957610100808354040283529160200191610922565b820191905f5260205f20905b81548152906001019060200180831161090557829003601f168201915b5050505050905090565b5f5f610936610b29565b9050610943818585610bd5565b600191505092915050565b60075481565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6109de610cc5565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a4e575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610a459190611500565b60405180910390fd5b610a5781610d4c565b50565b600260065403610a96576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b10575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610b079190611500565b60405180910390fd5b610b1b5f8383610e0f565b5050565b6001600681905550565b5f33905090565b610b3d8383836001611028565b505050565b5f610b4d8484610954565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610bcf5781811015610bc0578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610bb793929190611ad0565b60405180910390fd5b610bce84848484035f611028565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c45575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610c3c9190611500565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cb5575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610cac9190611500565b60405180910390fd5b610cc0838383610e0f565b505050565b610ccd610b29565b73ffffffffffffffffffffffffffffffffffffffff16610ceb610874565b73ffffffffffffffffffffffffffffffffffffffff1614610d4a57610d0e610b29565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d419190611500565b60405180910390fd5b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e5f578060025f828254610e539190611b05565b92505081905550610f2d565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610ee8578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610edf93929190611ad0565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f74578060025f8282540392505081905550610fbe565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161101b9190611398565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611098575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161108f9190611500565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611108575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016110ff9190611500565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156111f1578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516111e89190611398565b60405180910390a35b50505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611239826111f7565b6112438185611201565b9350611253818560208601611211565b61125c8161121f565b840191505092915050565b5f6020820190508181035f83015261127f818461122f565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6112b48261128b565b9050919050565b6112c4816112aa565b81146112ce575f5ffd5b50565b5f813590506112df816112bb565b92915050565b5f819050919050565b6112f7816112e5565b8114611301575f5ffd5b50565b5f81359050611312816112ee565b92915050565b5f5f6040838503121561132e5761132d611287565b5b5f61133b858286016112d1565b925050602061134c85828601611304565b9150509250929050565b5f8115159050919050565b61136a81611356565b82525050565b5f6020820190506113835f830184611361565b92915050565b611392816112e5565b82525050565b5f6020820190506113ab5f830184611389565b92915050565b5f5f5f606084860312156113c8576113c7611287565b5b5f6113d5868287016112d1565b93505060206113e6868287016112d1565b92505060406113f786828701611304565b9150509250925092565b5f60ff82169050919050565b61141681611401565b82525050565b5f60208201905061142f5f83018461140d565b92915050565b5f61143f8261128b565b9050919050565b61144f81611435565b8114611459575f5ffd5b50565b5f8135905061146a81611446565b92915050565b5f6020828403121561148557611484611287565b5b5f6114928482850161145c565b91505092915050565b5f602082840312156114b0576114af611287565b5b5f6114bd84828501611304565b91505092915050565b5f602082840312156114db576114da611287565b5b5f6114e8848285016112d1565b91505092915050565b6114fa816112aa565b82525050565b5f6020820190506115135f8301846114f1565b92915050565b5f5f6040838503121561152f5761152e611287565b5b5f61153c858286016112d1565b925050602061154d858286016112d1565b9150509250929050565b7f6e6f2045544800000000000000000000000000000000000000000000000000005f82015250565b5f61158b600683611201565b915061159682611557565b602082019050919050565b5f6020820190508181035f8301526115b88161157f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f5f8291508390505b60018511156116415780860481111561161d5761161c6115bf565b5b600185161561162c5780820291505b808102905061163a856115ec565b9450611601565b94509492505050565b5f826116595760019050611714565b81611666575f9050611714565b816001811461167c5760028114611686576116b5565b6001915050611714565b60ff841115611698576116976115bf565b5b8360020a9150848211156116af576116ae6115bf565b5b50611714565b5060208310610133831016604e8410600b84101617156116ea5782820a9050838111156116e5576116e46115bf565b5b611714565b6116f784848460016115f8565b9250905081840481111561170e5761170d6115bf565b5b81810290505b9392505050565b5f611725826112e5565b915061173083611401565b925061175d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461164a565b905092915050565b5f61176f826112e5565b915061177a836112e5565b9250828202611788816112e5565b9150828204841483151761179f5761179e6115bf565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6117dd826112e5565b91506117e8836112e5565b9250826117f8576117f76117a6565b5b828204905092915050565b7f746f6f206c6974746c65204554480000000000000000000000000000000000005f82015250565b5f611837600e83611201565b915061184282611803565b602082019050919050565b5f6020820190508181035f8301526118648161182b565b9050919050565b5f60408201905061187e5f830185611389565b61188b6020830184611389565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806118d657607f821691505b6020821081036118e9576118e8611892565b5b50919050565b7f746f3d30000000000000000000000000000000000000000000000000000000005f82015250565b5f611923600483611201565b915061192e826118ef565b602082019050919050565b5f6020820190508181035f83015261195081611917565b9050919050565b7f656d7074790000000000000000000000000000000000000000000000000000005f82015250565b5f61198b600583611201565b915061199682611957565b602082019050919050565b5f6020820190508181035f8301526119b88161197f565b9050919050565b5f81905092915050565b50565b5f6119d75f836119bf565b91506119e2826119c9565b5f82019050919050565b5f6119f6826119cc565b9150819050919050565b7f7769746864726177206661696c000000000000000000000000000000000000005f82015250565b5f611a34600d83611201565b9150611a3f82611a00565b602082019050919050565b5f6020820190508181035f830152611a6181611a28565b9050919050565b7f70726963653d30000000000000000000000000000000000000000000000000005f82015250565b5f611a9c600783611201565b9150611aa782611a68565b602082019050919050565b5f6020820190508181035f830152611ac981611a90565b9050919050565b5f606082019050611ae35f8301866114f1565b611af06020830185611389565b611afd6040830184611389565b949350505050565b5f611b0f826112e5565b9150611b1a836112e5565b9250828201905080821115611b3257611b316115bf565b5b9291505056fea26469706673582212206d2e3883aea79d1b3d43c94261dc2971d8bdeaabcd6b8d337f55462889155bc664736f6c634300081e0033', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"c1331061": "buyCarbonoToken20()",
		"313ce567": "decimals()",
		"06fdde03": "name()",
		"8da5cb5b": "owner()",
		"dbf09d66": "priceWeiPerToken()",
		"715018a6": "renounceOwnership()",
		"707e422f": "setPriceWeiPerToken(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"f2fde38b": "transferOwnership(address)",
		"51cff8d9": "withdraw(address)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "1404400",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"allowance(address,address)": "infinite",
			"approve(address,uint256)": "infinite",
			"balanceOf(address)": "2917",
			"buyCarbonoToken20()": "infinite",
			"decimals()": "361",
			"name()": "infinite",
			"owner()": "2560",
			"priceWeiPerToken()": "2469",
			"renounceOwnership()": "infinite",
			"setPriceWeiPerToken(uint256)": "infinite",
			"symbol()": "infinite",
			"totalSupply()": "2500",
			"transfer(address,uint256)": "infinite",
			"transferFrom(address,address,uint256)": "infinite",
			"transferOwnership(address)": "infinite",
			"withdraw(address)": "infinite"
		}
	},
	"devdoc": {
		"errors": {
			"ERC20InsufficientAllowance(address,uint256,uint256)": [
				{
					"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
					"params": {
						"allowance": "Amount of tokens a `spender` is allowed to operate with.",
						"needed": "Minimum amount required to perform a transfer.",
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC20InsufficientBalance(address,uint256,uint256)": [
				{
					"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
					"params": {
						"balance": "Current balance for the interacting account.",
						"needed": "Minimum amount required to perform a transfer.",
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC20InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSpender(address)": [
				{
					"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
					"params": {
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"OwnableInvalidOwner(address)": [
				{
					"details": "The owner is not a valid owner account. (eg. `address(0)`)"
				}
			],
			"OwnableUnauthorizedAccount(address)": [
				{
					"details": "The caller account is not authorized to perform an operation."
				}
			],
			"ReentrancyGuardReentrantCall()": [
				{
					"details": "Unauthorized reentrant call."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
			}
		},
		"kind": "dev",
		"methods": {
			"allowance(address,address)": {
				"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
			},
			"approve(address,uint256)": {
				"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
			},
			"balanceOf(address)": {
				"details": "Returns the value of tokens owned by `account`."
			},
			"decimals()": {
				"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
			},
			"name()": {
				"details": "Returns the name of the token."
			},
			"owner()": {
				"details": "Returns the address of the current owner."
			},
			"renounceOwnership()": {
				"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
			},
			"symbol()": {
				"details": "Returns the symbol of the token, usually a shorter version of the name."
			},
			"totalSupply()": {
				"details": "Returns the value of tokens in existence."
			},
			"transfer(address,uint256)": {
				"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
			},
			"transferFrom(address,address,uint256)": {
				"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
			},
			"transferOwnership(address)": {
				"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		"title": "CarbonoToken20 (CBO)",
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {
			"buyCarbonoToken20()": {
				"notice": "Comprar CBO enviando ETH"
			},
			"setPriceWeiPerToken(uint256)": {
				"notice": "Cambiar el precio (wei por 1 CBO)"
			},
			"withdraw(address)": {
				"notice": "Retirar el ETH recaudado"
			}
		},
		"notice": "ERC-20 comprable con ETH (buyCarbonoToken20). Precio por defecto: 0.001 ETH por 1 CBO.   - priceWeiPerToken (wei por token, 18 decimales)   - setPriceWeiPerToken(): cambia el precio (solo owner)   - buyCarbonoToken20(): payable, acuña CBO proporcional a msg.value   - withdraw(): retira el ETH acumulado (solo owner) tokensOut = (msg.value * 1e18) / priceWeiPerToken",
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@_1185": {
				"entryPoint": null,
				"id": 1185,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_approve_690": {
				"entryPoint": 2864,
				"id": 690,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_750": {
				"entryPoint": 4136,
				"id": 750,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_checkOwner_84": {
				"entryPoint": 3269,
				"id": 84,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_mint_639": {
				"entryPoint": 2720,
				"id": 639,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_msgSender_915": {
				"entryPoint": 2857,
				"id": 915,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_nonReentrantAfter_990": {
				"entryPoint": 2847,
				"id": 990,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_nonReentrantBefore_982": {
				"entryPoint": 2650,
				"id": 982,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_spendAllowance_798": {
				"entryPoint": 2882,
				"id": 798,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_transferOwnership_146": {
				"entryPoint": 3404,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_transfer_529": {
				"entryPoint": 3029,
				"id": 529,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_606": {
				"entryPoint": 3599,
				"id": 606,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@allowance_426": {
				"entryPoint": 2388,
				"id": 426,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@approve_450": {
				"entryPoint": 1401,
				"id": 450,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@balanceOf_385": {
				"entryPoint": 2076,
				"id": 385,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@buyCarbonoToken20_1100": {
				"entryPoint": 969,
				"id": 1100,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@decimals_363": {
				"entryPoint": 1490,
				"id": 363,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@name_345": {
				"entryPoint": 1257,
				"id": 345,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@owner_67": {
				"entryPoint": 2164,
				"id": 67,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@priceWeiPerToken_1020": {
				"entryPoint": 2382,
				"id": 1020,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@renounceOwnership_98": {
				"entryPoint": 2145,
				"id": 98,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@setPriceWeiPerToken_1124": {
				"entryPoint": 1937,
				"id": 1124,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@symbol_354": {
				"entryPoint": 2204,
				"id": 354,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@totalSupply_372": {
				"entryPoint": 1435,
				"id": 372,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@transferFrom_482": {
				"entryPoint": 1444,
				"id": 482,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@transferOwnership_126": {
				"entryPoint": 2518,
				"id": 126,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@transfer_409": {
				"entryPoint": 2348,
				"id": 409,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@withdraw_1177": {
				"entryPoint": 1498,
				"id": 1177,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"abi_decode_t_address": {
				"entryPoint": 4817,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_address_payable": {
				"entryPoint": 5212,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256": {
				"entryPoint": 4868,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 5318,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address_payable": {
				"entryPoint": 5232,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 5401,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 5041,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 4888,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_uint256": {
				"entryPoint": 5275,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 5361,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_bool_to_t_bool_fromStack": {
				"entryPoint": 4961,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4655,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 5503,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6696,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6800,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6187,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6423,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6527,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 6604,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 5001,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_uint8_to_t_uint8_fromStack": {
				"entryPoint": 5133,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 6636,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 5376,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": 6864,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": 4976,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4711,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 5537,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6730,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6834,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6221,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6457,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6561,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 5016,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": 6251,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
				"entryPoint": 5148,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 4599,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 6591,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 4609,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 6917,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_div_t_uint256": {
				"entryPoint": 6099,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_helper": {
				"entryPoint": 5624,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 2
			},
			"checked_exp_t_uint256_t_uint8": {
				"entryPoint": 5915,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_unsigned": {
				"entryPoint": 5706,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"checked_mul_t_uint256": {
				"entryPoint": 5989,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 4778,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_address_payable": {
				"entryPoint": 5173,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bool": {
				"entryPoint": 4950,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 4747,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 4837,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint8": {
				"entryPoint": 5121,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_memory_to_memory_with_cleanup": {
				"entryPoint": 4625,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 6335,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 5567,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x12": {
				"entryPoint": 6054,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x22": {
				"entryPoint": 6290,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 4743,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"round_up_to_mul_of_32": {
				"entryPoint": 4639,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"shift_right_1_unsigned": {
				"entryPoint": 5612,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"store_literal_in_memory_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672": {
				"entryPoint": 5463,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763": {
				"entryPoint": 6656,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882": {
				"entryPoint": 6760,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6": {
				"entryPoint": 6147,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15": {
				"entryPoint": 6383,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80": {
				"entryPoint": 6487,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
				"entryPoint": 6601,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 4795,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_address_payable": {
				"entryPoint": 5190,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 4846,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:18638:8",
					"nodeType": "YulBlock",
					"src": "0:18638:8",
					"statements": [
						{
							"body": {
								"nativeSrc": "66:40:8",
								"nodeType": "YulBlock",
								"src": "66:40:8",
								"statements": [
									{
										"nativeSrc": "77:22:8",
										"nodeType": "YulAssignment",
										"src": "77:22:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "93:5:8",
													"nodeType": "YulIdentifier",
													"src": "93:5:8"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "87:5:8",
												"nodeType": "YulIdentifier",
												"src": "87:5:8"
											},
											"nativeSrc": "87:12:8",
											"nodeType": "YulFunctionCall",
											"src": "87:12:8"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "77:6:8",
												"nodeType": "YulIdentifier",
												"src": "77:6:8"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nativeSrc": "7:99:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "49:5:8",
									"nodeType": "YulTypedName",
									"src": "49:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "59:6:8",
									"nodeType": "YulTypedName",
									"src": "59:6:8",
									"type": ""
								}
							],
							"src": "7:99:8"
						},
						{
							"body": {
								"nativeSrc": "208:73:8",
								"nodeType": "YulBlock",
								"src": "208:73:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "225:3:8",
													"nodeType": "YulIdentifier",
													"src": "225:3:8"
												},
												{
													"name": "length",
													"nativeSrc": "230:6:8",
													"nodeType": "YulIdentifier",
													"src": "230:6:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "218:6:8",
												"nodeType": "YulIdentifier",
												"src": "218:6:8"
											},
											"nativeSrc": "218:19:8",
											"nodeType": "YulFunctionCall",
											"src": "218:19:8"
										},
										"nativeSrc": "218:19:8",
										"nodeType": "YulExpressionStatement",
										"src": "218:19:8"
									},
									{
										"nativeSrc": "246:29:8",
										"nodeType": "YulAssignment",
										"src": "246:29:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "265:3:8",
													"nodeType": "YulIdentifier",
													"src": "265:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "270:4:8",
													"nodeType": "YulLiteral",
													"src": "270:4:8",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "261:3:8",
												"nodeType": "YulIdentifier",
												"src": "261:3:8"
											},
											"nativeSrc": "261:14:8",
											"nodeType": "YulFunctionCall",
											"src": "261:14:8"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "246:11:8",
												"nodeType": "YulIdentifier",
												"src": "246:11:8"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nativeSrc": "112:169:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "180:3:8",
									"nodeType": "YulTypedName",
									"src": "180:3:8",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "185:6:8",
									"nodeType": "YulTypedName",
									"src": "185:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "196:11:8",
									"nodeType": "YulTypedName",
									"src": "196:11:8",
									"type": ""
								}
							],
							"src": "112:169:8"
						},
						{
							"body": {
								"nativeSrc": "349:77:8",
								"nodeType": "YulBlock",
								"src": "349:77:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "dst",
													"nativeSrc": "366:3:8",
													"nodeType": "YulIdentifier",
													"src": "366:3:8"
												},
												{
													"name": "src",
													"nativeSrc": "371:3:8",
													"nodeType": "YulIdentifier",
													"src": "371:3:8"
												},
												{
													"name": "length",
													"nativeSrc": "376:6:8",
													"nodeType": "YulIdentifier",
													"src": "376:6:8"
												}
											],
											"functionName": {
												"name": "mcopy",
												"nativeSrc": "360:5:8",
												"nodeType": "YulIdentifier",
												"src": "360:5:8"
											},
											"nativeSrc": "360:23:8",
											"nodeType": "YulFunctionCall",
											"src": "360:23:8"
										},
										"nativeSrc": "360:23:8",
										"nodeType": "YulExpressionStatement",
										"src": "360:23:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nativeSrc": "403:3:8",
															"nodeType": "YulIdentifier",
															"src": "403:3:8"
														},
														{
															"name": "length",
															"nativeSrc": "408:6:8",
															"nodeType": "YulIdentifier",
															"src": "408:6:8"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "399:3:8",
														"nodeType": "YulIdentifier",
														"src": "399:3:8"
													},
													"nativeSrc": "399:16:8",
													"nodeType": "YulFunctionCall",
													"src": "399:16:8"
												},
												{
													"kind": "number",
													"nativeSrc": "417:1:8",
													"nodeType": "YulLiteral",
													"src": "417:1:8",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "392:6:8",
												"nodeType": "YulIdentifier",
												"src": "392:6:8"
											},
											"nativeSrc": "392:27:8",
											"nodeType": "YulFunctionCall",
											"src": "392:27:8"
										},
										"nativeSrc": "392:27:8",
										"nodeType": "YulExpressionStatement",
										"src": "392:27:8"
									}
								]
							},
							"name": "copy_memory_to_memory_with_cleanup",
							"nativeSrc": "287:139:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nativeSrc": "331:3:8",
									"nodeType": "YulTypedName",
									"src": "331:3:8",
									"type": ""
								},
								{
									"name": "dst",
									"nativeSrc": "336:3:8",
									"nodeType": "YulTypedName",
									"src": "336:3:8",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "341:6:8",
									"nodeType": "YulTypedName",
									"src": "341:6:8",
									"type": ""
								}
							],
							"src": "287:139:8"
						},
						{
							"body": {
								"nativeSrc": "480:54:8",
								"nodeType": "YulBlock",
								"src": "480:54:8",
								"statements": [
									{
										"nativeSrc": "490:38:8",
										"nodeType": "YulAssignment",
										"src": "490:38:8",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "508:5:8",
															"nodeType": "YulIdentifier",
															"src": "508:5:8"
														},
														{
															"kind": "number",
															"nativeSrc": "515:2:8",
															"nodeType": "YulLiteral",
															"src": "515:2:8",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "504:3:8",
														"nodeType": "YulIdentifier",
														"src": "504:3:8"
													},
													"nativeSrc": "504:14:8",
													"nodeType": "YulFunctionCall",
													"src": "504:14:8"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "524:2:8",
															"nodeType": "YulLiteral",
															"src": "524:2:8",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nativeSrc": "520:3:8",
														"nodeType": "YulIdentifier",
														"src": "520:3:8"
													},
													"nativeSrc": "520:7:8",
													"nodeType": "YulFunctionCall",
													"src": "520:7:8"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "500:3:8",
												"nodeType": "YulIdentifier",
												"src": "500:3:8"
											},
											"nativeSrc": "500:28:8",
											"nodeType": "YulFunctionCall",
											"src": "500:28:8"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "490:6:8",
												"nodeType": "YulIdentifier",
												"src": "490:6:8"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nativeSrc": "432:102:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "463:5:8",
									"nodeType": "YulTypedName",
									"src": "463:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "473:6:8",
									"nodeType": "YulTypedName",
									"src": "473:6:8",
									"type": ""
								}
							],
							"src": "432:102:8"
						},
						{
							"body": {
								"nativeSrc": "632:285:8",
								"nodeType": "YulBlock",
								"src": "632:285:8",
								"statements": [
									{
										"nativeSrc": "642:53:8",
										"nodeType": "YulVariableDeclaration",
										"src": "642:53:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "689:5:8",
													"nodeType": "YulIdentifier",
													"src": "689:5:8"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "656:32:8",
												"nodeType": "YulIdentifier",
												"src": "656:32:8"
											},
											"nativeSrc": "656:39:8",
											"nodeType": "YulFunctionCall",
											"src": "656:39:8"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "646:6:8",
												"nodeType": "YulTypedName",
												"src": "646:6:8",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "704:78:8",
										"nodeType": "YulAssignment",
										"src": "704:78:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "770:3:8",
													"nodeType": "YulIdentifier",
													"src": "770:3:8"
												},
												{
													"name": "length",
													"nativeSrc": "775:6:8",
													"nodeType": "YulIdentifier",
													"src": "775:6:8"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "711:58:8",
												"nodeType": "YulIdentifier",
												"src": "711:58:8"
											},
											"nativeSrc": "711:71:8",
											"nodeType": "YulFunctionCall",
											"src": "711:71:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "704:3:8",
												"nodeType": "YulIdentifier",
												"src": "704:3:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "830:5:8",
															"nodeType": "YulIdentifier",
															"src": "830:5:8"
														},
														{
															"kind": "number",
															"nativeSrc": "837:4:8",
															"nodeType": "YulLiteral",
															"src": "837:4:8",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "826:3:8",
														"nodeType": "YulIdentifier",
														"src": "826:3:8"
													},
													"nativeSrc": "826:16:8",
													"nodeType": "YulFunctionCall",
													"src": "826:16:8"
												},
												{
													"name": "pos",
													"nativeSrc": "844:3:8",
													"nodeType": "YulIdentifier",
													"src": "844:3:8"
												},
												{
													"name": "length",
													"nativeSrc": "849:6:8",
													"nodeType": "YulIdentifier",
													"src": "849:6:8"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "791:34:8",
												"nodeType": "YulIdentifier",
												"src": "791:34:8"
											},
											"nativeSrc": "791:65:8",
											"nodeType": "YulFunctionCall",
											"src": "791:65:8"
										},
										"nativeSrc": "791:65:8",
										"nodeType": "YulExpressionStatement",
										"src": "791:65:8"
									},
									{
										"nativeSrc": "865:46:8",
										"nodeType": "YulAssignment",
										"src": "865:46:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "876:3:8",
													"nodeType": "YulIdentifier",
													"src": "876:3:8"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "903:6:8",
															"nodeType": "YulIdentifier",
															"src": "903:6:8"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nativeSrc": "881:21:8",
														"nodeType": "YulIdentifier",
														"src": "881:21:8"
													},
													"nativeSrc": "881:29:8",
													"nodeType": "YulFunctionCall",
													"src": "881:29:8"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "872:3:8",
												"nodeType": "YulIdentifier",
												"src": "872:3:8"
											},
											"nativeSrc": "872:39:8",
											"nodeType": "YulFunctionCall",
											"src": "872:39:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "865:3:8",
												"nodeType": "YulIdentifier",
												"src": "865:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "540:377:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "613:5:8",
									"nodeType": "YulTypedName",
									"src": "613:5:8",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "620:3:8",
									"nodeType": "YulTypedName",
									"src": "620:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "628:3:8",
									"nodeType": "YulTypedName",
									"src": "628:3:8",
									"type": ""
								}
							],
							"src": "540:377:8"
						},
						{
							"body": {
								"nativeSrc": "1041:195:8",
								"nodeType": "YulBlock",
								"src": "1041:195:8",
								"statements": [
									{
										"nativeSrc": "1051:26:8",
										"nodeType": "YulAssignment",
										"src": "1051:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1063:9:8",
													"nodeType": "YulIdentifier",
													"src": "1063:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "1074:2:8",
													"nodeType": "YulLiteral",
													"src": "1074:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1059:3:8",
												"nodeType": "YulIdentifier",
												"src": "1059:3:8"
											},
											"nativeSrc": "1059:18:8",
											"nodeType": "YulFunctionCall",
											"src": "1059:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1051:4:8",
												"nodeType": "YulIdentifier",
												"src": "1051:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1098:9:8",
															"nodeType": "YulIdentifier",
															"src": "1098:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "1109:1:8",
															"nodeType": "YulLiteral",
															"src": "1109:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1094:3:8",
														"nodeType": "YulIdentifier",
														"src": "1094:3:8"
													},
													"nativeSrc": "1094:17:8",
													"nodeType": "YulFunctionCall",
													"src": "1094:17:8"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "1117:4:8",
															"nodeType": "YulIdentifier",
															"src": "1117:4:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "1123:9:8",
															"nodeType": "YulIdentifier",
															"src": "1123:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1113:3:8",
														"nodeType": "YulIdentifier",
														"src": "1113:3:8"
													},
													"nativeSrc": "1113:20:8",
													"nodeType": "YulFunctionCall",
													"src": "1113:20:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1087:6:8",
												"nodeType": "YulIdentifier",
												"src": "1087:6:8"
											},
											"nativeSrc": "1087:47:8",
											"nodeType": "YulFunctionCall",
											"src": "1087:47:8"
										},
										"nativeSrc": "1087:47:8",
										"nodeType": "YulExpressionStatement",
										"src": "1087:47:8"
									},
									{
										"nativeSrc": "1143:86:8",
										"nodeType": "YulAssignment",
										"src": "1143:86:8",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "1215:6:8",
													"nodeType": "YulIdentifier",
													"src": "1215:6:8"
												},
												{
													"name": "tail",
													"nativeSrc": "1224:4:8",
													"nodeType": "YulIdentifier",
													"src": "1224:4:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "1151:63:8",
												"nodeType": "YulIdentifier",
												"src": "1151:63:8"
											},
											"nativeSrc": "1151:78:8",
											"nodeType": "YulFunctionCall",
											"src": "1151:78:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1143:4:8",
												"nodeType": "YulIdentifier",
												"src": "1143:4:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "923:313:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1013:9:8",
									"nodeType": "YulTypedName",
									"src": "1013:9:8",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1025:6:8",
									"nodeType": "YulTypedName",
									"src": "1025:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1036:4:8",
									"nodeType": "YulTypedName",
									"src": "1036:4:8",
									"type": ""
								}
							],
							"src": "923:313:8"
						},
						{
							"body": {
								"nativeSrc": "1282:35:8",
								"nodeType": "YulBlock",
								"src": "1282:35:8",
								"statements": [
									{
										"nativeSrc": "1292:19:8",
										"nodeType": "YulAssignment",
										"src": "1292:19:8",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1308:2:8",
													"nodeType": "YulLiteral",
													"src": "1308:2:8",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1302:5:8",
												"nodeType": "YulIdentifier",
												"src": "1302:5:8"
											},
											"nativeSrc": "1302:9:8",
											"nodeType": "YulFunctionCall",
											"src": "1302:9:8"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "1292:6:8",
												"nodeType": "YulIdentifier",
												"src": "1292:6:8"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nativeSrc": "1242:75:8",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "1275:6:8",
									"nodeType": "YulTypedName",
									"src": "1275:6:8",
									"type": ""
								}
							],
							"src": "1242:75:8"
						},
						{
							"body": {
								"nativeSrc": "1412:28:8",
								"nodeType": "YulBlock",
								"src": "1412:28:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1429:1:8",
													"nodeType": "YulLiteral",
													"src": "1429:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "1432:1:8",
													"nodeType": "YulLiteral",
													"src": "1432:1:8",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "1422:6:8",
												"nodeType": "YulIdentifier",
												"src": "1422:6:8"
											},
											"nativeSrc": "1422:12:8",
											"nodeType": "YulFunctionCall",
											"src": "1422:12:8"
										},
										"nativeSrc": "1422:12:8",
										"nodeType": "YulExpressionStatement",
										"src": "1422:12:8"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nativeSrc": "1323:117:8",
							"nodeType": "YulFunctionDefinition",
							"src": "1323:117:8"
						},
						{
							"body": {
								"nativeSrc": "1535:28:8",
								"nodeType": "YulBlock",
								"src": "1535:28:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1552:1:8",
													"nodeType": "YulLiteral",
													"src": "1552:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "1555:1:8",
													"nodeType": "YulLiteral",
													"src": "1555:1:8",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "1545:6:8",
												"nodeType": "YulIdentifier",
												"src": "1545:6:8"
											},
											"nativeSrc": "1545:12:8",
											"nodeType": "YulFunctionCall",
											"src": "1545:12:8"
										},
										"nativeSrc": "1545:12:8",
										"nodeType": "YulExpressionStatement",
										"src": "1545:12:8"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nativeSrc": "1446:117:8",
							"nodeType": "YulFunctionDefinition",
							"src": "1446:117:8"
						},
						{
							"body": {
								"nativeSrc": "1614:81:8",
								"nodeType": "YulBlock",
								"src": "1614:81:8",
								"statements": [
									{
										"nativeSrc": "1624:65:8",
										"nodeType": "YulAssignment",
										"src": "1624:65:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1639:5:8",
													"nodeType": "YulIdentifier",
													"src": "1639:5:8"
												},
												{
													"kind": "number",
													"nativeSrc": "1646:42:8",
													"nodeType": "YulLiteral",
													"src": "1646:42:8",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "1635:3:8",
												"nodeType": "YulIdentifier",
												"src": "1635:3:8"
											},
											"nativeSrc": "1635:54:8",
											"nodeType": "YulFunctionCall",
											"src": "1635:54:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1624:7:8",
												"nodeType": "YulIdentifier",
												"src": "1624:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "1569:126:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1596:5:8",
									"nodeType": "YulTypedName",
									"src": "1596:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1606:7:8",
									"nodeType": "YulTypedName",
									"src": "1606:7:8",
									"type": ""
								}
							],
							"src": "1569:126:8"
						},
						{
							"body": {
								"nativeSrc": "1746:51:8",
								"nodeType": "YulBlock",
								"src": "1746:51:8",
								"statements": [
									{
										"nativeSrc": "1756:35:8",
										"nodeType": "YulAssignment",
										"src": "1756:35:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1785:5:8",
													"nodeType": "YulIdentifier",
													"src": "1785:5:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "1767:17:8",
												"nodeType": "YulIdentifier",
												"src": "1767:17:8"
											},
											"nativeSrc": "1767:24:8",
											"nodeType": "YulFunctionCall",
											"src": "1767:24:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1756:7:8",
												"nodeType": "YulIdentifier",
												"src": "1756:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "1701:96:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1728:5:8",
									"nodeType": "YulTypedName",
									"src": "1728:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1738:7:8",
									"nodeType": "YulTypedName",
									"src": "1738:7:8",
									"type": ""
								}
							],
							"src": "1701:96:8"
						},
						{
							"body": {
								"nativeSrc": "1846:79:8",
								"nodeType": "YulBlock",
								"src": "1846:79:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "1903:16:8",
											"nodeType": "YulBlock",
											"src": "1903:16:8",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1912:1:8",
																"nodeType": "YulLiteral",
																"src": "1912:1:8",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1915:1:8",
																"nodeType": "YulLiteral",
																"src": "1915:1:8",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1905:6:8",
															"nodeType": "YulIdentifier",
															"src": "1905:6:8"
														},
														"nativeSrc": "1905:12:8",
														"nodeType": "YulFunctionCall",
														"src": "1905:12:8"
													},
													"nativeSrc": "1905:12:8",
													"nodeType": "YulExpressionStatement",
													"src": "1905:12:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1869:5:8",
															"nodeType": "YulIdentifier",
															"src": "1869:5:8"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "1894:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "1894:5:8"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nativeSrc": "1876:17:8",
																"nodeType": "YulIdentifier",
																"src": "1876:17:8"
															},
															"nativeSrc": "1876:24:8",
															"nodeType": "YulFunctionCall",
															"src": "1876:24:8"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "1866:2:8",
														"nodeType": "YulIdentifier",
														"src": "1866:2:8"
													},
													"nativeSrc": "1866:35:8",
													"nodeType": "YulFunctionCall",
													"src": "1866:35:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "1859:6:8",
												"nodeType": "YulIdentifier",
												"src": "1859:6:8"
											},
											"nativeSrc": "1859:43:8",
											"nodeType": "YulFunctionCall",
											"src": "1859:43:8"
										},
										"nativeSrc": "1856:63:8",
										"nodeType": "YulIf",
										"src": "1856:63:8"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nativeSrc": "1803:122:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1839:5:8",
									"nodeType": "YulTypedName",
									"src": "1839:5:8",
									"type": ""
								}
							],
							"src": "1803:122:8"
						},
						{
							"body": {
								"nativeSrc": "1983:87:8",
								"nodeType": "YulBlock",
								"src": "1983:87:8",
								"statements": [
									{
										"nativeSrc": "1993:29:8",
										"nodeType": "YulAssignment",
										"src": "1993:29:8",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "2015:6:8",
													"nodeType": "YulIdentifier",
													"src": "2015:6:8"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "2002:12:8",
												"nodeType": "YulIdentifier",
												"src": "2002:12:8"
											},
											"nativeSrc": "2002:20:8",
											"nodeType": "YulFunctionCall",
											"src": "2002:20:8"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1993:5:8",
												"nodeType": "YulIdentifier",
												"src": "1993:5:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2058:5:8",
													"nodeType": "YulIdentifier",
													"src": "2058:5:8"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "2031:26:8",
												"nodeType": "YulIdentifier",
												"src": "2031:26:8"
											},
											"nativeSrc": "2031:33:8",
											"nodeType": "YulFunctionCall",
											"src": "2031:33:8"
										},
										"nativeSrc": "2031:33:8",
										"nodeType": "YulExpressionStatement",
										"src": "2031:33:8"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nativeSrc": "1931:139:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "1961:6:8",
									"nodeType": "YulTypedName",
									"src": "1961:6:8",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "1969:3:8",
									"nodeType": "YulTypedName",
									"src": "1969:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "1977:5:8",
									"nodeType": "YulTypedName",
									"src": "1977:5:8",
									"type": ""
								}
							],
							"src": "1931:139:8"
						},
						{
							"body": {
								"nativeSrc": "2121:32:8",
								"nodeType": "YulBlock",
								"src": "2121:32:8",
								"statements": [
									{
										"nativeSrc": "2131:16:8",
										"nodeType": "YulAssignment",
										"src": "2131:16:8",
										"value": {
											"name": "value",
											"nativeSrc": "2142:5:8",
											"nodeType": "YulIdentifier",
											"src": "2142:5:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "2131:7:8",
												"nodeType": "YulIdentifier",
												"src": "2131:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nativeSrc": "2076:77:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2103:5:8",
									"nodeType": "YulTypedName",
									"src": "2103:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "2113:7:8",
									"nodeType": "YulTypedName",
									"src": "2113:7:8",
									"type": ""
								}
							],
							"src": "2076:77:8"
						},
						{
							"body": {
								"nativeSrc": "2202:79:8",
								"nodeType": "YulBlock",
								"src": "2202:79:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "2259:16:8",
											"nodeType": "YulBlock",
											"src": "2259:16:8",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2268:1:8",
																"nodeType": "YulLiteral",
																"src": "2268:1:8",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2271:1:8",
																"nodeType": "YulLiteral",
																"src": "2271:1:8",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2261:6:8",
															"nodeType": "YulIdentifier",
															"src": "2261:6:8"
														},
														"nativeSrc": "2261:12:8",
														"nodeType": "YulFunctionCall",
														"src": "2261:12:8"
													},
													"nativeSrc": "2261:12:8",
													"nodeType": "YulExpressionStatement",
													"src": "2261:12:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2225:5:8",
															"nodeType": "YulIdentifier",
															"src": "2225:5:8"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "2250:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "2250:5:8"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "2232:17:8",
																"nodeType": "YulIdentifier",
																"src": "2232:17:8"
															},
															"nativeSrc": "2232:24:8",
															"nodeType": "YulFunctionCall",
															"src": "2232:24:8"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "2222:2:8",
														"nodeType": "YulIdentifier",
														"src": "2222:2:8"
													},
													"nativeSrc": "2222:35:8",
													"nodeType": "YulFunctionCall",
													"src": "2222:35:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "2215:6:8",
												"nodeType": "YulIdentifier",
												"src": "2215:6:8"
											},
											"nativeSrc": "2215:43:8",
											"nodeType": "YulFunctionCall",
											"src": "2215:43:8"
										},
										"nativeSrc": "2212:63:8",
										"nodeType": "YulIf",
										"src": "2212:63:8"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nativeSrc": "2159:122:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2195:5:8",
									"nodeType": "YulTypedName",
									"src": "2195:5:8",
									"type": ""
								}
							],
							"src": "2159:122:8"
						},
						{
							"body": {
								"nativeSrc": "2339:87:8",
								"nodeType": "YulBlock",
								"src": "2339:87:8",
								"statements": [
									{
										"nativeSrc": "2349:29:8",
										"nodeType": "YulAssignment",
										"src": "2349:29:8",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "2371:6:8",
													"nodeType": "YulIdentifier",
													"src": "2371:6:8"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "2358:12:8",
												"nodeType": "YulIdentifier",
												"src": "2358:12:8"
											},
											"nativeSrc": "2358:20:8",
											"nodeType": "YulFunctionCall",
											"src": "2358:20:8"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "2349:5:8",
												"nodeType": "YulIdentifier",
												"src": "2349:5:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2414:5:8",
													"nodeType": "YulIdentifier",
													"src": "2414:5:8"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2387:26:8",
												"nodeType": "YulIdentifier",
												"src": "2387:26:8"
											},
											"nativeSrc": "2387:33:8",
											"nodeType": "YulFunctionCall",
											"src": "2387:33:8"
										},
										"nativeSrc": "2387:33:8",
										"nodeType": "YulExpressionStatement",
										"src": "2387:33:8"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nativeSrc": "2287:139:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "2317:6:8",
									"nodeType": "YulTypedName",
									"src": "2317:6:8",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "2325:3:8",
									"nodeType": "YulTypedName",
									"src": "2325:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "2333:5:8",
									"nodeType": "YulTypedName",
									"src": "2333:5:8",
									"type": ""
								}
							],
							"src": "2287:139:8"
						},
						{
							"body": {
								"nativeSrc": "2515:391:8",
								"nodeType": "YulBlock",
								"src": "2515:391:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "2561:83:8",
											"nodeType": "YulBlock",
											"src": "2561:83:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "2563:77:8",
															"nodeType": "YulIdentifier",
															"src": "2563:77:8"
														},
														"nativeSrc": "2563:79:8",
														"nodeType": "YulFunctionCall",
														"src": "2563:79:8"
													},
													"nativeSrc": "2563:79:8",
													"nodeType": "YulExpressionStatement",
													"src": "2563:79:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2536:7:8",
															"nodeType": "YulIdentifier",
															"src": "2536:7:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "2545:9:8",
															"nodeType": "YulIdentifier",
															"src": "2545:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2532:3:8",
														"nodeType": "YulIdentifier",
														"src": "2532:3:8"
													},
													"nativeSrc": "2532:23:8",
													"nodeType": "YulFunctionCall",
													"src": "2532:23:8"
												},
												{
													"kind": "number",
													"nativeSrc": "2557:2:8",
													"nodeType": "YulLiteral",
													"src": "2557:2:8",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2528:3:8",
												"nodeType": "YulIdentifier",
												"src": "2528:3:8"
											},
											"nativeSrc": "2528:32:8",
											"nodeType": "YulFunctionCall",
											"src": "2528:32:8"
										},
										"nativeSrc": "2525:119:8",
										"nodeType": "YulIf",
										"src": "2525:119:8"
									},
									{
										"nativeSrc": "2654:117:8",
										"nodeType": "YulBlock",
										"src": "2654:117:8",
										"statements": [
											{
												"nativeSrc": "2669:15:8",
												"nodeType": "YulVariableDeclaration",
												"src": "2669:15:8",
												"value": {
													"kind": "number",
													"nativeSrc": "2683:1:8",
													"nodeType": "YulLiteral",
													"src": "2683:1:8",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2673:6:8",
														"nodeType": "YulTypedName",
														"src": "2673:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2698:63:8",
												"nodeType": "YulAssignment",
												"src": "2698:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2733:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "2733:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2744:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "2744:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2729:3:8",
																"nodeType": "YulIdentifier",
																"src": "2729:3:8"
															},
															"nativeSrc": "2729:22:8",
															"nodeType": "YulFunctionCall",
															"src": "2729:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2753:7:8",
															"nodeType": "YulIdentifier",
															"src": "2753:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "2708:20:8",
														"nodeType": "YulIdentifier",
														"src": "2708:20:8"
													},
													"nativeSrc": "2708:53:8",
													"nodeType": "YulFunctionCall",
													"src": "2708:53:8"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "2698:6:8",
														"nodeType": "YulIdentifier",
														"src": "2698:6:8"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "2781:118:8",
										"nodeType": "YulBlock",
										"src": "2781:118:8",
										"statements": [
											{
												"nativeSrc": "2796:16:8",
												"nodeType": "YulVariableDeclaration",
												"src": "2796:16:8",
												"value": {
													"kind": "number",
													"nativeSrc": "2810:2:8",
													"nodeType": "YulLiteral",
													"src": "2810:2:8",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2800:6:8",
														"nodeType": "YulTypedName",
														"src": "2800:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2826:63:8",
												"nodeType": "YulAssignment",
												"src": "2826:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2861:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "2861:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2872:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "2872:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2857:3:8",
																"nodeType": "YulIdentifier",
																"src": "2857:3:8"
															},
															"nativeSrc": "2857:22:8",
															"nodeType": "YulFunctionCall",
															"src": "2857:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2881:7:8",
															"nodeType": "YulIdentifier",
															"src": "2881:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "2836:20:8",
														"nodeType": "YulIdentifier",
														"src": "2836:20:8"
													},
													"nativeSrc": "2836:53:8",
													"nodeType": "YulFunctionCall",
													"src": "2836:53:8"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "2826:6:8",
														"nodeType": "YulIdentifier",
														"src": "2826:6:8"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nativeSrc": "2432:474:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2477:9:8",
									"nodeType": "YulTypedName",
									"src": "2477:9:8",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2488:7:8",
									"nodeType": "YulTypedName",
									"src": "2488:7:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2500:6:8",
									"nodeType": "YulTypedName",
									"src": "2500:6:8",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2508:6:8",
									"nodeType": "YulTypedName",
									"src": "2508:6:8",
									"type": ""
								}
							],
							"src": "2432:474:8"
						},
						{
							"body": {
								"nativeSrc": "2954:48:8",
								"nodeType": "YulBlock",
								"src": "2954:48:8",
								"statements": [
									{
										"nativeSrc": "2964:32:8",
										"nodeType": "YulAssignment",
										"src": "2964:32:8",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2989:5:8",
															"nodeType": "YulIdentifier",
															"src": "2989:5:8"
														}
													],
													"functionName": {
														"name": "iszero",
														"nativeSrc": "2982:6:8",
														"nodeType": "YulIdentifier",
														"src": "2982:6:8"
													},
													"nativeSrc": "2982:13:8",
													"nodeType": "YulFunctionCall",
													"src": "2982:13:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "2975:6:8",
												"nodeType": "YulIdentifier",
												"src": "2975:6:8"
											},
											"nativeSrc": "2975:21:8",
											"nodeType": "YulFunctionCall",
											"src": "2975:21:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "2964:7:8",
												"nodeType": "YulIdentifier",
												"src": "2964:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bool",
							"nativeSrc": "2912:90:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2936:5:8",
									"nodeType": "YulTypedName",
									"src": "2936:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "2946:7:8",
									"nodeType": "YulTypedName",
									"src": "2946:7:8",
									"type": ""
								}
							],
							"src": "2912:90:8"
						},
						{
							"body": {
								"nativeSrc": "3067:50:8",
								"nodeType": "YulBlock",
								"src": "3067:50:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3084:3:8",
													"nodeType": "YulIdentifier",
													"src": "3084:3:8"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "3104:5:8",
															"nodeType": "YulIdentifier",
															"src": "3104:5:8"
														}
													],
													"functionName": {
														"name": "cleanup_t_bool",
														"nativeSrc": "3089:14:8",
														"nodeType": "YulIdentifier",
														"src": "3089:14:8"
													},
													"nativeSrc": "3089:21:8",
													"nodeType": "YulFunctionCall",
													"src": "3089:21:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3077:6:8",
												"nodeType": "YulIdentifier",
												"src": "3077:6:8"
											},
											"nativeSrc": "3077:34:8",
											"nodeType": "YulFunctionCall",
											"src": "3077:34:8"
										},
										"nativeSrc": "3077:34:8",
										"nodeType": "YulExpressionStatement",
										"src": "3077:34:8"
									}
								]
							},
							"name": "abi_encode_t_bool_to_t_bool_fromStack",
							"nativeSrc": "3008:109:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3055:5:8",
									"nodeType": "YulTypedName",
									"src": "3055:5:8",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "3062:3:8",
									"nodeType": "YulTypedName",
									"src": "3062:3:8",
									"type": ""
								}
							],
							"src": "3008:109:8"
						},
						{
							"body": {
								"nativeSrc": "3215:118:8",
								"nodeType": "YulBlock",
								"src": "3215:118:8",
								"statements": [
									{
										"nativeSrc": "3225:26:8",
										"nodeType": "YulAssignment",
										"src": "3225:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3237:9:8",
													"nodeType": "YulIdentifier",
													"src": "3237:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "3248:2:8",
													"nodeType": "YulLiteral",
													"src": "3248:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3233:3:8",
												"nodeType": "YulIdentifier",
												"src": "3233:3:8"
											},
											"nativeSrc": "3233:18:8",
											"nodeType": "YulFunctionCall",
											"src": "3233:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3225:4:8",
												"nodeType": "YulIdentifier",
												"src": "3225:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "3299:6:8",
													"nodeType": "YulIdentifier",
													"src": "3299:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3312:9:8",
															"nodeType": "YulIdentifier",
															"src": "3312:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "3323:1:8",
															"nodeType": "YulLiteral",
															"src": "3323:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3308:3:8",
														"nodeType": "YulIdentifier",
														"src": "3308:3:8"
													},
													"nativeSrc": "3308:17:8",
													"nodeType": "YulFunctionCall",
													"src": "3308:17:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3261:37:8",
												"nodeType": "YulIdentifier",
												"src": "3261:37:8"
											},
											"nativeSrc": "3261:65:8",
											"nodeType": "YulFunctionCall",
											"src": "3261:65:8"
										},
										"nativeSrc": "3261:65:8",
										"nodeType": "YulExpressionStatement",
										"src": "3261:65:8"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nativeSrc": "3123:210:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3187:9:8",
									"nodeType": "YulTypedName",
									"src": "3187:9:8",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "3199:6:8",
									"nodeType": "YulTypedName",
									"src": "3199:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "3210:4:8",
									"nodeType": "YulTypedName",
									"src": "3210:4:8",
									"type": ""
								}
							],
							"src": "3123:210:8"
						},
						{
							"body": {
								"nativeSrc": "3404:53:8",
								"nodeType": "YulBlock",
								"src": "3404:53:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3421:3:8",
													"nodeType": "YulIdentifier",
													"src": "3421:3:8"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "3444:5:8",
															"nodeType": "YulIdentifier",
															"src": "3444:5:8"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nativeSrc": "3426:17:8",
														"nodeType": "YulIdentifier",
														"src": "3426:17:8"
													},
													"nativeSrc": "3426:24:8",
													"nodeType": "YulFunctionCall",
													"src": "3426:24:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3414:6:8",
												"nodeType": "YulIdentifier",
												"src": "3414:6:8"
											},
											"nativeSrc": "3414:37:8",
											"nodeType": "YulFunctionCall",
											"src": "3414:37:8"
										},
										"nativeSrc": "3414:37:8",
										"nodeType": "YulExpressionStatement",
										"src": "3414:37:8"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nativeSrc": "3339:118:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3392:5:8",
									"nodeType": "YulTypedName",
									"src": "3392:5:8",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "3399:3:8",
									"nodeType": "YulTypedName",
									"src": "3399:3:8",
									"type": ""
								}
							],
							"src": "3339:118:8"
						},
						{
							"body": {
								"nativeSrc": "3561:124:8",
								"nodeType": "YulBlock",
								"src": "3561:124:8",
								"statements": [
									{
										"nativeSrc": "3571:26:8",
										"nodeType": "YulAssignment",
										"src": "3571:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3583:9:8",
													"nodeType": "YulIdentifier",
													"src": "3583:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "3594:2:8",
													"nodeType": "YulLiteral",
													"src": "3594:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3579:3:8",
												"nodeType": "YulIdentifier",
												"src": "3579:3:8"
											},
											"nativeSrc": "3579:18:8",
											"nodeType": "YulFunctionCall",
											"src": "3579:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3571:4:8",
												"nodeType": "YulIdentifier",
												"src": "3571:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "3651:6:8",
													"nodeType": "YulIdentifier",
													"src": "3651:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3664:9:8",
															"nodeType": "YulIdentifier",
															"src": "3664:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "3675:1:8",
															"nodeType": "YulLiteral",
															"src": "3675:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3660:3:8",
														"nodeType": "YulIdentifier",
														"src": "3660:3:8"
													},
													"nativeSrc": "3660:17:8",
													"nodeType": "YulFunctionCall",
													"src": "3660:17:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "3607:43:8",
												"nodeType": "YulIdentifier",
												"src": "3607:43:8"
											},
											"nativeSrc": "3607:71:8",
											"nodeType": "YulFunctionCall",
											"src": "3607:71:8"
										},
										"nativeSrc": "3607:71:8",
										"nodeType": "YulExpressionStatement",
										"src": "3607:71:8"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "3463:222:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3533:9:8",
									"nodeType": "YulTypedName",
									"src": "3533:9:8",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "3545:6:8",
									"nodeType": "YulTypedName",
									"src": "3545:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "3556:4:8",
									"nodeType": "YulTypedName",
									"src": "3556:4:8",
									"type": ""
								}
							],
							"src": "3463:222:8"
						},
						{
							"body": {
								"nativeSrc": "3791:519:8",
								"nodeType": "YulBlock",
								"src": "3791:519:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "3837:83:8",
											"nodeType": "YulBlock",
											"src": "3837:83:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "3839:77:8",
															"nodeType": "YulIdentifier",
															"src": "3839:77:8"
														},
														"nativeSrc": "3839:79:8",
														"nodeType": "YulFunctionCall",
														"src": "3839:79:8"
													},
													"nativeSrc": "3839:79:8",
													"nodeType": "YulExpressionStatement",
													"src": "3839:79:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "3812:7:8",
															"nodeType": "YulIdentifier",
															"src": "3812:7:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "3821:9:8",
															"nodeType": "YulIdentifier",
															"src": "3821:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3808:3:8",
														"nodeType": "YulIdentifier",
														"src": "3808:3:8"
													},
													"nativeSrc": "3808:23:8",
													"nodeType": "YulFunctionCall",
													"src": "3808:23:8"
												},
												{
													"kind": "number",
													"nativeSrc": "3833:2:8",
													"nodeType": "YulLiteral",
													"src": "3833:2:8",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "3804:3:8",
												"nodeType": "YulIdentifier",
												"src": "3804:3:8"
											},
											"nativeSrc": "3804:32:8",
											"nodeType": "YulFunctionCall",
											"src": "3804:32:8"
										},
										"nativeSrc": "3801:119:8",
										"nodeType": "YulIf",
										"src": "3801:119:8"
									},
									{
										"nativeSrc": "3930:117:8",
										"nodeType": "YulBlock",
										"src": "3930:117:8",
										"statements": [
											{
												"nativeSrc": "3945:15:8",
												"nodeType": "YulVariableDeclaration",
												"src": "3945:15:8",
												"value": {
													"kind": "number",
													"nativeSrc": "3959:1:8",
													"nodeType": "YulLiteral",
													"src": "3959:1:8",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "3949:6:8",
														"nodeType": "YulTypedName",
														"src": "3949:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "3974:63:8",
												"nodeType": "YulAssignment",
												"src": "3974:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "4009:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "4009:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "4020:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4020:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "4005:3:8",
																"nodeType": "YulIdentifier",
																"src": "4005:3:8"
															},
															"nativeSrc": "4005:22:8",
															"nodeType": "YulFunctionCall",
															"src": "4005:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "4029:7:8",
															"nodeType": "YulIdentifier",
															"src": "4029:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "3984:20:8",
														"nodeType": "YulIdentifier",
														"src": "3984:20:8"
													},
													"nativeSrc": "3984:53:8",
													"nodeType": "YulFunctionCall",
													"src": "3984:53:8"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "3974:6:8",
														"nodeType": "YulIdentifier",
														"src": "3974:6:8"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "4057:118:8",
										"nodeType": "YulBlock",
										"src": "4057:118:8",
										"statements": [
											{
												"nativeSrc": "4072:16:8",
												"nodeType": "YulVariableDeclaration",
												"src": "4072:16:8",
												"value": {
													"kind": "number",
													"nativeSrc": "4086:2:8",
													"nodeType": "YulLiteral",
													"src": "4086:2:8",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "4076:6:8",
														"nodeType": "YulTypedName",
														"src": "4076:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "4102:63:8",
												"nodeType": "YulAssignment",
												"src": "4102:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "4137:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "4137:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "4148:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4148:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "4133:3:8",
																"nodeType": "YulIdentifier",
																"src": "4133:3:8"
															},
															"nativeSrc": "4133:22:8",
															"nodeType": "YulFunctionCall",
															"src": "4133:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "4157:7:8",
															"nodeType": "YulIdentifier",
															"src": "4157:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "4112:20:8",
														"nodeType": "YulIdentifier",
														"src": "4112:20:8"
													},
													"nativeSrc": "4112:53:8",
													"nodeType": "YulFunctionCall",
													"src": "4112:53:8"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "4102:6:8",
														"nodeType": "YulIdentifier",
														"src": "4102:6:8"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "4185:118:8",
										"nodeType": "YulBlock",
										"src": "4185:118:8",
										"statements": [
											{
												"nativeSrc": "4200:16:8",
												"nodeType": "YulVariableDeclaration",
												"src": "4200:16:8",
												"value": {
													"kind": "number",
													"nativeSrc": "4214:2:8",
													"nodeType": "YulLiteral",
													"src": "4214:2:8",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "4204:6:8",
														"nodeType": "YulTypedName",
														"src": "4204:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "4230:63:8",
												"nodeType": "YulAssignment",
												"src": "4230:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "4265:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "4265:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "4276:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4276:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "4261:3:8",
																"nodeType": "YulIdentifier",
																"src": "4261:3:8"
															},
															"nativeSrc": "4261:22:8",
															"nodeType": "YulFunctionCall",
															"src": "4261:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "4285:7:8",
															"nodeType": "YulIdentifier",
															"src": "4285:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "4240:20:8",
														"nodeType": "YulIdentifier",
														"src": "4240:20:8"
													},
													"nativeSrc": "4240:53:8",
													"nodeType": "YulFunctionCall",
													"src": "4240:53:8"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "4230:6:8",
														"nodeType": "YulIdentifier",
														"src": "4230:6:8"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nativeSrc": "3691:619:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3745:9:8",
									"nodeType": "YulTypedName",
									"src": "3745:9:8",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "3756:7:8",
									"nodeType": "YulTypedName",
									"src": "3756:7:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "3768:6:8",
									"nodeType": "YulTypedName",
									"src": "3768:6:8",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "3776:6:8",
									"nodeType": "YulTypedName",
									"src": "3776:6:8",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "3784:6:8",
									"nodeType": "YulTypedName",
									"src": "3784:6:8",
									"type": ""
								}
							],
							"src": "3691:619:8"
						},
						{
							"body": {
								"nativeSrc": "4359:43:8",
								"nodeType": "YulBlock",
								"src": "4359:43:8",
								"statements": [
									{
										"nativeSrc": "4369:27:8",
										"nodeType": "YulAssignment",
										"src": "4369:27:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "4384:5:8",
													"nodeType": "YulIdentifier",
													"src": "4384:5:8"
												},
												{
													"kind": "number",
													"nativeSrc": "4391:4:8",
													"nodeType": "YulLiteral",
													"src": "4391:4:8",
													"type": "",
													"value": "0xff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "4380:3:8",
												"nodeType": "YulIdentifier",
												"src": "4380:3:8"
											},
											"nativeSrc": "4380:16:8",
											"nodeType": "YulFunctionCall",
											"src": "4380:16:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "4369:7:8",
												"nodeType": "YulIdentifier",
												"src": "4369:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint8",
							"nativeSrc": "4316:86:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4341:5:8",
									"nodeType": "YulTypedName",
									"src": "4341:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "4351:7:8",
									"nodeType": "YulTypedName",
									"src": "4351:7:8",
									"type": ""
								}
							],
							"src": "4316:86:8"
						},
						{
							"body": {
								"nativeSrc": "4469:51:8",
								"nodeType": "YulBlock",
								"src": "4469:51:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "4486:3:8",
													"nodeType": "YulIdentifier",
													"src": "4486:3:8"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "4507:5:8",
															"nodeType": "YulIdentifier",
															"src": "4507:5:8"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint8",
														"nativeSrc": "4491:15:8",
														"nodeType": "YulIdentifier",
														"src": "4491:15:8"
													},
													"nativeSrc": "4491:22:8",
													"nodeType": "YulFunctionCall",
													"src": "4491:22:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4479:6:8",
												"nodeType": "YulIdentifier",
												"src": "4479:6:8"
											},
											"nativeSrc": "4479:35:8",
											"nodeType": "YulFunctionCall",
											"src": "4479:35:8"
										},
										"nativeSrc": "4479:35:8",
										"nodeType": "YulExpressionStatement",
										"src": "4479:35:8"
									}
								]
							},
							"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
							"nativeSrc": "4408:112:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4457:5:8",
									"nodeType": "YulTypedName",
									"src": "4457:5:8",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "4464:3:8",
									"nodeType": "YulTypedName",
									"src": "4464:3:8",
									"type": ""
								}
							],
							"src": "4408:112:8"
						},
						{
							"body": {
								"nativeSrc": "4620:120:8",
								"nodeType": "YulBlock",
								"src": "4620:120:8",
								"statements": [
									{
										"nativeSrc": "4630:26:8",
										"nodeType": "YulAssignment",
										"src": "4630:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4642:9:8",
													"nodeType": "YulIdentifier",
													"src": "4642:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "4653:2:8",
													"nodeType": "YulLiteral",
													"src": "4653:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "4638:3:8",
												"nodeType": "YulIdentifier",
												"src": "4638:3:8"
											},
											"nativeSrc": "4638:18:8",
											"nodeType": "YulFunctionCall",
											"src": "4638:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4630:4:8",
												"nodeType": "YulIdentifier",
												"src": "4630:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "4706:6:8",
													"nodeType": "YulIdentifier",
													"src": "4706:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4719:9:8",
															"nodeType": "YulIdentifier",
															"src": "4719:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "4730:1:8",
															"nodeType": "YulLiteral",
															"src": "4730:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4715:3:8",
														"nodeType": "YulIdentifier",
														"src": "4715:3:8"
													},
													"nativeSrc": "4715:17:8",
													"nodeType": "YulFunctionCall",
													"src": "4715:17:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4666:39:8",
												"nodeType": "YulIdentifier",
												"src": "4666:39:8"
											},
											"nativeSrc": "4666:67:8",
											"nodeType": "YulFunctionCall",
											"src": "4666:67:8"
										},
										"nativeSrc": "4666:67:8",
										"nodeType": "YulExpressionStatement",
										"src": "4666:67:8"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
							"nativeSrc": "4526:214:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4592:9:8",
									"nodeType": "YulTypedName",
									"src": "4592:9:8",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4604:6:8",
									"nodeType": "YulTypedName",
									"src": "4604:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4615:4:8",
									"nodeType": "YulTypedName",
									"src": "4615:4:8",
									"type": ""
								}
							],
							"src": "4526:214:8"
						},
						{
							"body": {
								"nativeSrc": "4799:51:8",
								"nodeType": "YulBlock",
								"src": "4799:51:8",
								"statements": [
									{
										"nativeSrc": "4809:35:8",
										"nodeType": "YulAssignment",
										"src": "4809:35:8",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "4838:5:8",
													"nodeType": "YulIdentifier",
													"src": "4838:5:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "4820:17:8",
												"nodeType": "YulIdentifier",
												"src": "4820:17:8"
											},
											"nativeSrc": "4820:24:8",
											"nodeType": "YulFunctionCall",
											"src": "4820:24:8"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "4809:7:8",
												"nodeType": "YulIdentifier",
												"src": "4809:7:8"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address_payable",
							"nativeSrc": "4746:104:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4781:5:8",
									"nodeType": "YulTypedName",
									"src": "4781:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "4791:7:8",
									"nodeType": "YulTypedName",
									"src": "4791:7:8",
									"type": ""
								}
							],
							"src": "4746:104:8"
						},
						{
							"body": {
								"nativeSrc": "4907:87:8",
								"nodeType": "YulBlock",
								"src": "4907:87:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "4972:16:8",
											"nodeType": "YulBlock",
											"src": "4972:16:8",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4981:1:8",
																"nodeType": "YulLiteral",
																"src": "4981:1:8",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "4984:1:8",
																"nodeType": "YulLiteral",
																"src": "4984:1:8",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "4974:6:8",
															"nodeType": "YulIdentifier",
															"src": "4974:6:8"
														},
														"nativeSrc": "4974:12:8",
														"nodeType": "YulFunctionCall",
														"src": "4974:12:8"
													},
													"nativeSrc": "4974:12:8",
													"nodeType": "YulExpressionStatement",
													"src": "4974:12:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "4930:5:8",
															"nodeType": "YulIdentifier",
															"src": "4930:5:8"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "4963:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "4963:5:8"
																}
															],
															"functionName": {
																"name": "cleanup_t_address_payable",
																"nativeSrc": "4937:25:8",
																"nodeType": "YulIdentifier",
																"src": "4937:25:8"
															},
															"nativeSrc": "4937:32:8",
															"nodeType": "YulFunctionCall",
															"src": "4937:32:8"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "4927:2:8",
														"nodeType": "YulIdentifier",
														"src": "4927:2:8"
													},
													"nativeSrc": "4927:43:8",
													"nodeType": "YulFunctionCall",
													"src": "4927:43:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4920:6:8",
												"nodeType": "YulIdentifier",
												"src": "4920:6:8"
											},
											"nativeSrc": "4920:51:8",
											"nodeType": "YulFunctionCall",
											"src": "4920:51:8"
										},
										"nativeSrc": "4917:71:8",
										"nodeType": "YulIf",
										"src": "4917:71:8"
									}
								]
							},
							"name": "validator_revert_t_address_payable",
							"nativeSrc": "4856:138:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4900:5:8",
									"nodeType": "YulTypedName",
									"src": "4900:5:8",
									"type": ""
								}
							],
							"src": "4856:138:8"
						},
						{
							"body": {
								"nativeSrc": "5060:95:8",
								"nodeType": "YulBlock",
								"src": "5060:95:8",
								"statements": [
									{
										"nativeSrc": "5070:29:8",
										"nodeType": "YulAssignment",
										"src": "5070:29:8",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "5092:6:8",
													"nodeType": "YulIdentifier",
													"src": "5092:6:8"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "5079:12:8",
												"nodeType": "YulIdentifier",
												"src": "5079:12:8"
											},
											"nativeSrc": "5079:20:8",
											"nodeType": "YulFunctionCall",
											"src": "5079:20:8"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "5070:5:8",
												"nodeType": "YulIdentifier",
												"src": "5070:5:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "5143:5:8",
													"nodeType": "YulIdentifier",
													"src": "5143:5:8"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address_payable",
												"nativeSrc": "5108:34:8",
												"nodeType": "YulIdentifier",
												"src": "5108:34:8"
											},
											"nativeSrc": "5108:41:8",
											"nodeType": "YulFunctionCall",
											"src": "5108:41:8"
										},
										"nativeSrc": "5108:41:8",
										"nodeType": "YulExpressionStatement",
										"src": "5108:41:8"
									}
								]
							},
							"name": "abi_decode_t_address_payable",
							"nativeSrc": "5000:155:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "5038:6:8",
									"nodeType": "YulTypedName",
									"src": "5038:6:8",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "5046:3:8",
									"nodeType": "YulTypedName",
									"src": "5046:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "5054:5:8",
									"nodeType": "YulTypedName",
									"src": "5054:5:8",
									"type": ""
								}
							],
							"src": "5000:155:8"
						},
						{
							"body": {
								"nativeSrc": "5235:271:8",
								"nodeType": "YulBlock",
								"src": "5235:271:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "5281:83:8",
											"nodeType": "YulBlock",
											"src": "5281:83:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "5283:77:8",
															"nodeType": "YulIdentifier",
															"src": "5283:77:8"
														},
														"nativeSrc": "5283:79:8",
														"nodeType": "YulFunctionCall",
														"src": "5283:79:8"
													},
													"nativeSrc": "5283:79:8",
													"nodeType": "YulExpressionStatement",
													"src": "5283:79:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5256:7:8",
															"nodeType": "YulIdentifier",
															"src": "5256:7:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "5265:9:8",
															"nodeType": "YulIdentifier",
															"src": "5265:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5252:3:8",
														"nodeType": "YulIdentifier",
														"src": "5252:3:8"
													},
													"nativeSrc": "5252:23:8",
													"nodeType": "YulFunctionCall",
													"src": "5252:23:8"
												},
												{
													"kind": "number",
													"nativeSrc": "5277:2:8",
													"nodeType": "YulLiteral",
													"src": "5277:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5248:3:8",
												"nodeType": "YulIdentifier",
												"src": "5248:3:8"
											},
											"nativeSrc": "5248:32:8",
											"nodeType": "YulFunctionCall",
											"src": "5248:32:8"
										},
										"nativeSrc": "5245:119:8",
										"nodeType": "YulIf",
										"src": "5245:119:8"
									},
									{
										"nativeSrc": "5374:125:8",
										"nodeType": "YulBlock",
										"src": "5374:125:8",
										"statements": [
											{
												"nativeSrc": "5389:15:8",
												"nodeType": "YulVariableDeclaration",
												"src": "5389:15:8",
												"value": {
													"kind": "number",
													"nativeSrc": "5403:1:8",
													"nodeType": "YulLiteral",
													"src": "5403:1:8",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5393:6:8",
														"nodeType": "YulTypedName",
														"src": "5393:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5418:71:8",
												"nodeType": "YulAssignment",
												"src": "5418:71:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5461:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "5461:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5472:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "5472:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5457:3:8",
																"nodeType": "YulIdentifier",
																"src": "5457:3:8"
															},
															"nativeSrc": "5457:22:8",
															"nodeType": "YulFunctionCall",
															"src": "5457:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5481:7:8",
															"nodeType": "YulIdentifier",
															"src": "5481:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_payable",
														"nativeSrc": "5428:28:8",
														"nodeType": "YulIdentifier",
														"src": "5428:28:8"
													},
													"nativeSrc": "5428:61:8",
													"nodeType": "YulFunctionCall",
													"src": "5428:61:8"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "5418:6:8",
														"nodeType": "YulIdentifier",
														"src": "5418:6:8"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address_payable",
							"nativeSrc": "5161:345:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5205:9:8",
									"nodeType": "YulTypedName",
									"src": "5205:9:8",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "5216:7:8",
									"nodeType": "YulTypedName",
									"src": "5216:7:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "5228:6:8",
									"nodeType": "YulTypedName",
									"src": "5228:6:8",
									"type": ""
								}
							],
							"src": "5161:345:8"
						},
						{
							"body": {
								"nativeSrc": "5578:263:8",
								"nodeType": "YulBlock",
								"src": "5578:263:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "5624:83:8",
											"nodeType": "YulBlock",
											"src": "5624:83:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "5626:77:8",
															"nodeType": "YulIdentifier",
															"src": "5626:77:8"
														},
														"nativeSrc": "5626:79:8",
														"nodeType": "YulFunctionCall",
														"src": "5626:79:8"
													},
													"nativeSrc": "5626:79:8",
													"nodeType": "YulExpressionStatement",
													"src": "5626:79:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5599:7:8",
															"nodeType": "YulIdentifier",
															"src": "5599:7:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "5608:9:8",
															"nodeType": "YulIdentifier",
															"src": "5608:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5595:3:8",
														"nodeType": "YulIdentifier",
														"src": "5595:3:8"
													},
													"nativeSrc": "5595:23:8",
													"nodeType": "YulFunctionCall",
													"src": "5595:23:8"
												},
												{
													"kind": "number",
													"nativeSrc": "5620:2:8",
													"nodeType": "YulLiteral",
													"src": "5620:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5591:3:8",
												"nodeType": "YulIdentifier",
												"src": "5591:3:8"
											},
											"nativeSrc": "5591:32:8",
											"nodeType": "YulFunctionCall",
											"src": "5591:32:8"
										},
										"nativeSrc": "5588:119:8",
										"nodeType": "YulIf",
										"src": "5588:119:8"
									},
									{
										"nativeSrc": "5717:117:8",
										"nodeType": "YulBlock",
										"src": "5717:117:8",
										"statements": [
											{
												"nativeSrc": "5732:15:8",
												"nodeType": "YulVariableDeclaration",
												"src": "5732:15:8",
												"value": {
													"kind": "number",
													"nativeSrc": "5746:1:8",
													"nodeType": "YulLiteral",
													"src": "5746:1:8",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5736:6:8",
														"nodeType": "YulTypedName",
														"src": "5736:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5761:63:8",
												"nodeType": "YulAssignment",
												"src": "5761:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5796:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "5796:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5807:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "5807:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5792:3:8",
																"nodeType": "YulIdentifier",
																"src": "5792:3:8"
															},
															"nativeSrc": "5792:22:8",
															"nodeType": "YulFunctionCall",
															"src": "5792:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5816:7:8",
															"nodeType": "YulIdentifier",
															"src": "5816:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "5771:20:8",
														"nodeType": "YulIdentifier",
														"src": "5771:20:8"
													},
													"nativeSrc": "5771:53:8",
													"nodeType": "YulFunctionCall",
													"src": "5771:53:8"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "5761:6:8",
														"nodeType": "YulIdentifier",
														"src": "5761:6:8"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256",
							"nativeSrc": "5512:329:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5548:9:8",
									"nodeType": "YulTypedName",
									"src": "5548:9:8",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "5559:7:8",
									"nodeType": "YulTypedName",
									"src": "5559:7:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "5571:6:8",
									"nodeType": "YulTypedName",
									"src": "5571:6:8",
									"type": ""
								}
							],
							"src": "5512:329:8"
						},
						{
							"body": {
								"nativeSrc": "5913:263:8",
								"nodeType": "YulBlock",
								"src": "5913:263:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "5959:83:8",
											"nodeType": "YulBlock",
											"src": "5959:83:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "5961:77:8",
															"nodeType": "YulIdentifier",
															"src": "5961:77:8"
														},
														"nativeSrc": "5961:79:8",
														"nodeType": "YulFunctionCall",
														"src": "5961:79:8"
													},
													"nativeSrc": "5961:79:8",
													"nodeType": "YulExpressionStatement",
													"src": "5961:79:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5934:7:8",
															"nodeType": "YulIdentifier",
															"src": "5934:7:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "5943:9:8",
															"nodeType": "YulIdentifier",
															"src": "5943:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5930:3:8",
														"nodeType": "YulIdentifier",
														"src": "5930:3:8"
													},
													"nativeSrc": "5930:23:8",
													"nodeType": "YulFunctionCall",
													"src": "5930:23:8"
												},
												{
													"kind": "number",
													"nativeSrc": "5955:2:8",
													"nodeType": "YulLiteral",
													"src": "5955:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5926:3:8",
												"nodeType": "YulIdentifier",
												"src": "5926:3:8"
											},
											"nativeSrc": "5926:32:8",
											"nodeType": "YulFunctionCall",
											"src": "5926:32:8"
										},
										"nativeSrc": "5923:119:8",
										"nodeType": "YulIf",
										"src": "5923:119:8"
									},
									{
										"nativeSrc": "6052:117:8",
										"nodeType": "YulBlock",
										"src": "6052:117:8",
										"statements": [
											{
												"nativeSrc": "6067:15:8",
												"nodeType": "YulVariableDeclaration",
												"src": "6067:15:8",
												"value": {
													"kind": "number",
													"nativeSrc": "6081:1:8",
													"nodeType": "YulLiteral",
													"src": "6081:1:8",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "6071:6:8",
														"nodeType": "YulTypedName",
														"src": "6071:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "6096:63:8",
												"nodeType": "YulAssignment",
												"src": "6096:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "6131:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "6131:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "6142:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "6142:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "6127:3:8",
																"nodeType": "YulIdentifier",
																"src": "6127:3:8"
															},
															"nativeSrc": "6127:22:8",
															"nodeType": "YulFunctionCall",
															"src": "6127:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "6151:7:8",
															"nodeType": "YulIdentifier",
															"src": "6151:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "6106:20:8",
														"nodeType": "YulIdentifier",
														"src": "6106:20:8"
													},
													"nativeSrc": "6106:53:8",
													"nodeType": "YulFunctionCall",
													"src": "6106:53:8"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "6096:6:8",
														"nodeType": "YulIdentifier",
														"src": "6096:6:8"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "5847:329:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5883:9:8",
									"nodeType": "YulTypedName",
									"src": "5883:9:8",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "5894:7:8",
									"nodeType": "YulTypedName",
									"src": "5894:7:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "5906:6:8",
									"nodeType": "YulTypedName",
									"src": "5906:6:8",
									"type": ""
								}
							],
							"src": "5847:329:8"
						},
						{
							"body": {
								"nativeSrc": "6247:53:8",
								"nodeType": "YulBlock",
								"src": "6247:53:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6264:3:8",
													"nodeType": "YulIdentifier",
													"src": "6264:3:8"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6287:5:8",
															"nodeType": "YulIdentifier",
															"src": "6287:5:8"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nativeSrc": "6269:17:8",
														"nodeType": "YulIdentifier",
														"src": "6269:17:8"
													},
													"nativeSrc": "6269:24:8",
													"nodeType": "YulFunctionCall",
													"src": "6269:24:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6257:6:8",
												"nodeType": "YulIdentifier",
												"src": "6257:6:8"
											},
											"nativeSrc": "6257:37:8",
											"nodeType": "YulFunctionCall",
											"src": "6257:37:8"
										},
										"nativeSrc": "6257:37:8",
										"nodeType": "YulExpressionStatement",
										"src": "6257:37:8"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nativeSrc": "6182:118:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "6235:5:8",
									"nodeType": "YulTypedName",
									"src": "6235:5:8",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "6242:3:8",
									"nodeType": "YulTypedName",
									"src": "6242:3:8",
									"type": ""
								}
							],
							"src": "6182:118:8"
						},
						{
							"body": {
								"nativeSrc": "6404:124:8",
								"nodeType": "YulBlock",
								"src": "6404:124:8",
								"statements": [
									{
										"nativeSrc": "6414:26:8",
										"nodeType": "YulAssignment",
										"src": "6414:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6426:9:8",
													"nodeType": "YulIdentifier",
													"src": "6426:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "6437:2:8",
													"nodeType": "YulLiteral",
													"src": "6437:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6422:3:8",
												"nodeType": "YulIdentifier",
												"src": "6422:3:8"
											},
											"nativeSrc": "6422:18:8",
											"nodeType": "YulFunctionCall",
											"src": "6422:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6414:4:8",
												"nodeType": "YulIdentifier",
												"src": "6414:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "6494:6:8",
													"nodeType": "YulIdentifier",
													"src": "6494:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6507:9:8",
															"nodeType": "YulIdentifier",
															"src": "6507:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "6518:1:8",
															"nodeType": "YulLiteral",
															"src": "6518:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6503:3:8",
														"nodeType": "YulIdentifier",
														"src": "6503:3:8"
													},
													"nativeSrc": "6503:17:8",
													"nodeType": "YulFunctionCall",
													"src": "6503:17:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "6450:43:8",
												"nodeType": "YulIdentifier",
												"src": "6450:43:8"
											},
											"nativeSrc": "6450:71:8",
											"nodeType": "YulFunctionCall",
											"src": "6450:71:8"
										},
										"nativeSrc": "6450:71:8",
										"nodeType": "YulExpressionStatement",
										"src": "6450:71:8"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "6306:222:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6376:9:8",
									"nodeType": "YulTypedName",
									"src": "6376:9:8",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6388:6:8",
									"nodeType": "YulTypedName",
									"src": "6388:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6399:4:8",
									"nodeType": "YulTypedName",
									"src": "6399:4:8",
									"type": ""
								}
							],
							"src": "6306:222:8"
						},
						{
							"body": {
								"nativeSrc": "6617:391:8",
								"nodeType": "YulBlock",
								"src": "6617:391:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "6663:83:8",
											"nodeType": "YulBlock",
											"src": "6663:83:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "6665:77:8",
															"nodeType": "YulIdentifier",
															"src": "6665:77:8"
														},
														"nativeSrc": "6665:79:8",
														"nodeType": "YulFunctionCall",
														"src": "6665:79:8"
													},
													"nativeSrc": "6665:79:8",
													"nodeType": "YulExpressionStatement",
													"src": "6665:79:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "6638:7:8",
															"nodeType": "YulIdentifier",
															"src": "6638:7:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "6647:9:8",
															"nodeType": "YulIdentifier",
															"src": "6647:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "6634:3:8",
														"nodeType": "YulIdentifier",
														"src": "6634:3:8"
													},
													"nativeSrc": "6634:23:8",
													"nodeType": "YulFunctionCall",
													"src": "6634:23:8"
												},
												{
													"kind": "number",
													"nativeSrc": "6659:2:8",
													"nodeType": "YulLiteral",
													"src": "6659:2:8",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "6630:3:8",
												"nodeType": "YulIdentifier",
												"src": "6630:3:8"
											},
											"nativeSrc": "6630:32:8",
											"nodeType": "YulFunctionCall",
											"src": "6630:32:8"
										},
										"nativeSrc": "6627:119:8",
										"nodeType": "YulIf",
										"src": "6627:119:8"
									},
									{
										"nativeSrc": "6756:117:8",
										"nodeType": "YulBlock",
										"src": "6756:117:8",
										"statements": [
											{
												"nativeSrc": "6771:15:8",
												"nodeType": "YulVariableDeclaration",
												"src": "6771:15:8",
												"value": {
													"kind": "number",
													"nativeSrc": "6785:1:8",
													"nodeType": "YulLiteral",
													"src": "6785:1:8",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "6775:6:8",
														"nodeType": "YulTypedName",
														"src": "6775:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "6800:63:8",
												"nodeType": "YulAssignment",
												"src": "6800:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "6835:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "6835:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "6846:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "6846:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "6831:3:8",
																"nodeType": "YulIdentifier",
																"src": "6831:3:8"
															},
															"nativeSrc": "6831:22:8",
															"nodeType": "YulFunctionCall",
															"src": "6831:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "6855:7:8",
															"nodeType": "YulIdentifier",
															"src": "6855:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "6810:20:8",
														"nodeType": "YulIdentifier",
														"src": "6810:20:8"
													},
													"nativeSrc": "6810:53:8",
													"nodeType": "YulFunctionCall",
													"src": "6810:53:8"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "6800:6:8",
														"nodeType": "YulIdentifier",
														"src": "6800:6:8"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "6883:118:8",
										"nodeType": "YulBlock",
										"src": "6883:118:8",
										"statements": [
											{
												"nativeSrc": "6898:16:8",
												"nodeType": "YulVariableDeclaration",
												"src": "6898:16:8",
												"value": {
													"kind": "number",
													"nativeSrc": "6912:2:8",
													"nodeType": "YulLiteral",
													"src": "6912:2:8",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "6902:6:8",
														"nodeType": "YulTypedName",
														"src": "6902:6:8",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "6928:63:8",
												"nodeType": "YulAssignment",
												"src": "6928:63:8",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "6963:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "6963:9:8"
																},
																{
																	"name": "offset",
																	"nativeSrc": "6974:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "6974:6:8"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "6959:3:8",
																"nodeType": "YulIdentifier",
																"src": "6959:3:8"
															},
															"nativeSrc": "6959:22:8",
															"nodeType": "YulFunctionCall",
															"src": "6959:22:8"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "6983:7:8",
															"nodeType": "YulIdentifier",
															"src": "6983:7:8"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "6938:20:8",
														"nodeType": "YulIdentifier",
														"src": "6938:20:8"
													},
													"nativeSrc": "6938:53:8",
													"nodeType": "YulFunctionCall",
													"src": "6938:53:8"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "6928:6:8",
														"nodeType": "YulIdentifier",
														"src": "6928:6:8"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nativeSrc": "6534:474:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6579:9:8",
									"nodeType": "YulTypedName",
									"src": "6579:9:8",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "6590:7:8",
									"nodeType": "YulTypedName",
									"src": "6590:7:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "6602:6:8",
									"nodeType": "YulTypedName",
									"src": "6602:6:8",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6610:6:8",
									"nodeType": "YulTypedName",
									"src": "6610:6:8",
									"type": ""
								}
							],
							"src": "6534:474:8"
						},
						{
							"body": {
								"nativeSrc": "7120:50:8",
								"nodeType": "YulBlock",
								"src": "7120:50:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "7142:6:8",
															"nodeType": "YulIdentifier",
															"src": "7142:6:8"
														},
														{
															"kind": "number",
															"nativeSrc": "7150:1:8",
															"nodeType": "YulLiteral",
															"src": "7150:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7138:3:8",
														"nodeType": "YulIdentifier",
														"src": "7138:3:8"
													},
													"nativeSrc": "7138:14:8",
													"nodeType": "YulFunctionCall",
													"src": "7138:14:8"
												},
												{
													"hexValue": "6e6f20455448",
													"kind": "string",
													"nativeSrc": "7154:8:8",
													"nodeType": "YulLiteral",
													"src": "7154:8:8",
													"type": "",
													"value": "no ETH"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7131:6:8",
												"nodeType": "YulIdentifier",
												"src": "7131:6:8"
											},
											"nativeSrc": "7131:32:8",
											"nodeType": "YulFunctionCall",
											"src": "7131:32:8"
										},
										"nativeSrc": "7131:32:8",
										"nodeType": "YulExpressionStatement",
										"src": "7131:32:8"
									}
								]
							},
							"name": "store_literal_in_memory_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672",
							"nativeSrc": "7014:156:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "7112:6:8",
									"nodeType": "YulTypedName",
									"src": "7112:6:8",
									"type": ""
								}
							],
							"src": "7014:156:8"
						},
						{
							"body": {
								"nativeSrc": "7322:219:8",
								"nodeType": "YulBlock",
								"src": "7322:219:8",
								"statements": [
									{
										"nativeSrc": "7332:73:8",
										"nodeType": "YulAssignment",
										"src": "7332:73:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "7398:3:8",
													"nodeType": "YulIdentifier",
													"src": "7398:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "7403:1:8",
													"nodeType": "YulLiteral",
													"src": "7403:1:8",
													"type": "",
													"value": "6"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "7339:58:8",
												"nodeType": "YulIdentifier",
												"src": "7339:58:8"
											},
											"nativeSrc": "7339:66:8",
											"nodeType": "YulFunctionCall",
											"src": "7339:66:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "7332:3:8",
												"nodeType": "YulIdentifier",
												"src": "7332:3:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "7503:3:8",
													"nodeType": "YulIdentifier",
													"src": "7503:3:8"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672",
												"nativeSrc": "7414:88:8",
												"nodeType": "YulIdentifier",
												"src": "7414:88:8"
											},
											"nativeSrc": "7414:93:8",
											"nodeType": "YulFunctionCall",
											"src": "7414:93:8"
										},
										"nativeSrc": "7414:93:8",
										"nodeType": "YulExpressionStatement",
										"src": "7414:93:8"
									},
									{
										"nativeSrc": "7516:19:8",
										"nodeType": "YulAssignment",
										"src": "7516:19:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "7527:3:8",
													"nodeType": "YulIdentifier",
													"src": "7527:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "7532:2:8",
													"nodeType": "YulLiteral",
													"src": "7532:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7523:3:8",
												"nodeType": "YulIdentifier",
												"src": "7523:3:8"
											},
											"nativeSrc": "7523:12:8",
											"nodeType": "YulFunctionCall",
											"src": "7523:12:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "7516:3:8",
												"nodeType": "YulIdentifier",
												"src": "7516:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "7176:365:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "7310:3:8",
									"nodeType": "YulTypedName",
									"src": "7310:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "7318:3:8",
									"nodeType": "YulTypedName",
									"src": "7318:3:8",
									"type": ""
								}
							],
							"src": "7176:365:8"
						},
						{
							"body": {
								"nativeSrc": "7718:248:8",
								"nodeType": "YulBlock",
								"src": "7718:248:8",
								"statements": [
									{
										"nativeSrc": "7728:26:8",
										"nodeType": "YulAssignment",
										"src": "7728:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7740:9:8",
													"nodeType": "YulIdentifier",
													"src": "7740:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "7751:2:8",
													"nodeType": "YulLiteral",
													"src": "7751:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7736:3:8",
												"nodeType": "YulIdentifier",
												"src": "7736:3:8"
											},
											"nativeSrc": "7736:18:8",
											"nodeType": "YulFunctionCall",
											"src": "7736:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7728:4:8",
												"nodeType": "YulIdentifier",
												"src": "7728:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7775:9:8",
															"nodeType": "YulIdentifier",
															"src": "7775:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "7786:1:8",
															"nodeType": "YulLiteral",
															"src": "7786:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7771:3:8",
														"nodeType": "YulIdentifier",
														"src": "7771:3:8"
													},
													"nativeSrc": "7771:17:8",
													"nodeType": "YulFunctionCall",
													"src": "7771:17:8"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "7794:4:8",
															"nodeType": "YulIdentifier",
															"src": "7794:4:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "7800:9:8",
															"nodeType": "YulIdentifier",
															"src": "7800:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "7790:3:8",
														"nodeType": "YulIdentifier",
														"src": "7790:3:8"
													},
													"nativeSrc": "7790:20:8",
													"nodeType": "YulFunctionCall",
													"src": "7790:20:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7764:6:8",
												"nodeType": "YulIdentifier",
												"src": "7764:6:8"
											},
											"nativeSrc": "7764:47:8",
											"nodeType": "YulFunctionCall",
											"src": "7764:47:8"
										},
										"nativeSrc": "7764:47:8",
										"nodeType": "YulExpressionStatement",
										"src": "7764:47:8"
									},
									{
										"nativeSrc": "7820:139:8",
										"nodeType": "YulAssignment",
										"src": "7820:139:8",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "7954:4:8",
													"nodeType": "YulIdentifier",
													"src": "7954:4:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "7828:124:8",
												"nodeType": "YulIdentifier",
												"src": "7828:124:8"
											},
											"nativeSrc": "7828:131:8",
											"nodeType": "YulFunctionCall",
											"src": "7828:131:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7820:4:8",
												"nodeType": "YulIdentifier",
												"src": "7820:4:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "7547:419:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7698:9:8",
									"nodeType": "YulTypedName",
									"src": "7698:9:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "7713:4:8",
									"nodeType": "YulTypedName",
									"src": "7713:4:8",
									"type": ""
								}
							],
							"src": "7547:419:8"
						},
						{
							"body": {
								"nativeSrc": "8000:152:8",
								"nodeType": "YulBlock",
								"src": "8000:152:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8017:1:8",
													"nodeType": "YulLiteral",
													"src": "8017:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "8020:77:8",
													"nodeType": "YulLiteral",
													"src": "8020:77:8",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8010:6:8",
												"nodeType": "YulIdentifier",
												"src": "8010:6:8"
											},
											"nativeSrc": "8010:88:8",
											"nodeType": "YulFunctionCall",
											"src": "8010:88:8"
										},
										"nativeSrc": "8010:88:8",
										"nodeType": "YulExpressionStatement",
										"src": "8010:88:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8114:1:8",
													"nodeType": "YulLiteral",
													"src": "8114:1:8",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "8117:4:8",
													"nodeType": "YulLiteral",
													"src": "8117:4:8",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8107:6:8",
												"nodeType": "YulIdentifier",
												"src": "8107:6:8"
											},
											"nativeSrc": "8107:15:8",
											"nodeType": "YulFunctionCall",
											"src": "8107:15:8"
										},
										"nativeSrc": "8107:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "8107:15:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8138:1:8",
													"nodeType": "YulLiteral",
													"src": "8138:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "8141:4:8",
													"nodeType": "YulLiteral",
													"src": "8141:4:8",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "8131:6:8",
												"nodeType": "YulIdentifier",
												"src": "8131:6:8"
											},
											"nativeSrc": "8131:15:8",
											"nodeType": "YulFunctionCall",
											"src": "8131:15:8"
										},
										"nativeSrc": "8131:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "8131:15:8"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "7972:180:8",
							"nodeType": "YulFunctionDefinition",
							"src": "7972:180:8"
						},
						{
							"body": {
								"nativeSrc": "8209:51:8",
								"nodeType": "YulBlock",
								"src": "8209:51:8",
								"statements": [
									{
										"nativeSrc": "8219:34:8",
										"nodeType": "YulAssignment",
										"src": "8219:34:8",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8244:1:8",
													"nodeType": "YulLiteral",
													"src": "8244:1:8",
													"type": "",
													"value": "1"
												},
												{
													"name": "value",
													"nativeSrc": "8247:5:8",
													"nodeType": "YulIdentifier",
													"src": "8247:5:8"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "8240:3:8",
												"nodeType": "YulIdentifier",
												"src": "8240:3:8"
											},
											"nativeSrc": "8240:13:8",
											"nodeType": "YulFunctionCall",
											"src": "8240:13:8"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "8219:8:8",
												"nodeType": "YulIdentifier",
												"src": "8219:8:8"
											}
										]
									}
								]
							},
							"name": "shift_right_1_unsigned",
							"nativeSrc": "8158:102:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "8190:5:8",
									"nodeType": "YulTypedName",
									"src": "8190:5:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "8200:8:8",
									"nodeType": "YulTypedName",
									"src": "8200:8:8",
									"type": ""
								}
							],
							"src": "8158:102:8"
						},
						{
							"body": {
								"nativeSrc": "8339:775:8",
								"nodeType": "YulBlock",
								"src": "8339:775:8",
								"statements": [
									{
										"nativeSrc": "8349:15:8",
										"nodeType": "YulAssignment",
										"src": "8349:15:8",
										"value": {
											"name": "_power",
											"nativeSrc": "8358:6:8",
											"nodeType": "YulIdentifier",
											"src": "8358:6:8"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "8349:5:8",
												"nodeType": "YulIdentifier",
												"src": "8349:5:8"
											}
										]
									},
									{
										"nativeSrc": "8373:14:8",
										"nodeType": "YulAssignment",
										"src": "8373:14:8",
										"value": {
											"name": "_base",
											"nativeSrc": "8382:5:8",
											"nodeType": "YulIdentifier",
											"src": "8382:5:8"
										},
										"variableNames": [
											{
												"name": "base",
												"nativeSrc": "8373:4:8",
												"nodeType": "YulIdentifier",
												"src": "8373:4:8"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "8431:677:8",
											"nodeType": "YulBlock",
											"src": "8431:677:8",
											"statements": [
												{
													"body": {
														"nativeSrc": "8519:22:8",
														"nodeType": "YulBlock",
														"src": "8519:22:8",
														"statements": [
															{
																"expression": {
																	"arguments": [],
																	"functionName": {
																		"name": "panic_error_0x11",
																		"nativeSrc": "8521:16:8",
																		"nodeType": "YulIdentifier",
																		"src": "8521:16:8"
																	},
																	"nativeSrc": "8521:18:8",
																	"nodeType": "YulFunctionCall",
																	"src": "8521:18:8"
																},
																"nativeSrc": "8521:18:8",
																"nodeType": "YulExpressionStatement",
																"src": "8521:18:8"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "8497:4:8",
																"nodeType": "YulIdentifier",
																"src": "8497:4:8"
															},
															{
																"arguments": [
																	{
																		"name": "max",
																		"nativeSrc": "8507:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "8507:3:8"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "8512:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "8512:4:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "8503:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "8503:3:8"
																},
																"nativeSrc": "8503:14:8",
																"nodeType": "YulFunctionCall",
																"src": "8503:14:8"
															}
														],
														"functionName": {
															"name": "gt",
															"nativeSrc": "8494:2:8",
															"nodeType": "YulIdentifier",
															"src": "8494:2:8"
														},
														"nativeSrc": "8494:24:8",
														"nodeType": "YulFunctionCall",
														"src": "8494:24:8"
													},
													"nativeSrc": "8491:50:8",
													"nodeType": "YulIf",
													"src": "8491:50:8"
												},
												{
													"body": {
														"nativeSrc": "8586:419:8",
														"nodeType": "YulBlock",
														"src": "8586:419:8",
														"statements": [
															{
																"nativeSrc": "8966:25:8",
																"nodeType": "YulAssignment",
																"src": "8966:25:8",
																"value": {
																	"arguments": [
																		{
																			"name": "power",
																			"nativeSrc": "8979:5:8",
																			"nodeType": "YulIdentifier",
																			"src": "8979:5:8"
																		},
																		{
																			"name": "base",
																			"nativeSrc": "8986:4:8",
																			"nodeType": "YulIdentifier",
																			"src": "8986:4:8"
																		}
																	],
																	"functionName": {
																		"name": "mul",
																		"nativeSrc": "8975:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "8975:3:8"
																	},
																	"nativeSrc": "8975:16:8",
																	"nodeType": "YulFunctionCall",
																	"src": "8975:16:8"
																},
																"variableNames": [
																	{
																		"name": "power",
																		"nativeSrc": "8966:5:8",
																		"nodeType": "YulIdentifier",
																		"src": "8966:5:8"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "exponent",
																"nativeSrc": "8561:8:8",
																"nodeType": "YulIdentifier",
																"src": "8561:8:8"
															},
															{
																"kind": "number",
																"nativeSrc": "8571:1:8",
																"nodeType": "YulLiteral",
																"src": "8571:1:8",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "8557:3:8",
															"nodeType": "YulIdentifier",
															"src": "8557:3:8"
														},
														"nativeSrc": "8557:16:8",
														"nodeType": "YulFunctionCall",
														"src": "8557:16:8"
													},
													"nativeSrc": "8554:451:8",
													"nodeType": "YulIf",
													"src": "8554:451:8"
												},
												{
													"nativeSrc": "9018:23:8",
													"nodeType": "YulAssignment",
													"src": "9018:23:8",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "9030:4:8",
																"nodeType": "YulIdentifier",
																"src": "9030:4:8"
															},
															{
																"name": "base",
																"nativeSrc": "9036:4:8",
																"nodeType": "YulIdentifier",
																"src": "9036:4:8"
															}
														],
														"functionName": {
															"name": "mul",
															"nativeSrc": "9026:3:8",
															"nodeType": "YulIdentifier",
															"src": "9026:3:8"
														},
														"nativeSrc": "9026:15:8",
														"nodeType": "YulFunctionCall",
														"src": "9026:15:8"
													},
													"variableNames": [
														{
															"name": "base",
															"nativeSrc": "9018:4:8",
															"nodeType": "YulIdentifier",
															"src": "9018:4:8"
														}
													]
												},
												{
													"nativeSrc": "9054:44:8",
													"nodeType": "YulAssignment",
													"src": "9054:44:8",
													"value": {
														"arguments": [
															{
																"name": "exponent",
																"nativeSrc": "9089:8:8",
																"nodeType": "YulIdentifier",
																"src": "9089:8:8"
															}
														],
														"functionName": {
															"name": "shift_right_1_unsigned",
															"nativeSrc": "9066:22:8",
															"nodeType": "YulIdentifier",
															"src": "9066:22:8"
														},
														"nativeSrc": "9066:32:8",
														"nodeType": "YulFunctionCall",
														"src": "9066:32:8"
													},
													"variableNames": [
														{
															"name": "exponent",
															"nativeSrc": "9054:8:8",
															"nodeType": "YulIdentifier",
															"src": "9054:8:8"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "8407:8:8",
													"nodeType": "YulIdentifier",
													"src": "8407:8:8"
												},
												{
													"kind": "number",
													"nativeSrc": "8417:1:8",
													"nodeType": "YulLiteral",
													"src": "8417:1:8",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "8404:2:8",
												"nodeType": "YulIdentifier",
												"src": "8404:2:8"
											},
											"nativeSrc": "8404:15:8",
											"nodeType": "YulFunctionCall",
											"src": "8404:15:8"
										},
										"nativeSrc": "8396:712:8",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "8420:2:8",
											"nodeType": "YulBlock",
											"src": "8420:2:8",
											"statements": []
										},
										"pre": {
											"nativeSrc": "8400:3:8",
											"nodeType": "YulBlock",
											"src": "8400:3:8",
											"statements": []
										},
										"src": "8396:712:8"
									}
								]
							},
							"name": "checked_exp_helper",
							"nativeSrc": "8266:848:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "_power",
									"nativeSrc": "8294:6:8",
									"nodeType": "YulTypedName",
									"src": "8294:6:8",
									"type": ""
								},
								{
									"name": "_base",
									"nativeSrc": "8302:5:8",
									"nodeType": "YulTypedName",
									"src": "8302:5:8",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "8309:8:8",
									"nodeType": "YulTypedName",
									"src": "8309:8:8",
									"type": ""
								},
								{
									"name": "max",
									"nativeSrc": "8319:3:8",
									"nodeType": "YulTypedName",
									"src": "8319:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "8327:5:8",
									"nodeType": "YulTypedName",
									"src": "8327:5:8",
									"type": ""
								},
								{
									"name": "base",
									"nativeSrc": "8334:4:8",
									"nodeType": "YulTypedName",
									"src": "8334:4:8",
									"type": ""
								}
							],
							"src": "8266:848:8"
						},
						{
							"body": {
								"nativeSrc": "9180:1013:8",
								"nodeType": "YulBlock",
								"src": "9180:1013:8",
								"statements": [
									{
										"body": {
											"nativeSrc": "9375:20:8",
											"nodeType": "YulBlock",
											"src": "9375:20:8",
											"statements": [
												{
													"nativeSrc": "9377:10:8",
													"nodeType": "YulAssignment",
													"src": "9377:10:8",
													"value": {
														"kind": "number",
														"nativeSrc": "9386:1:8",
														"nodeType": "YulLiteral",
														"src": "9386:1:8",
														"type": "",
														"value": "1"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "9377:5:8",
															"nodeType": "YulIdentifier",
															"src": "9377:5:8"
														}
													]
												},
												{
													"nativeSrc": "9388:5:8",
													"nodeType": "YulLeave",
													"src": "9388:5:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "9365:8:8",
													"nodeType": "YulIdentifier",
													"src": "9365:8:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "9358:6:8",
												"nodeType": "YulIdentifier",
												"src": "9358:6:8"
											},
											"nativeSrc": "9358:16:8",
											"nodeType": "YulFunctionCall",
											"src": "9358:16:8"
										},
										"nativeSrc": "9355:40:8",
										"nodeType": "YulIf",
										"src": "9355:40:8"
									},
									{
										"body": {
											"nativeSrc": "9420:20:8",
											"nodeType": "YulBlock",
											"src": "9420:20:8",
											"statements": [
												{
													"nativeSrc": "9422:10:8",
													"nodeType": "YulAssignment",
													"src": "9422:10:8",
													"value": {
														"kind": "number",
														"nativeSrc": "9431:1:8",
														"nodeType": "YulLiteral",
														"src": "9431:1:8",
														"type": "",
														"value": "0"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "9422:5:8",
															"nodeType": "YulIdentifier",
															"src": "9422:5:8"
														}
													]
												},
												{
													"nativeSrc": "9433:5:8",
													"nodeType": "YulLeave",
													"src": "9433:5:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "9414:4:8",
													"nodeType": "YulIdentifier",
													"src": "9414:4:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "9407:6:8",
												"nodeType": "YulIdentifier",
												"src": "9407:6:8"
											},
											"nativeSrc": "9407:12:8",
											"nodeType": "YulFunctionCall",
											"src": "9407:12:8"
										},
										"nativeSrc": "9404:36:8",
										"nodeType": "YulIf",
										"src": "9404:36:8"
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "9550:20:8",
													"nodeType": "YulBlock",
													"src": "9550:20:8",
													"statements": [
														{
															"nativeSrc": "9552:10:8",
															"nodeType": "YulAssignment",
															"src": "9552:10:8",
															"value": {
																"kind": "number",
																"nativeSrc": "9561:1:8",
																"nodeType": "YulLiteral",
																"src": "9561:1:8",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "9552:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "9552:5:8"
																}
															]
														},
														{
															"nativeSrc": "9563:5:8",
															"nodeType": "YulLeave",
															"src": "9563:5:8"
														}
													]
												},
												"nativeSrc": "9543:27:8",
												"nodeType": "YulCase",
												"src": "9543:27:8",
												"value": {
													"kind": "number",
													"nativeSrc": "9548:1:8",
													"nodeType": "YulLiteral",
													"src": "9548:1:8",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "9594:176:8",
													"nodeType": "YulBlock",
													"src": "9594:176:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "9629:22:8",
																"nodeType": "YulBlock",
																"src": "9629:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "9631:16:8",
																				"nodeType": "YulIdentifier",
																				"src": "9631:16:8"
																			},
																			"nativeSrc": "9631:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "9631:18:8"
																		},
																		"nativeSrc": "9631:18:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "9631:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "9614:8:8",
																		"nodeType": "YulIdentifier",
																		"src": "9614:8:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9624:3:8",
																		"nodeType": "YulLiteral",
																		"src": "9624:3:8",
																		"type": "",
																		"value": "255"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "9611:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "9611:2:8"
																},
																"nativeSrc": "9611:17:8",
																"nodeType": "YulFunctionCall",
																"src": "9611:17:8"
															},
															"nativeSrc": "9608:43:8",
															"nodeType": "YulIf",
															"src": "9608:43:8"
														},
														{
															"nativeSrc": "9664:25:8",
															"nodeType": "YulAssignment",
															"src": "9664:25:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9677:1:8",
																		"nodeType": "YulLiteral",
																		"src": "9677:1:8",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "9680:8:8",
																		"nodeType": "YulIdentifier",
																		"src": "9680:8:8"
																	}
																],
																"functionName": {
																	"name": "exp",
																	"nativeSrc": "9673:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "9673:3:8"
																},
																"nativeSrc": "9673:16:8",
																"nodeType": "YulFunctionCall",
																"src": "9673:16:8"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "9664:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "9664:5:8"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "9720:22:8",
																"nodeType": "YulBlock",
																"src": "9720:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "9722:16:8",
																				"nodeType": "YulIdentifier",
																				"src": "9722:16:8"
																			},
																			"nativeSrc": "9722:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "9722:18:8"
																		},
																		"nativeSrc": "9722:18:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "9722:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "9708:5:8",
																		"nodeType": "YulIdentifier",
																		"src": "9708:5:8"
																	},
																	{
																		"name": "max",
																		"nativeSrc": "9715:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "9715:3:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "9705:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "9705:2:8"
																},
																"nativeSrc": "9705:14:8",
																"nodeType": "YulFunctionCall",
																"src": "9705:14:8"
															},
															"nativeSrc": "9702:40:8",
															"nodeType": "YulIf",
															"src": "9702:40:8"
														},
														{
															"nativeSrc": "9755:5:8",
															"nodeType": "YulLeave",
															"src": "9755:5:8"
														}
													]
												},
												"nativeSrc": "9579:191:8",
												"nodeType": "YulCase",
												"src": "9579:191:8",
												"value": {
													"kind": "number",
													"nativeSrc": "9584:1:8",
													"nodeType": "YulLiteral",
													"src": "9584:1:8",
													"type": "",
													"value": "2"
												}
											}
										],
										"expression": {
											"name": "base",
											"nativeSrc": "9500:4:8",
											"nodeType": "YulIdentifier",
											"src": "9500:4:8"
										},
										"nativeSrc": "9493:277:8",
										"nodeType": "YulSwitch",
										"src": "9493:277:8"
									},
									{
										"body": {
											"nativeSrc": "9902:123:8",
											"nodeType": "YulBlock",
											"src": "9902:123:8",
											"statements": [
												{
													"nativeSrc": "9916:28:8",
													"nodeType": "YulAssignment",
													"src": "9916:28:8",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "9929:4:8",
																"nodeType": "YulIdentifier",
																"src": "9929:4:8"
															},
															{
																"name": "exponent",
																"nativeSrc": "9935:8:8",
																"nodeType": "YulIdentifier",
																"src": "9935:8:8"
															}
														],
														"functionName": {
															"name": "exp",
															"nativeSrc": "9925:3:8",
															"nodeType": "YulIdentifier",
															"src": "9925:3:8"
														},
														"nativeSrc": "9925:19:8",
														"nodeType": "YulFunctionCall",
														"src": "9925:19:8"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "9916:5:8",
															"nodeType": "YulIdentifier",
															"src": "9916:5:8"
														}
													]
												},
												{
													"body": {
														"nativeSrc": "9975:22:8",
														"nodeType": "YulBlock",
														"src": "9975:22:8",
														"statements": [
															{
																"expression": {
																	"arguments": [],
																	"functionName": {
																		"name": "panic_error_0x11",
																		"nativeSrc": "9977:16:8",
																		"nodeType": "YulIdentifier",
																		"src": "9977:16:8"
																	},
																	"nativeSrc": "9977:18:8",
																	"nodeType": "YulFunctionCall",
																	"src": "9977:18:8"
																},
																"nativeSrc": "9977:18:8",
																"nodeType": "YulExpressionStatement",
																"src": "9977:18:8"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "power",
																"nativeSrc": "9963:5:8",
																"nodeType": "YulIdentifier",
																"src": "9963:5:8"
															},
															{
																"name": "max",
																"nativeSrc": "9970:3:8",
																"nodeType": "YulIdentifier",
																"src": "9970:3:8"
															}
														],
														"functionName": {
															"name": "gt",
															"nativeSrc": "9960:2:8",
															"nodeType": "YulIdentifier",
															"src": "9960:2:8"
														},
														"nativeSrc": "9960:14:8",
														"nodeType": "YulFunctionCall",
														"src": "9960:14:8"
													},
													"nativeSrc": "9957:40:8",
													"nodeType": "YulIf",
													"src": "9957:40:8"
												},
												{
													"nativeSrc": "10010:5:8",
													"nodeType": "YulLeave",
													"src": "10010:5:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "9805:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "9805:4:8"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9811:2:8",
																	"nodeType": "YulLiteral",
																	"src": "9811:2:8",
																	"type": "",
																	"value": "11"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "9802:2:8",
																"nodeType": "YulIdentifier",
																"src": "9802:2:8"
															},
															"nativeSrc": "9802:12:8",
															"nodeType": "YulFunctionCall",
															"src": "9802:12:8"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "9819:8:8",
																	"nodeType": "YulIdentifier",
																	"src": "9819:8:8"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9829:2:8",
																	"nodeType": "YulLiteral",
																	"src": "9829:2:8",
																	"type": "",
																	"value": "78"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "9816:2:8",
																"nodeType": "YulIdentifier",
																"src": "9816:2:8"
															},
															"nativeSrc": "9816:16:8",
															"nodeType": "YulFunctionCall",
															"src": "9816:16:8"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9798:3:8",
														"nodeType": "YulIdentifier",
														"src": "9798:3:8"
													},
													"nativeSrc": "9798:35:8",
													"nodeType": "YulFunctionCall",
													"src": "9798:35:8"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "9854:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "9854:4:8"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9860:3:8",
																	"nodeType": "YulLiteral",
																	"src": "9860:3:8",
																	"type": "",
																	"value": "307"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "9851:2:8",
																"nodeType": "YulIdentifier",
																"src": "9851:2:8"
															},
															"nativeSrc": "9851:13:8",
															"nodeType": "YulFunctionCall",
															"src": "9851:13:8"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "9869:8:8",
																	"nodeType": "YulIdentifier",
																	"src": "9869:8:8"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9879:2:8",
																	"nodeType": "YulLiteral",
																	"src": "9879:2:8",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "9866:2:8",
																"nodeType": "YulIdentifier",
																"src": "9866:2:8"
															},
															"nativeSrc": "9866:16:8",
															"nodeType": "YulFunctionCall",
															"src": "9866:16:8"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9847:3:8",
														"nodeType": "YulIdentifier",
														"src": "9847:3:8"
													},
													"nativeSrc": "9847:36:8",
													"nodeType": "YulFunctionCall",
													"src": "9847:36:8"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "9782:2:8",
												"nodeType": "YulIdentifier",
												"src": "9782:2:8"
											},
											"nativeSrc": "9782:111:8",
											"nodeType": "YulFunctionCall",
											"src": "9782:111:8"
										},
										"nativeSrc": "9779:246:8",
										"nodeType": "YulIf",
										"src": "9779:246:8"
									},
									{
										"nativeSrc": "10035:57:8",
										"nodeType": "YulAssignment",
										"src": "10035:57:8",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "10069:1:8",
													"nodeType": "YulLiteral",
													"src": "10069:1:8",
													"type": "",
													"value": "1"
												},
												{
													"name": "base",
													"nativeSrc": "10072:4:8",
													"nodeType": "YulIdentifier",
													"src": "10072:4:8"
												},
												{
													"name": "exponent",
													"nativeSrc": "10078:8:8",
													"nodeType": "YulIdentifier",
													"src": "10078:8:8"
												},
												{
													"name": "max",
													"nativeSrc": "10088:3:8",
													"nodeType": "YulIdentifier",
													"src": "10088:3:8"
												}
											],
											"functionName": {
												"name": "checked_exp_helper",
												"nativeSrc": "10050:18:8",
												"nodeType": "YulIdentifier",
												"src": "10050:18:8"
											},
											"nativeSrc": "10050:42:8",
											"nodeType": "YulFunctionCall",
											"src": "10050:42:8"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "10035:5:8",
												"nodeType": "YulIdentifier",
												"src": "10035:5:8"
											},
											{
												"name": "base",
												"nativeSrc": "10042:4:8",
												"nodeType": "YulIdentifier",
												"src": "10042:4:8"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "10131:22:8",
											"nodeType": "YulBlock",
											"src": "10131:22:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "10133:16:8",
															"nodeType": "YulIdentifier",
															"src": "10133:16:8"
														},
														"nativeSrc": "10133:18:8",
														"nodeType": "YulFunctionCall",
														"src": "10133:18:8"
													},
													"nativeSrc": "10133:18:8",
													"nodeType": "YulExpressionStatement",
													"src": "10133:18:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "power",
													"nativeSrc": "10108:5:8",
													"nodeType": "YulIdentifier",
													"src": "10108:5:8"
												},
												{
													"arguments": [
														{
															"name": "max",
															"nativeSrc": "10119:3:8",
															"nodeType": "YulIdentifier",
															"src": "10119:3:8"
														},
														{
															"name": "base",
															"nativeSrc": "10124:4:8",
															"nodeType": "YulIdentifier",
															"src": "10124:4:8"
														}
													],
													"functionName": {
														"name": "div",
														"nativeSrc": "10115:3:8",
														"nodeType": "YulIdentifier",
														"src": "10115:3:8"
													},
													"nativeSrc": "10115:14:8",
													"nodeType": "YulFunctionCall",
													"src": "10115:14:8"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "10105:2:8",
												"nodeType": "YulIdentifier",
												"src": "10105:2:8"
											},
											"nativeSrc": "10105:25:8",
											"nodeType": "YulFunctionCall",
											"src": "10105:25:8"
										},
										"nativeSrc": "10102:51:8",
										"nodeType": "YulIf",
										"src": "10102:51:8"
									},
									{
										"nativeSrc": "10162:25:8",
										"nodeType": "YulAssignment",
										"src": "10162:25:8",
										"value": {
											"arguments": [
												{
													"name": "power",
													"nativeSrc": "10175:5:8",
													"nodeType": "YulIdentifier",
													"src": "10175:5:8"
												},
												{
													"name": "base",
													"nativeSrc": "10182:4:8",
													"nodeType": "YulIdentifier",
													"src": "10182:4:8"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "10171:3:8",
												"nodeType": "YulIdentifier",
												"src": "10171:3:8"
											},
											"nativeSrc": "10171:16:8",
											"nodeType": "YulFunctionCall",
											"src": "10171:16:8"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "10162:5:8",
												"nodeType": "YulIdentifier",
												"src": "10162:5:8"
											}
										]
									}
								]
							},
							"name": "checked_exp_unsigned",
							"nativeSrc": "9120:1073:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "9150:4:8",
									"nodeType": "YulTypedName",
									"src": "9150:4:8",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "9156:8:8",
									"nodeType": "YulTypedName",
									"src": "9156:8:8",
									"type": ""
								},
								{
									"name": "max",
									"nativeSrc": "9166:3:8",
									"nodeType": "YulTypedName",
									"src": "9166:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "9174:5:8",
									"nodeType": "YulTypedName",
									"src": "9174:5:8",
									"type": ""
								}
							],
							"src": "9120:1073:8"
						},
						{
							"body": {
								"nativeSrc": "10263:217:8",
								"nodeType": "YulBlock",
								"src": "10263:217:8",
								"statements": [
									{
										"nativeSrc": "10273:31:8",
										"nodeType": "YulAssignment",
										"src": "10273:31:8",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "10299:4:8",
													"nodeType": "YulIdentifier",
													"src": "10299:4:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "10281:17:8",
												"nodeType": "YulIdentifier",
												"src": "10281:17:8"
											},
											"nativeSrc": "10281:23:8",
											"nodeType": "YulFunctionCall",
											"src": "10281:23:8"
										},
										"variableNames": [
											{
												"name": "base",
												"nativeSrc": "10273:4:8",
												"nodeType": "YulIdentifier",
												"src": "10273:4:8"
											}
										]
									},
									{
										"nativeSrc": "10313:37:8",
										"nodeType": "YulAssignment",
										"src": "10313:37:8",
										"value": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "10341:8:8",
													"nodeType": "YulIdentifier",
													"src": "10341:8:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint8",
												"nativeSrc": "10325:15:8",
												"nodeType": "YulIdentifier",
												"src": "10325:15:8"
											},
											"nativeSrc": "10325:25:8",
											"nodeType": "YulFunctionCall",
											"src": "10325:25:8"
										},
										"variableNames": [
											{
												"name": "exponent",
												"nativeSrc": "10313:8:8",
												"nodeType": "YulIdentifier",
												"src": "10313:8:8"
											}
										]
									},
									{
										"nativeSrc": "10360:113:8",
										"nodeType": "YulAssignment",
										"src": "10360:113:8",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "10390:4:8",
													"nodeType": "YulIdentifier",
													"src": "10390:4:8"
												},
												{
													"name": "exponent",
													"nativeSrc": "10396:8:8",
													"nodeType": "YulIdentifier",
													"src": "10396:8:8"
												},
												{
													"kind": "number",
													"nativeSrc": "10406:66:8",
													"nodeType": "YulLiteral",
													"src": "10406:66:8",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "checked_exp_unsigned",
												"nativeSrc": "10369:20:8",
												"nodeType": "YulIdentifier",
												"src": "10369:20:8"
											},
											"nativeSrc": "10369:104:8",
											"nodeType": "YulFunctionCall",
											"src": "10369:104:8"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "10360:5:8",
												"nodeType": "YulIdentifier",
												"src": "10360:5:8"
											}
										]
									}
								]
							},
							"name": "checked_exp_t_uint256_t_uint8",
							"nativeSrc": "10199:281:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "10238:4:8",
									"nodeType": "YulTypedName",
									"src": "10238:4:8",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "10244:8:8",
									"nodeType": "YulTypedName",
									"src": "10244:8:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "10257:5:8",
									"nodeType": "YulTypedName",
									"src": "10257:5:8",
									"type": ""
								}
							],
							"src": "10199:281:8"
						},
						{
							"body": {
								"nativeSrc": "10534:362:8",
								"nodeType": "YulBlock",
								"src": "10534:362:8",
								"statements": [
									{
										"nativeSrc": "10544:25:8",
										"nodeType": "YulAssignment",
										"src": "10544:25:8",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "10567:1:8",
													"nodeType": "YulIdentifier",
													"src": "10567:1:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "10549:17:8",
												"nodeType": "YulIdentifier",
												"src": "10549:17:8"
											},
											"nativeSrc": "10549:20:8",
											"nodeType": "YulFunctionCall",
											"src": "10549:20:8"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "10544:1:8",
												"nodeType": "YulIdentifier",
												"src": "10544:1:8"
											}
										]
									},
									{
										"nativeSrc": "10578:25:8",
										"nodeType": "YulAssignment",
										"src": "10578:25:8",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "10601:1:8",
													"nodeType": "YulIdentifier",
													"src": "10601:1:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "10583:17:8",
												"nodeType": "YulIdentifier",
												"src": "10583:17:8"
											},
											"nativeSrc": "10583:20:8",
											"nodeType": "YulFunctionCall",
											"src": "10583:20:8"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "10578:1:8",
												"nodeType": "YulIdentifier",
												"src": "10578:1:8"
											}
										]
									},
									{
										"nativeSrc": "10612:28:8",
										"nodeType": "YulVariableDeclaration",
										"src": "10612:28:8",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "10635:1:8",
													"nodeType": "YulIdentifier",
													"src": "10635:1:8"
												},
												{
													"name": "y",
													"nativeSrc": "10638:1:8",
													"nodeType": "YulIdentifier",
													"src": "10638:1:8"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "10631:3:8",
												"nodeType": "YulIdentifier",
												"src": "10631:3:8"
											},
											"nativeSrc": "10631:9:8",
											"nodeType": "YulFunctionCall",
											"src": "10631:9:8"
										},
										"variables": [
											{
												"name": "product_raw",
												"nativeSrc": "10616:11:8",
												"nodeType": "YulTypedName",
												"src": "10616:11:8",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "10649:41:8",
										"nodeType": "YulAssignment",
										"src": "10649:41:8",
										"value": {
											"arguments": [
												{
													"name": "product_raw",
													"nativeSrc": "10678:11:8",
													"nodeType": "YulIdentifier",
													"src": "10678:11:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "10660:17:8",
												"nodeType": "YulIdentifier",
												"src": "10660:17:8"
											},
											"nativeSrc": "10660:30:8",
											"nodeType": "YulFunctionCall",
											"src": "10660:30:8"
										},
										"variableNames": [
											{
												"name": "product",
												"nativeSrc": "10649:7:8",
												"nodeType": "YulIdentifier",
												"src": "10649:7:8"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "10867:22:8",
											"nodeType": "YulBlock",
											"src": "10867:22:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "10869:16:8",
															"nodeType": "YulIdentifier",
															"src": "10869:16:8"
														},
														"nativeSrc": "10869:18:8",
														"nodeType": "YulFunctionCall",
														"src": "10869:18:8"
													},
													"nativeSrc": "10869:18:8",
													"nodeType": "YulExpressionStatement",
													"src": "10869:18:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nativeSrc": "10800:1:8",
																	"nodeType": "YulIdentifier",
																	"src": "10800:1:8"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "10793:6:8",
																"nodeType": "YulIdentifier",
																"src": "10793:6:8"
															},
															"nativeSrc": "10793:9:8",
															"nodeType": "YulFunctionCall",
															"src": "10793:9:8"
														},
														{
															"arguments": [
																{
																	"name": "y",
																	"nativeSrc": "10823:1:8",
																	"nodeType": "YulIdentifier",
																	"src": "10823:1:8"
																},
																{
																	"arguments": [
																		{
																			"name": "product",
																			"nativeSrc": "10830:7:8",
																			"nodeType": "YulIdentifier",
																			"src": "10830:7:8"
																		},
																		{
																			"name": "x",
																			"nativeSrc": "10839:1:8",
																			"nodeType": "YulIdentifier",
																			"src": "10839:1:8"
																		}
																	],
																	"functionName": {
																		"name": "div",
																		"nativeSrc": "10826:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "10826:3:8"
																	},
																	"nativeSrc": "10826:15:8",
																	"nodeType": "YulFunctionCall",
																	"src": "10826:15:8"
																}
															],
															"functionName": {
																"name": "eq",
																"nativeSrc": "10820:2:8",
																"nodeType": "YulIdentifier",
																"src": "10820:2:8"
															},
															"nativeSrc": "10820:22:8",
															"nodeType": "YulFunctionCall",
															"src": "10820:22:8"
														}
													],
													"functionName": {
														"name": "or",
														"nativeSrc": "10773:2:8",
														"nodeType": "YulIdentifier",
														"src": "10773:2:8"
													},
													"nativeSrc": "10773:83:8",
													"nodeType": "YulFunctionCall",
													"src": "10773:83:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "10753:6:8",
												"nodeType": "YulIdentifier",
												"src": "10753:6:8"
											},
											"nativeSrc": "10753:113:8",
											"nodeType": "YulFunctionCall",
											"src": "10753:113:8"
										},
										"nativeSrc": "10750:139:8",
										"nodeType": "YulIf",
										"src": "10750:139:8"
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nativeSrc": "10486:410:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "10517:1:8",
									"nodeType": "YulTypedName",
									"src": "10517:1:8",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "10520:1:8",
									"nodeType": "YulTypedName",
									"src": "10520:1:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nativeSrc": "10526:7:8",
									"nodeType": "YulTypedName",
									"src": "10526:7:8",
									"type": ""
								}
							],
							"src": "10486:410:8"
						},
						{
							"body": {
								"nativeSrc": "10930:152:8",
								"nodeType": "YulBlock",
								"src": "10930:152:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "10947:1:8",
													"nodeType": "YulLiteral",
													"src": "10947:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "10950:77:8",
													"nodeType": "YulLiteral",
													"src": "10950:77:8",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10940:6:8",
												"nodeType": "YulIdentifier",
												"src": "10940:6:8"
											},
											"nativeSrc": "10940:88:8",
											"nodeType": "YulFunctionCall",
											"src": "10940:88:8"
										},
										"nativeSrc": "10940:88:8",
										"nodeType": "YulExpressionStatement",
										"src": "10940:88:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "11044:1:8",
													"nodeType": "YulLiteral",
													"src": "11044:1:8",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "11047:4:8",
													"nodeType": "YulLiteral",
													"src": "11047:4:8",
													"type": "",
													"value": "0x12"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11037:6:8",
												"nodeType": "YulIdentifier",
												"src": "11037:6:8"
											},
											"nativeSrc": "11037:15:8",
											"nodeType": "YulFunctionCall",
											"src": "11037:15:8"
										},
										"nativeSrc": "11037:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "11037:15:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "11068:1:8",
													"nodeType": "YulLiteral",
													"src": "11068:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "11071:4:8",
													"nodeType": "YulLiteral",
													"src": "11071:4:8",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "11061:6:8",
												"nodeType": "YulIdentifier",
												"src": "11061:6:8"
											},
											"nativeSrc": "11061:15:8",
											"nodeType": "YulFunctionCall",
											"src": "11061:15:8"
										},
										"nativeSrc": "11061:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "11061:15:8"
									}
								]
							},
							"name": "panic_error_0x12",
							"nativeSrc": "10902:180:8",
							"nodeType": "YulFunctionDefinition",
							"src": "10902:180:8"
						},
						{
							"body": {
								"nativeSrc": "11130:143:8",
								"nodeType": "YulBlock",
								"src": "11130:143:8",
								"statements": [
									{
										"nativeSrc": "11140:25:8",
										"nodeType": "YulAssignment",
										"src": "11140:25:8",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "11163:1:8",
													"nodeType": "YulIdentifier",
													"src": "11163:1:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "11145:17:8",
												"nodeType": "YulIdentifier",
												"src": "11145:17:8"
											},
											"nativeSrc": "11145:20:8",
											"nodeType": "YulFunctionCall",
											"src": "11145:20:8"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "11140:1:8",
												"nodeType": "YulIdentifier",
												"src": "11140:1:8"
											}
										]
									},
									{
										"nativeSrc": "11174:25:8",
										"nodeType": "YulAssignment",
										"src": "11174:25:8",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "11197:1:8",
													"nodeType": "YulIdentifier",
													"src": "11197:1:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "11179:17:8",
												"nodeType": "YulIdentifier",
												"src": "11179:17:8"
											},
											"nativeSrc": "11179:20:8",
											"nodeType": "YulFunctionCall",
											"src": "11179:20:8"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "11174:1:8",
												"nodeType": "YulIdentifier",
												"src": "11174:1:8"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "11221:22:8",
											"nodeType": "YulBlock",
											"src": "11221:22:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x12",
															"nativeSrc": "11223:16:8",
															"nodeType": "YulIdentifier",
															"src": "11223:16:8"
														},
														"nativeSrc": "11223:18:8",
														"nodeType": "YulFunctionCall",
														"src": "11223:18:8"
													},
													"nativeSrc": "11223:18:8",
													"nodeType": "YulExpressionStatement",
													"src": "11223:18:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "11218:1:8",
													"nodeType": "YulIdentifier",
													"src": "11218:1:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "11211:6:8",
												"nodeType": "YulIdentifier",
												"src": "11211:6:8"
											},
											"nativeSrc": "11211:9:8",
											"nodeType": "YulFunctionCall",
											"src": "11211:9:8"
										},
										"nativeSrc": "11208:35:8",
										"nodeType": "YulIf",
										"src": "11208:35:8"
									},
									{
										"nativeSrc": "11253:14:8",
										"nodeType": "YulAssignment",
										"src": "11253:14:8",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "11262:1:8",
													"nodeType": "YulIdentifier",
													"src": "11262:1:8"
												},
												{
													"name": "y",
													"nativeSrc": "11265:1:8",
													"nodeType": "YulIdentifier",
													"src": "11265:1:8"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "11258:3:8",
												"nodeType": "YulIdentifier",
												"src": "11258:3:8"
											},
											"nativeSrc": "11258:9:8",
											"nodeType": "YulFunctionCall",
											"src": "11258:9:8"
										},
										"variableNames": [
											{
												"name": "r",
												"nativeSrc": "11253:1:8",
												"nodeType": "YulIdentifier",
												"src": "11253:1:8"
											}
										]
									}
								]
							},
							"name": "checked_div_t_uint256",
							"nativeSrc": "11088:185:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "11119:1:8",
									"nodeType": "YulTypedName",
									"src": "11119:1:8",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "11122:1:8",
									"nodeType": "YulTypedName",
									"src": "11122:1:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "r",
									"nativeSrc": "11128:1:8",
									"nodeType": "YulTypedName",
									"src": "11128:1:8",
									"type": ""
								}
							],
							"src": "11088:185:8"
						},
						{
							"body": {
								"nativeSrc": "11385:58:8",
								"nodeType": "YulBlock",
								"src": "11385:58:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "11407:6:8",
															"nodeType": "YulIdentifier",
															"src": "11407:6:8"
														},
														{
															"kind": "number",
															"nativeSrc": "11415:1:8",
															"nodeType": "YulLiteral",
															"src": "11415:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11403:3:8",
														"nodeType": "YulIdentifier",
														"src": "11403:3:8"
													},
													"nativeSrc": "11403:14:8",
													"nodeType": "YulFunctionCall",
													"src": "11403:14:8"
												},
												{
													"hexValue": "746f6f206c6974746c6520455448",
													"kind": "string",
													"nativeSrc": "11419:16:8",
													"nodeType": "YulLiteral",
													"src": "11419:16:8",
													"type": "",
													"value": "too little ETH"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11396:6:8",
												"nodeType": "YulIdentifier",
												"src": "11396:6:8"
											},
											"nativeSrc": "11396:40:8",
											"nodeType": "YulFunctionCall",
											"src": "11396:40:8"
										},
										"nativeSrc": "11396:40:8",
										"nodeType": "YulExpressionStatement",
										"src": "11396:40:8"
									}
								]
							},
							"name": "store_literal_in_memory_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6",
							"nativeSrc": "11279:164:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "11377:6:8",
									"nodeType": "YulTypedName",
									"src": "11377:6:8",
									"type": ""
								}
							],
							"src": "11279:164:8"
						},
						{
							"body": {
								"nativeSrc": "11595:220:8",
								"nodeType": "YulBlock",
								"src": "11595:220:8",
								"statements": [
									{
										"nativeSrc": "11605:74:8",
										"nodeType": "YulAssignment",
										"src": "11605:74:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "11671:3:8",
													"nodeType": "YulIdentifier",
													"src": "11671:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "11676:2:8",
													"nodeType": "YulLiteral",
													"src": "11676:2:8",
													"type": "",
													"value": "14"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "11612:58:8",
												"nodeType": "YulIdentifier",
												"src": "11612:58:8"
											},
											"nativeSrc": "11612:67:8",
											"nodeType": "YulFunctionCall",
											"src": "11612:67:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "11605:3:8",
												"nodeType": "YulIdentifier",
												"src": "11605:3:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "11777:3:8",
													"nodeType": "YulIdentifier",
													"src": "11777:3:8"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6",
												"nativeSrc": "11688:88:8",
												"nodeType": "YulIdentifier",
												"src": "11688:88:8"
											},
											"nativeSrc": "11688:93:8",
											"nodeType": "YulFunctionCall",
											"src": "11688:93:8"
										},
										"nativeSrc": "11688:93:8",
										"nodeType": "YulExpressionStatement",
										"src": "11688:93:8"
									},
									{
										"nativeSrc": "11790:19:8",
										"nodeType": "YulAssignment",
										"src": "11790:19:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "11801:3:8",
													"nodeType": "YulIdentifier",
													"src": "11801:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "11806:2:8",
													"nodeType": "YulLiteral",
													"src": "11806:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "11797:3:8",
												"nodeType": "YulIdentifier",
												"src": "11797:3:8"
											},
											"nativeSrc": "11797:12:8",
											"nodeType": "YulFunctionCall",
											"src": "11797:12:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "11790:3:8",
												"nodeType": "YulIdentifier",
												"src": "11790:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "11449:366:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "11583:3:8",
									"nodeType": "YulTypedName",
									"src": "11583:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "11591:3:8",
									"nodeType": "YulTypedName",
									"src": "11591:3:8",
									"type": ""
								}
							],
							"src": "11449:366:8"
						},
						{
							"body": {
								"nativeSrc": "11992:248:8",
								"nodeType": "YulBlock",
								"src": "11992:248:8",
								"statements": [
									{
										"nativeSrc": "12002:26:8",
										"nodeType": "YulAssignment",
										"src": "12002:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12014:9:8",
													"nodeType": "YulIdentifier",
													"src": "12014:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "12025:2:8",
													"nodeType": "YulLiteral",
													"src": "12025:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12010:3:8",
												"nodeType": "YulIdentifier",
												"src": "12010:3:8"
											},
											"nativeSrc": "12010:18:8",
											"nodeType": "YulFunctionCall",
											"src": "12010:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12002:4:8",
												"nodeType": "YulIdentifier",
												"src": "12002:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12049:9:8",
															"nodeType": "YulIdentifier",
															"src": "12049:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "12060:1:8",
															"nodeType": "YulLiteral",
															"src": "12060:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12045:3:8",
														"nodeType": "YulIdentifier",
														"src": "12045:3:8"
													},
													"nativeSrc": "12045:17:8",
													"nodeType": "YulFunctionCall",
													"src": "12045:17:8"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "12068:4:8",
															"nodeType": "YulIdentifier",
															"src": "12068:4:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "12074:9:8",
															"nodeType": "YulIdentifier",
															"src": "12074:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "12064:3:8",
														"nodeType": "YulIdentifier",
														"src": "12064:3:8"
													},
													"nativeSrc": "12064:20:8",
													"nodeType": "YulFunctionCall",
													"src": "12064:20:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12038:6:8",
												"nodeType": "YulIdentifier",
												"src": "12038:6:8"
											},
											"nativeSrc": "12038:47:8",
											"nodeType": "YulFunctionCall",
											"src": "12038:47:8"
										},
										"nativeSrc": "12038:47:8",
										"nodeType": "YulExpressionStatement",
										"src": "12038:47:8"
									},
									{
										"nativeSrc": "12094:139:8",
										"nodeType": "YulAssignment",
										"src": "12094:139:8",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "12228:4:8",
													"nodeType": "YulIdentifier",
													"src": "12228:4:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "12102:124:8",
												"nodeType": "YulIdentifier",
												"src": "12102:124:8"
											},
											"nativeSrc": "12102:131:8",
											"nodeType": "YulFunctionCall",
											"src": "12102:131:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12094:4:8",
												"nodeType": "YulIdentifier",
												"src": "12094:4:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "11821:419:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "11972:9:8",
									"nodeType": "YulTypedName",
									"src": "11972:9:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "11987:4:8",
									"nodeType": "YulTypedName",
									"src": "11987:4:8",
									"type": ""
								}
							],
							"src": "11821:419:8"
						},
						{
							"body": {
								"nativeSrc": "12372:206:8",
								"nodeType": "YulBlock",
								"src": "12372:206:8",
								"statements": [
									{
										"nativeSrc": "12382:26:8",
										"nodeType": "YulAssignment",
										"src": "12382:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12394:9:8",
													"nodeType": "YulIdentifier",
													"src": "12394:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "12405:2:8",
													"nodeType": "YulLiteral",
													"src": "12405:2:8",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12390:3:8",
												"nodeType": "YulIdentifier",
												"src": "12390:3:8"
											},
											"nativeSrc": "12390:18:8",
											"nodeType": "YulFunctionCall",
											"src": "12390:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12382:4:8",
												"nodeType": "YulIdentifier",
												"src": "12382:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "12462:6:8",
													"nodeType": "YulIdentifier",
													"src": "12462:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12475:9:8",
															"nodeType": "YulIdentifier",
															"src": "12475:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "12486:1:8",
															"nodeType": "YulLiteral",
															"src": "12486:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12471:3:8",
														"nodeType": "YulIdentifier",
														"src": "12471:3:8"
													},
													"nativeSrc": "12471:17:8",
													"nodeType": "YulFunctionCall",
													"src": "12471:17:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "12418:43:8",
												"nodeType": "YulIdentifier",
												"src": "12418:43:8"
											},
											"nativeSrc": "12418:71:8",
											"nodeType": "YulFunctionCall",
											"src": "12418:71:8"
										},
										"nativeSrc": "12418:71:8",
										"nodeType": "YulExpressionStatement",
										"src": "12418:71:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "12543:6:8",
													"nodeType": "YulIdentifier",
													"src": "12543:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12556:9:8",
															"nodeType": "YulIdentifier",
															"src": "12556:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "12567:2:8",
															"nodeType": "YulLiteral",
															"src": "12567:2:8",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12552:3:8",
														"nodeType": "YulIdentifier",
														"src": "12552:3:8"
													},
													"nativeSrc": "12552:18:8",
													"nodeType": "YulFunctionCall",
													"src": "12552:18:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "12499:43:8",
												"nodeType": "YulIdentifier",
												"src": "12499:43:8"
											},
											"nativeSrc": "12499:72:8",
											"nodeType": "YulFunctionCall",
											"src": "12499:72:8"
										},
										"nativeSrc": "12499:72:8",
										"nodeType": "YulExpressionStatement",
										"src": "12499:72:8"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "12246:332:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12336:9:8",
									"nodeType": "YulTypedName",
									"src": "12336:9:8",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "12348:6:8",
									"nodeType": "YulTypedName",
									"src": "12348:6:8",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "12356:6:8",
									"nodeType": "YulTypedName",
									"src": "12356:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "12367:4:8",
									"nodeType": "YulTypedName",
									"src": "12367:4:8",
									"type": ""
								}
							],
							"src": "12246:332:8"
						},
						{
							"body": {
								"nativeSrc": "12612:152:8",
								"nodeType": "YulBlock",
								"src": "12612:152:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12629:1:8",
													"nodeType": "YulLiteral",
													"src": "12629:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "12632:77:8",
													"nodeType": "YulLiteral",
													"src": "12632:77:8",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12622:6:8",
												"nodeType": "YulIdentifier",
												"src": "12622:6:8"
											},
											"nativeSrc": "12622:88:8",
											"nodeType": "YulFunctionCall",
											"src": "12622:88:8"
										},
										"nativeSrc": "12622:88:8",
										"nodeType": "YulExpressionStatement",
										"src": "12622:88:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12726:1:8",
													"nodeType": "YulLiteral",
													"src": "12726:1:8",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "12729:4:8",
													"nodeType": "YulLiteral",
													"src": "12729:4:8",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12719:6:8",
												"nodeType": "YulIdentifier",
												"src": "12719:6:8"
											},
											"nativeSrc": "12719:15:8",
											"nodeType": "YulFunctionCall",
											"src": "12719:15:8"
										},
										"nativeSrc": "12719:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "12719:15:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12750:1:8",
													"nodeType": "YulLiteral",
													"src": "12750:1:8",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "12753:4:8",
													"nodeType": "YulLiteral",
													"src": "12753:4:8",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "12743:6:8",
												"nodeType": "YulIdentifier",
												"src": "12743:6:8"
											},
											"nativeSrc": "12743:15:8",
											"nodeType": "YulFunctionCall",
											"src": "12743:15:8"
										},
										"nativeSrc": "12743:15:8",
										"nodeType": "YulExpressionStatement",
										"src": "12743:15:8"
									}
								]
							},
							"name": "panic_error_0x22",
							"nativeSrc": "12584:180:8",
							"nodeType": "YulFunctionDefinition",
							"src": "12584:180:8"
						},
						{
							"body": {
								"nativeSrc": "12821:269:8",
								"nodeType": "YulBlock",
								"src": "12821:269:8",
								"statements": [
									{
										"nativeSrc": "12831:22:8",
										"nodeType": "YulAssignment",
										"src": "12831:22:8",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "12845:4:8",
													"nodeType": "YulIdentifier",
													"src": "12845:4:8"
												},
												{
													"kind": "number",
													"nativeSrc": "12851:1:8",
													"nodeType": "YulLiteral",
													"src": "12851:1:8",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "12841:3:8",
												"nodeType": "YulIdentifier",
												"src": "12841:3:8"
											},
											"nativeSrc": "12841:12:8",
											"nodeType": "YulFunctionCall",
											"src": "12841:12:8"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "12831:6:8",
												"nodeType": "YulIdentifier",
												"src": "12831:6:8"
											}
										]
									},
									{
										"nativeSrc": "12862:38:8",
										"nodeType": "YulVariableDeclaration",
										"src": "12862:38:8",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "12892:4:8",
													"nodeType": "YulIdentifier",
													"src": "12892:4:8"
												},
												{
													"kind": "number",
													"nativeSrc": "12898:1:8",
													"nodeType": "YulLiteral",
													"src": "12898:1:8",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "12888:3:8",
												"nodeType": "YulIdentifier",
												"src": "12888:3:8"
											},
											"nativeSrc": "12888:12:8",
											"nodeType": "YulFunctionCall",
											"src": "12888:12:8"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "12866:18:8",
												"nodeType": "YulTypedName",
												"src": "12866:18:8",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "12939:51:8",
											"nodeType": "YulBlock",
											"src": "12939:51:8",
											"statements": [
												{
													"nativeSrc": "12953:27:8",
													"nodeType": "YulAssignment",
													"src": "12953:27:8",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "12967:6:8",
																"nodeType": "YulIdentifier",
																"src": "12967:6:8"
															},
															{
																"kind": "number",
																"nativeSrc": "12975:4:8",
																"nodeType": "YulLiteral",
																"src": "12975:4:8",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "12963:3:8",
															"nodeType": "YulIdentifier",
															"src": "12963:3:8"
														},
														"nativeSrc": "12963:17:8",
														"nodeType": "YulFunctionCall",
														"src": "12963:17:8"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "12953:6:8",
															"nodeType": "YulIdentifier",
															"src": "12953:6:8"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "12919:18:8",
													"nodeType": "YulIdentifier",
													"src": "12919:18:8"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "12912:6:8",
												"nodeType": "YulIdentifier",
												"src": "12912:6:8"
											},
											"nativeSrc": "12912:26:8",
											"nodeType": "YulFunctionCall",
											"src": "12912:26:8"
										},
										"nativeSrc": "12909:81:8",
										"nodeType": "YulIf",
										"src": "12909:81:8"
									},
									{
										"body": {
											"nativeSrc": "13042:42:8",
											"nodeType": "YulBlock",
											"src": "13042:42:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nativeSrc": "13056:16:8",
															"nodeType": "YulIdentifier",
															"src": "13056:16:8"
														},
														"nativeSrc": "13056:18:8",
														"nodeType": "YulFunctionCall",
														"src": "13056:18:8"
													},
													"nativeSrc": "13056:18:8",
													"nodeType": "YulExpressionStatement",
													"src": "13056:18:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "13006:18:8",
													"nodeType": "YulIdentifier",
													"src": "13006:18:8"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "13029:6:8",
															"nodeType": "YulIdentifier",
															"src": "13029:6:8"
														},
														{
															"kind": "number",
															"nativeSrc": "13037:2:8",
															"nodeType": "YulLiteral",
															"src": "13037:2:8",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "13026:2:8",
														"nodeType": "YulIdentifier",
														"src": "13026:2:8"
													},
													"nativeSrc": "13026:14:8",
													"nodeType": "YulFunctionCall",
													"src": "13026:14:8"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "13003:2:8",
												"nodeType": "YulIdentifier",
												"src": "13003:2:8"
											},
											"nativeSrc": "13003:38:8",
											"nodeType": "YulFunctionCall",
											"src": "13003:38:8"
										},
										"nativeSrc": "13000:84:8",
										"nodeType": "YulIf",
										"src": "13000:84:8"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "12770:320:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "12805:4:8",
									"nodeType": "YulTypedName",
									"src": "12805:4:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "12814:6:8",
									"nodeType": "YulTypedName",
									"src": "12814:6:8",
									"type": ""
								}
							],
							"src": "12770:320:8"
						},
						{
							"body": {
								"nativeSrc": "13202:48:8",
								"nodeType": "YulBlock",
								"src": "13202:48:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "13224:6:8",
															"nodeType": "YulIdentifier",
															"src": "13224:6:8"
														},
														{
															"kind": "number",
															"nativeSrc": "13232:1:8",
															"nodeType": "YulLiteral",
															"src": "13232:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13220:3:8",
														"nodeType": "YulIdentifier",
														"src": "13220:3:8"
													},
													"nativeSrc": "13220:14:8",
													"nodeType": "YulFunctionCall",
													"src": "13220:14:8"
												},
												{
													"hexValue": "746f3d30",
													"kind": "string",
													"nativeSrc": "13236:6:8",
													"nodeType": "YulLiteral",
													"src": "13236:6:8",
													"type": "",
													"value": "to=0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13213:6:8",
												"nodeType": "YulIdentifier",
												"src": "13213:6:8"
											},
											"nativeSrc": "13213:30:8",
											"nodeType": "YulFunctionCall",
											"src": "13213:30:8"
										},
										"nativeSrc": "13213:30:8",
										"nodeType": "YulExpressionStatement",
										"src": "13213:30:8"
									}
								]
							},
							"name": "store_literal_in_memory_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
							"nativeSrc": "13096:154:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "13194:6:8",
									"nodeType": "YulTypedName",
									"src": "13194:6:8",
									"type": ""
								}
							],
							"src": "13096:154:8"
						},
						{
							"body": {
								"nativeSrc": "13402:219:8",
								"nodeType": "YulBlock",
								"src": "13402:219:8",
								"statements": [
									{
										"nativeSrc": "13412:73:8",
										"nodeType": "YulAssignment",
										"src": "13412:73:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "13478:3:8",
													"nodeType": "YulIdentifier",
													"src": "13478:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "13483:1:8",
													"nodeType": "YulLiteral",
													"src": "13483:1:8",
													"type": "",
													"value": "4"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "13419:58:8",
												"nodeType": "YulIdentifier",
												"src": "13419:58:8"
											},
											"nativeSrc": "13419:66:8",
											"nodeType": "YulFunctionCall",
											"src": "13419:66:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "13412:3:8",
												"nodeType": "YulIdentifier",
												"src": "13412:3:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "13583:3:8",
													"nodeType": "YulIdentifier",
													"src": "13583:3:8"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
												"nativeSrc": "13494:88:8",
												"nodeType": "YulIdentifier",
												"src": "13494:88:8"
											},
											"nativeSrc": "13494:93:8",
											"nodeType": "YulFunctionCall",
											"src": "13494:93:8"
										},
										"nativeSrc": "13494:93:8",
										"nodeType": "YulExpressionStatement",
										"src": "13494:93:8"
									},
									{
										"nativeSrc": "13596:19:8",
										"nodeType": "YulAssignment",
										"src": "13596:19:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "13607:3:8",
													"nodeType": "YulIdentifier",
													"src": "13607:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "13612:2:8",
													"nodeType": "YulLiteral",
													"src": "13612:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13603:3:8",
												"nodeType": "YulIdentifier",
												"src": "13603:3:8"
											},
											"nativeSrc": "13603:12:8",
											"nodeType": "YulFunctionCall",
											"src": "13603:12:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "13596:3:8",
												"nodeType": "YulIdentifier",
												"src": "13596:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "13256:365:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "13390:3:8",
									"nodeType": "YulTypedName",
									"src": "13390:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "13398:3:8",
									"nodeType": "YulTypedName",
									"src": "13398:3:8",
									"type": ""
								}
							],
							"src": "13256:365:8"
						},
						{
							"body": {
								"nativeSrc": "13798:248:8",
								"nodeType": "YulBlock",
								"src": "13798:248:8",
								"statements": [
									{
										"nativeSrc": "13808:26:8",
										"nodeType": "YulAssignment",
										"src": "13808:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13820:9:8",
													"nodeType": "YulIdentifier",
													"src": "13820:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "13831:2:8",
													"nodeType": "YulLiteral",
													"src": "13831:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13816:3:8",
												"nodeType": "YulIdentifier",
												"src": "13816:3:8"
											},
											"nativeSrc": "13816:18:8",
											"nodeType": "YulFunctionCall",
											"src": "13816:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "13808:4:8",
												"nodeType": "YulIdentifier",
												"src": "13808:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13855:9:8",
															"nodeType": "YulIdentifier",
															"src": "13855:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "13866:1:8",
															"nodeType": "YulLiteral",
															"src": "13866:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13851:3:8",
														"nodeType": "YulIdentifier",
														"src": "13851:3:8"
													},
													"nativeSrc": "13851:17:8",
													"nodeType": "YulFunctionCall",
													"src": "13851:17:8"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "13874:4:8",
															"nodeType": "YulIdentifier",
															"src": "13874:4:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "13880:9:8",
															"nodeType": "YulIdentifier",
															"src": "13880:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "13870:3:8",
														"nodeType": "YulIdentifier",
														"src": "13870:3:8"
													},
													"nativeSrc": "13870:20:8",
													"nodeType": "YulFunctionCall",
													"src": "13870:20:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13844:6:8",
												"nodeType": "YulIdentifier",
												"src": "13844:6:8"
											},
											"nativeSrc": "13844:47:8",
											"nodeType": "YulFunctionCall",
											"src": "13844:47:8"
										},
										"nativeSrc": "13844:47:8",
										"nodeType": "YulExpressionStatement",
										"src": "13844:47:8"
									},
									{
										"nativeSrc": "13900:139:8",
										"nodeType": "YulAssignment",
										"src": "13900:139:8",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "14034:4:8",
													"nodeType": "YulIdentifier",
													"src": "14034:4:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "13908:124:8",
												"nodeType": "YulIdentifier",
												"src": "13908:124:8"
											},
											"nativeSrc": "13908:131:8",
											"nodeType": "YulFunctionCall",
											"src": "13908:131:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "13900:4:8",
												"nodeType": "YulIdentifier",
												"src": "13900:4:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "13627:419:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "13778:9:8",
									"nodeType": "YulTypedName",
									"src": "13778:9:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "13793:4:8",
									"nodeType": "YulTypedName",
									"src": "13793:4:8",
									"type": ""
								}
							],
							"src": "13627:419:8"
						},
						{
							"body": {
								"nativeSrc": "14158:49:8",
								"nodeType": "YulBlock",
								"src": "14158:49:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "14180:6:8",
															"nodeType": "YulIdentifier",
															"src": "14180:6:8"
														},
														{
															"kind": "number",
															"nativeSrc": "14188:1:8",
															"nodeType": "YulLiteral",
															"src": "14188:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14176:3:8",
														"nodeType": "YulIdentifier",
														"src": "14176:3:8"
													},
													"nativeSrc": "14176:14:8",
													"nodeType": "YulFunctionCall",
													"src": "14176:14:8"
												},
												{
													"hexValue": "656d707479",
													"kind": "string",
													"nativeSrc": "14192:7:8",
													"nodeType": "YulLiteral",
													"src": "14192:7:8",
													"type": "",
													"value": "empty"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14169:6:8",
												"nodeType": "YulIdentifier",
												"src": "14169:6:8"
											},
											"nativeSrc": "14169:31:8",
											"nodeType": "YulFunctionCall",
											"src": "14169:31:8"
										},
										"nativeSrc": "14169:31:8",
										"nodeType": "YulExpressionStatement",
										"src": "14169:31:8"
									}
								]
							},
							"name": "store_literal_in_memory_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
							"nativeSrc": "14052:155:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "14150:6:8",
									"nodeType": "YulTypedName",
									"src": "14150:6:8",
									"type": ""
								}
							],
							"src": "14052:155:8"
						},
						{
							"body": {
								"nativeSrc": "14359:219:8",
								"nodeType": "YulBlock",
								"src": "14359:219:8",
								"statements": [
									{
										"nativeSrc": "14369:73:8",
										"nodeType": "YulAssignment",
										"src": "14369:73:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "14435:3:8",
													"nodeType": "YulIdentifier",
													"src": "14435:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "14440:1:8",
													"nodeType": "YulLiteral",
													"src": "14440:1:8",
													"type": "",
													"value": "5"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "14376:58:8",
												"nodeType": "YulIdentifier",
												"src": "14376:58:8"
											},
											"nativeSrc": "14376:66:8",
											"nodeType": "YulFunctionCall",
											"src": "14376:66:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "14369:3:8",
												"nodeType": "YulIdentifier",
												"src": "14369:3:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "14540:3:8",
													"nodeType": "YulIdentifier",
													"src": "14540:3:8"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
												"nativeSrc": "14451:88:8",
												"nodeType": "YulIdentifier",
												"src": "14451:88:8"
											},
											"nativeSrc": "14451:93:8",
											"nodeType": "YulFunctionCall",
											"src": "14451:93:8"
										},
										"nativeSrc": "14451:93:8",
										"nodeType": "YulExpressionStatement",
										"src": "14451:93:8"
									},
									{
										"nativeSrc": "14553:19:8",
										"nodeType": "YulAssignment",
										"src": "14553:19:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "14564:3:8",
													"nodeType": "YulIdentifier",
													"src": "14564:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "14569:2:8",
													"nodeType": "YulLiteral",
													"src": "14569:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "14560:3:8",
												"nodeType": "YulIdentifier",
												"src": "14560:3:8"
											},
											"nativeSrc": "14560:12:8",
											"nodeType": "YulFunctionCall",
											"src": "14560:12:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "14553:3:8",
												"nodeType": "YulIdentifier",
												"src": "14553:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "14213:365:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "14347:3:8",
									"nodeType": "YulTypedName",
									"src": "14347:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "14355:3:8",
									"nodeType": "YulTypedName",
									"src": "14355:3:8",
									"type": ""
								}
							],
							"src": "14213:365:8"
						},
						{
							"body": {
								"nativeSrc": "14755:248:8",
								"nodeType": "YulBlock",
								"src": "14755:248:8",
								"statements": [
									{
										"nativeSrc": "14765:26:8",
										"nodeType": "YulAssignment",
										"src": "14765:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "14777:9:8",
													"nodeType": "YulIdentifier",
													"src": "14777:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "14788:2:8",
													"nodeType": "YulLiteral",
													"src": "14788:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "14773:3:8",
												"nodeType": "YulIdentifier",
												"src": "14773:3:8"
											},
											"nativeSrc": "14773:18:8",
											"nodeType": "YulFunctionCall",
											"src": "14773:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "14765:4:8",
												"nodeType": "YulIdentifier",
												"src": "14765:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "14812:9:8",
															"nodeType": "YulIdentifier",
															"src": "14812:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "14823:1:8",
															"nodeType": "YulLiteral",
															"src": "14823:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14808:3:8",
														"nodeType": "YulIdentifier",
														"src": "14808:3:8"
													},
													"nativeSrc": "14808:17:8",
													"nodeType": "YulFunctionCall",
													"src": "14808:17:8"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "14831:4:8",
															"nodeType": "YulIdentifier",
															"src": "14831:4:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "14837:9:8",
															"nodeType": "YulIdentifier",
															"src": "14837:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "14827:3:8",
														"nodeType": "YulIdentifier",
														"src": "14827:3:8"
													},
													"nativeSrc": "14827:20:8",
													"nodeType": "YulFunctionCall",
													"src": "14827:20:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14801:6:8",
												"nodeType": "YulIdentifier",
												"src": "14801:6:8"
											},
											"nativeSrc": "14801:47:8",
											"nodeType": "YulFunctionCall",
											"src": "14801:47:8"
										},
										"nativeSrc": "14801:47:8",
										"nodeType": "YulExpressionStatement",
										"src": "14801:47:8"
									},
									{
										"nativeSrc": "14857:139:8",
										"nodeType": "YulAssignment",
										"src": "14857:139:8",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "14991:4:8",
													"nodeType": "YulIdentifier",
													"src": "14991:4:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "14865:124:8",
												"nodeType": "YulIdentifier",
												"src": "14865:124:8"
											},
											"nativeSrc": "14865:131:8",
											"nodeType": "YulFunctionCall",
											"src": "14865:131:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "14857:4:8",
												"nodeType": "YulIdentifier",
												"src": "14857:4:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "14584:419:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "14735:9:8",
									"nodeType": "YulTypedName",
									"src": "14735:9:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "14750:4:8",
									"nodeType": "YulTypedName",
									"src": "14750:4:8",
									"type": ""
								}
							],
							"src": "14584:419:8"
						},
						{
							"body": {
								"nativeSrc": "15122:34:8",
								"nodeType": "YulBlock",
								"src": "15122:34:8",
								"statements": [
									{
										"nativeSrc": "15132:18:8",
										"nodeType": "YulAssignment",
										"src": "15132:18:8",
										"value": {
											"name": "pos",
											"nativeSrc": "15147:3:8",
											"nodeType": "YulIdentifier",
											"src": "15147:3:8"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "15132:11:8",
												"nodeType": "YulIdentifier",
												"src": "15132:11:8"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
							"nativeSrc": "15009:147:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "15094:3:8",
									"nodeType": "YulTypedName",
									"src": "15094:3:8",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "15099:6:8",
									"nodeType": "YulTypedName",
									"src": "15099:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "15110:11:8",
									"nodeType": "YulTypedName",
									"src": "15110:11:8",
									"type": ""
								}
							],
							"src": "15009:147:8"
						},
						{
							"body": {
								"nativeSrc": "15268:8:8",
								"nodeType": "YulBlock",
								"src": "15268:8:8",
								"statements": []
							},
							"name": "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
							"nativeSrc": "15162:114:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "15260:6:8",
									"nodeType": "YulTypedName",
									"src": "15260:6:8",
									"type": ""
								}
							],
							"src": "15162:114:8"
						},
						{
							"body": {
								"nativeSrc": "15445:235:8",
								"nodeType": "YulBlock",
								"src": "15445:235:8",
								"statements": [
									{
										"nativeSrc": "15455:90:8",
										"nodeType": "YulAssignment",
										"src": "15455:90:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "15538:3:8",
													"nodeType": "YulIdentifier",
													"src": "15538:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "15543:1:8",
													"nodeType": "YulLiteral",
													"src": "15543:1:8",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "15462:75:8",
												"nodeType": "YulIdentifier",
												"src": "15462:75:8"
											},
											"nativeSrc": "15462:83:8",
											"nodeType": "YulFunctionCall",
											"src": "15462:83:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "15455:3:8",
												"nodeType": "YulIdentifier",
												"src": "15455:3:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "15643:3:8",
													"nodeType": "YulIdentifier",
													"src": "15643:3:8"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
												"nativeSrc": "15554:88:8",
												"nodeType": "YulIdentifier",
												"src": "15554:88:8"
											},
											"nativeSrc": "15554:93:8",
											"nodeType": "YulFunctionCall",
											"src": "15554:93:8"
										},
										"nativeSrc": "15554:93:8",
										"nodeType": "YulExpressionStatement",
										"src": "15554:93:8"
									},
									{
										"nativeSrc": "15656:18:8",
										"nodeType": "YulAssignment",
										"src": "15656:18:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "15667:3:8",
													"nodeType": "YulIdentifier",
													"src": "15667:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "15672:1:8",
													"nodeType": "YulLiteral",
													"src": "15672:1:8",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "15663:3:8",
												"nodeType": "YulIdentifier",
												"src": "15663:3:8"
											},
											"nativeSrc": "15663:11:8",
											"nodeType": "YulFunctionCall",
											"src": "15663:11:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "15656:3:8",
												"nodeType": "YulIdentifier",
												"src": "15656:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
							"nativeSrc": "15282:398:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "15433:3:8",
									"nodeType": "YulTypedName",
									"src": "15433:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "15441:3:8",
									"nodeType": "YulTypedName",
									"src": "15441:3:8",
									"type": ""
								}
							],
							"src": "15282:398:8"
						},
						{
							"body": {
								"nativeSrc": "15874:191:8",
								"nodeType": "YulBlock",
								"src": "15874:191:8",
								"statements": [
									{
										"nativeSrc": "15885:154:8",
										"nodeType": "YulAssignment",
										"src": "15885:154:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "16035:3:8",
													"nodeType": "YulIdentifier",
													"src": "16035:3:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "15892:141:8",
												"nodeType": "YulIdentifier",
												"src": "15892:141:8"
											},
											"nativeSrc": "15892:147:8",
											"nodeType": "YulFunctionCall",
											"src": "15892:147:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "15885:3:8",
												"nodeType": "YulIdentifier",
												"src": "15885:3:8"
											}
										]
									},
									{
										"nativeSrc": "16049:10:8",
										"nodeType": "YulAssignment",
										"src": "16049:10:8",
										"value": {
											"name": "pos",
											"nativeSrc": "16056:3:8",
											"nodeType": "YulIdentifier",
											"src": "16056:3:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "16049:3:8",
												"nodeType": "YulIdentifier",
												"src": "16049:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nativeSrc": "15686:379:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "15861:3:8",
									"nodeType": "YulTypedName",
									"src": "15861:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "15870:3:8",
									"nodeType": "YulTypedName",
									"src": "15870:3:8",
									"type": ""
								}
							],
							"src": "15686:379:8"
						},
						{
							"body": {
								"nativeSrc": "16177:57:8",
								"nodeType": "YulBlock",
								"src": "16177:57:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "16199:6:8",
															"nodeType": "YulIdentifier",
															"src": "16199:6:8"
														},
														{
															"kind": "number",
															"nativeSrc": "16207:1:8",
															"nodeType": "YulLiteral",
															"src": "16207:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "16195:3:8",
														"nodeType": "YulIdentifier",
														"src": "16195:3:8"
													},
													"nativeSrc": "16195:14:8",
													"nodeType": "YulFunctionCall",
													"src": "16195:14:8"
												},
												{
													"hexValue": "7769746864726177206661696c",
													"kind": "string",
													"nativeSrc": "16211:15:8",
													"nodeType": "YulLiteral",
													"src": "16211:15:8",
													"type": "",
													"value": "withdraw fail"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "16188:6:8",
												"nodeType": "YulIdentifier",
												"src": "16188:6:8"
											},
											"nativeSrc": "16188:39:8",
											"nodeType": "YulFunctionCall",
											"src": "16188:39:8"
										},
										"nativeSrc": "16188:39:8",
										"nodeType": "YulExpressionStatement",
										"src": "16188:39:8"
									}
								]
							},
							"name": "store_literal_in_memory_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763",
							"nativeSrc": "16071:163:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "16169:6:8",
									"nodeType": "YulTypedName",
									"src": "16169:6:8",
									"type": ""
								}
							],
							"src": "16071:163:8"
						},
						{
							"body": {
								"nativeSrc": "16386:220:8",
								"nodeType": "YulBlock",
								"src": "16386:220:8",
								"statements": [
									{
										"nativeSrc": "16396:74:8",
										"nodeType": "YulAssignment",
										"src": "16396:74:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "16462:3:8",
													"nodeType": "YulIdentifier",
													"src": "16462:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "16467:2:8",
													"nodeType": "YulLiteral",
													"src": "16467:2:8",
													"type": "",
													"value": "13"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "16403:58:8",
												"nodeType": "YulIdentifier",
												"src": "16403:58:8"
											},
											"nativeSrc": "16403:67:8",
											"nodeType": "YulFunctionCall",
											"src": "16403:67:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "16396:3:8",
												"nodeType": "YulIdentifier",
												"src": "16396:3:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "16568:3:8",
													"nodeType": "YulIdentifier",
													"src": "16568:3:8"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763",
												"nativeSrc": "16479:88:8",
												"nodeType": "YulIdentifier",
												"src": "16479:88:8"
											},
											"nativeSrc": "16479:93:8",
											"nodeType": "YulFunctionCall",
											"src": "16479:93:8"
										},
										"nativeSrc": "16479:93:8",
										"nodeType": "YulExpressionStatement",
										"src": "16479:93:8"
									},
									{
										"nativeSrc": "16581:19:8",
										"nodeType": "YulAssignment",
										"src": "16581:19:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "16592:3:8",
													"nodeType": "YulIdentifier",
													"src": "16592:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "16597:2:8",
													"nodeType": "YulLiteral",
													"src": "16597:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "16588:3:8",
												"nodeType": "YulIdentifier",
												"src": "16588:3:8"
											},
											"nativeSrc": "16588:12:8",
											"nodeType": "YulFunctionCall",
											"src": "16588:12:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "16581:3:8",
												"nodeType": "YulIdentifier",
												"src": "16581:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "16240:366:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "16374:3:8",
									"nodeType": "YulTypedName",
									"src": "16374:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "16382:3:8",
									"nodeType": "YulTypedName",
									"src": "16382:3:8",
									"type": ""
								}
							],
							"src": "16240:366:8"
						},
						{
							"body": {
								"nativeSrc": "16783:248:8",
								"nodeType": "YulBlock",
								"src": "16783:248:8",
								"statements": [
									{
										"nativeSrc": "16793:26:8",
										"nodeType": "YulAssignment",
										"src": "16793:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "16805:9:8",
													"nodeType": "YulIdentifier",
													"src": "16805:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "16816:2:8",
													"nodeType": "YulLiteral",
													"src": "16816:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "16801:3:8",
												"nodeType": "YulIdentifier",
												"src": "16801:3:8"
											},
											"nativeSrc": "16801:18:8",
											"nodeType": "YulFunctionCall",
											"src": "16801:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "16793:4:8",
												"nodeType": "YulIdentifier",
												"src": "16793:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "16840:9:8",
															"nodeType": "YulIdentifier",
															"src": "16840:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "16851:1:8",
															"nodeType": "YulLiteral",
															"src": "16851:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "16836:3:8",
														"nodeType": "YulIdentifier",
														"src": "16836:3:8"
													},
													"nativeSrc": "16836:17:8",
													"nodeType": "YulFunctionCall",
													"src": "16836:17:8"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "16859:4:8",
															"nodeType": "YulIdentifier",
															"src": "16859:4:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "16865:9:8",
															"nodeType": "YulIdentifier",
															"src": "16865:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "16855:3:8",
														"nodeType": "YulIdentifier",
														"src": "16855:3:8"
													},
													"nativeSrc": "16855:20:8",
													"nodeType": "YulFunctionCall",
													"src": "16855:20:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "16829:6:8",
												"nodeType": "YulIdentifier",
												"src": "16829:6:8"
											},
											"nativeSrc": "16829:47:8",
											"nodeType": "YulFunctionCall",
											"src": "16829:47:8"
										},
										"nativeSrc": "16829:47:8",
										"nodeType": "YulExpressionStatement",
										"src": "16829:47:8"
									},
									{
										"nativeSrc": "16885:139:8",
										"nodeType": "YulAssignment",
										"src": "16885:139:8",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "17019:4:8",
													"nodeType": "YulIdentifier",
													"src": "17019:4:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "16893:124:8",
												"nodeType": "YulIdentifier",
												"src": "16893:124:8"
											},
											"nativeSrc": "16893:131:8",
											"nodeType": "YulFunctionCall",
											"src": "16893:131:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "16885:4:8",
												"nodeType": "YulIdentifier",
												"src": "16885:4:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "16612:419:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "16763:9:8",
									"nodeType": "YulTypedName",
									"src": "16763:9:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "16778:4:8",
									"nodeType": "YulTypedName",
									"src": "16778:4:8",
									"type": ""
								}
							],
							"src": "16612:419:8"
						},
						{
							"body": {
								"nativeSrc": "17143:51:8",
								"nodeType": "YulBlock",
								"src": "17143:51:8",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "17165:6:8",
															"nodeType": "YulIdentifier",
															"src": "17165:6:8"
														},
														{
															"kind": "number",
															"nativeSrc": "17173:1:8",
															"nodeType": "YulLiteral",
															"src": "17173:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17161:3:8",
														"nodeType": "YulIdentifier",
														"src": "17161:3:8"
													},
													"nativeSrc": "17161:14:8",
													"nodeType": "YulFunctionCall",
													"src": "17161:14:8"
												},
												{
													"hexValue": "70726963653d30",
													"kind": "string",
													"nativeSrc": "17177:9:8",
													"nodeType": "YulLiteral",
													"src": "17177:9:8",
													"type": "",
													"value": "price=0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17154:6:8",
												"nodeType": "YulIdentifier",
												"src": "17154:6:8"
											},
											"nativeSrc": "17154:33:8",
											"nodeType": "YulFunctionCall",
											"src": "17154:33:8"
										},
										"nativeSrc": "17154:33:8",
										"nodeType": "YulExpressionStatement",
										"src": "17154:33:8"
									}
								]
							},
							"name": "store_literal_in_memory_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882",
							"nativeSrc": "17037:157:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "17135:6:8",
									"nodeType": "YulTypedName",
									"src": "17135:6:8",
									"type": ""
								}
							],
							"src": "17037:157:8"
						},
						{
							"body": {
								"nativeSrc": "17346:219:8",
								"nodeType": "YulBlock",
								"src": "17346:219:8",
								"statements": [
									{
										"nativeSrc": "17356:73:8",
										"nodeType": "YulAssignment",
										"src": "17356:73:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "17422:3:8",
													"nodeType": "YulIdentifier",
													"src": "17422:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "17427:1:8",
													"nodeType": "YulLiteral",
													"src": "17427:1:8",
													"type": "",
													"value": "7"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "17363:58:8",
												"nodeType": "YulIdentifier",
												"src": "17363:58:8"
											},
											"nativeSrc": "17363:66:8",
											"nodeType": "YulFunctionCall",
											"src": "17363:66:8"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "17356:3:8",
												"nodeType": "YulIdentifier",
												"src": "17356:3:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "17527:3:8",
													"nodeType": "YulIdentifier",
													"src": "17527:3:8"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882",
												"nativeSrc": "17438:88:8",
												"nodeType": "YulIdentifier",
												"src": "17438:88:8"
											},
											"nativeSrc": "17438:93:8",
											"nodeType": "YulFunctionCall",
											"src": "17438:93:8"
										},
										"nativeSrc": "17438:93:8",
										"nodeType": "YulExpressionStatement",
										"src": "17438:93:8"
									},
									{
										"nativeSrc": "17540:19:8",
										"nodeType": "YulAssignment",
										"src": "17540:19:8",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "17551:3:8",
													"nodeType": "YulIdentifier",
													"src": "17551:3:8"
												},
												{
													"kind": "number",
													"nativeSrc": "17556:2:8",
													"nodeType": "YulLiteral",
													"src": "17556:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "17547:3:8",
												"nodeType": "YulIdentifier",
												"src": "17547:3:8"
											},
											"nativeSrc": "17547:12:8",
											"nodeType": "YulFunctionCall",
											"src": "17547:12:8"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "17540:3:8",
												"nodeType": "YulIdentifier",
												"src": "17540:3:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "17200:365:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "17334:3:8",
									"nodeType": "YulTypedName",
									"src": "17334:3:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "17342:3:8",
									"nodeType": "YulTypedName",
									"src": "17342:3:8",
									"type": ""
								}
							],
							"src": "17200:365:8"
						},
						{
							"body": {
								"nativeSrc": "17742:248:8",
								"nodeType": "YulBlock",
								"src": "17742:248:8",
								"statements": [
									{
										"nativeSrc": "17752:26:8",
										"nodeType": "YulAssignment",
										"src": "17752:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "17764:9:8",
													"nodeType": "YulIdentifier",
													"src": "17764:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "17775:2:8",
													"nodeType": "YulLiteral",
													"src": "17775:2:8",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "17760:3:8",
												"nodeType": "YulIdentifier",
												"src": "17760:3:8"
											},
											"nativeSrc": "17760:18:8",
											"nodeType": "YulFunctionCall",
											"src": "17760:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "17752:4:8",
												"nodeType": "YulIdentifier",
												"src": "17752:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17799:9:8",
															"nodeType": "YulIdentifier",
															"src": "17799:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "17810:1:8",
															"nodeType": "YulLiteral",
															"src": "17810:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17795:3:8",
														"nodeType": "YulIdentifier",
														"src": "17795:3:8"
													},
													"nativeSrc": "17795:17:8",
													"nodeType": "YulFunctionCall",
													"src": "17795:17:8"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "17818:4:8",
															"nodeType": "YulIdentifier",
															"src": "17818:4:8"
														},
														{
															"name": "headStart",
															"nativeSrc": "17824:9:8",
															"nodeType": "YulIdentifier",
															"src": "17824:9:8"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "17814:3:8",
														"nodeType": "YulIdentifier",
														"src": "17814:3:8"
													},
													"nativeSrc": "17814:20:8",
													"nodeType": "YulFunctionCall",
													"src": "17814:20:8"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17788:6:8",
												"nodeType": "YulIdentifier",
												"src": "17788:6:8"
											},
											"nativeSrc": "17788:47:8",
											"nodeType": "YulFunctionCall",
											"src": "17788:47:8"
										},
										"nativeSrc": "17788:47:8",
										"nodeType": "YulExpressionStatement",
										"src": "17788:47:8"
									},
									{
										"nativeSrc": "17844:139:8",
										"nodeType": "YulAssignment",
										"src": "17844:139:8",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "17978:4:8",
													"nodeType": "YulIdentifier",
													"src": "17978:4:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "17852:124:8",
												"nodeType": "YulIdentifier",
												"src": "17852:124:8"
											},
											"nativeSrc": "17852:131:8",
											"nodeType": "YulFunctionCall",
											"src": "17852:131:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "17844:4:8",
												"nodeType": "YulIdentifier",
												"src": "17844:4:8"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "17571:419:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "17722:9:8",
									"nodeType": "YulTypedName",
									"src": "17722:9:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "17737:4:8",
									"nodeType": "YulTypedName",
									"src": "17737:4:8",
									"type": ""
								}
							],
							"src": "17571:419:8"
						},
						{
							"body": {
								"nativeSrc": "18150:288:8",
								"nodeType": "YulBlock",
								"src": "18150:288:8",
								"statements": [
									{
										"nativeSrc": "18160:26:8",
										"nodeType": "YulAssignment",
										"src": "18160:26:8",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "18172:9:8",
													"nodeType": "YulIdentifier",
													"src": "18172:9:8"
												},
												{
													"kind": "number",
													"nativeSrc": "18183:2:8",
													"nodeType": "YulLiteral",
													"src": "18183:2:8",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "18168:3:8",
												"nodeType": "YulIdentifier",
												"src": "18168:3:8"
											},
											"nativeSrc": "18168:18:8",
											"nodeType": "YulFunctionCall",
											"src": "18168:18:8"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "18160:4:8",
												"nodeType": "YulIdentifier",
												"src": "18160:4:8"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "18240:6:8",
													"nodeType": "YulIdentifier",
													"src": "18240:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "18253:9:8",
															"nodeType": "YulIdentifier",
															"src": "18253:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "18264:1:8",
															"nodeType": "YulLiteral",
															"src": "18264:1:8",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "18249:3:8",
														"nodeType": "YulIdentifier",
														"src": "18249:3:8"
													},
													"nativeSrc": "18249:17:8",
													"nodeType": "YulFunctionCall",
													"src": "18249:17:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "18196:43:8",
												"nodeType": "YulIdentifier",
												"src": "18196:43:8"
											},
											"nativeSrc": "18196:71:8",
											"nodeType": "YulFunctionCall",
											"src": "18196:71:8"
										},
										"nativeSrc": "18196:71:8",
										"nodeType": "YulExpressionStatement",
										"src": "18196:71:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "18321:6:8",
													"nodeType": "YulIdentifier",
													"src": "18321:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "18334:9:8",
															"nodeType": "YulIdentifier",
															"src": "18334:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "18345:2:8",
															"nodeType": "YulLiteral",
															"src": "18345:2:8",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "18330:3:8",
														"nodeType": "YulIdentifier",
														"src": "18330:3:8"
													},
													"nativeSrc": "18330:18:8",
													"nodeType": "YulFunctionCall",
													"src": "18330:18:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "18277:43:8",
												"nodeType": "YulIdentifier",
												"src": "18277:43:8"
											},
											"nativeSrc": "18277:72:8",
											"nodeType": "YulFunctionCall",
											"src": "18277:72:8"
										},
										"nativeSrc": "18277:72:8",
										"nodeType": "YulExpressionStatement",
										"src": "18277:72:8"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "18403:6:8",
													"nodeType": "YulIdentifier",
													"src": "18403:6:8"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "18416:9:8",
															"nodeType": "YulIdentifier",
															"src": "18416:9:8"
														},
														{
															"kind": "number",
															"nativeSrc": "18427:2:8",
															"nodeType": "YulLiteral",
															"src": "18427:2:8",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "18412:3:8",
														"nodeType": "YulIdentifier",
														"src": "18412:3:8"
													},
													"nativeSrc": "18412:18:8",
													"nodeType": "YulFunctionCall",
													"src": "18412:18:8"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "18359:43:8",
												"nodeType": "YulIdentifier",
												"src": "18359:43:8"
											},
											"nativeSrc": "18359:72:8",
											"nodeType": "YulFunctionCall",
											"src": "18359:72:8"
										},
										"nativeSrc": "18359:72:8",
										"nodeType": "YulExpressionStatement",
										"src": "18359:72:8"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "17996:442:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "18106:9:8",
									"nodeType": "YulTypedName",
									"src": "18106:9:8",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "18118:6:8",
									"nodeType": "YulTypedName",
									"src": "18118:6:8",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "18126:6:8",
									"nodeType": "YulTypedName",
									"src": "18126:6:8",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "18134:6:8",
									"nodeType": "YulTypedName",
									"src": "18134:6:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "18145:4:8",
									"nodeType": "YulTypedName",
									"src": "18145:4:8",
									"type": ""
								}
							],
							"src": "17996:442:8"
						},
						{
							"body": {
								"nativeSrc": "18488:147:8",
								"nodeType": "YulBlock",
								"src": "18488:147:8",
								"statements": [
									{
										"nativeSrc": "18498:25:8",
										"nodeType": "YulAssignment",
										"src": "18498:25:8",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "18521:1:8",
													"nodeType": "YulIdentifier",
													"src": "18521:1:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "18503:17:8",
												"nodeType": "YulIdentifier",
												"src": "18503:17:8"
											},
											"nativeSrc": "18503:20:8",
											"nodeType": "YulFunctionCall",
											"src": "18503:20:8"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "18498:1:8",
												"nodeType": "YulIdentifier",
												"src": "18498:1:8"
											}
										]
									},
									{
										"nativeSrc": "18532:25:8",
										"nodeType": "YulAssignment",
										"src": "18532:25:8",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "18555:1:8",
													"nodeType": "YulIdentifier",
													"src": "18555:1:8"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "18537:17:8",
												"nodeType": "YulIdentifier",
												"src": "18537:17:8"
											},
											"nativeSrc": "18537:20:8",
											"nodeType": "YulFunctionCall",
											"src": "18537:20:8"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "18532:1:8",
												"nodeType": "YulIdentifier",
												"src": "18532:1:8"
											}
										]
									},
									{
										"nativeSrc": "18566:16:8",
										"nodeType": "YulAssignment",
										"src": "18566:16:8",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "18577:1:8",
													"nodeType": "YulIdentifier",
													"src": "18577:1:8"
												},
												{
													"name": "y",
													"nativeSrc": "18580:1:8",
													"nodeType": "YulIdentifier",
													"src": "18580:1:8"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "18573:3:8",
												"nodeType": "YulIdentifier",
												"src": "18573:3:8"
											},
											"nativeSrc": "18573:9:8",
											"nodeType": "YulFunctionCall",
											"src": "18573:9:8"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "18566:3:8",
												"nodeType": "YulIdentifier",
												"src": "18566:3:8"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "18606:22:8",
											"nodeType": "YulBlock",
											"src": "18606:22:8",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "18608:16:8",
															"nodeType": "YulIdentifier",
															"src": "18608:16:8"
														},
														"nativeSrc": "18608:18:8",
														"nodeType": "YulFunctionCall",
														"src": "18608:18:8"
													},
													"nativeSrc": "18608:18:8",
													"nodeType": "YulExpressionStatement",
													"src": "18608:18:8"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "18598:1:8",
													"nodeType": "YulIdentifier",
													"src": "18598:1:8"
												},
												{
													"name": "sum",
													"nativeSrc": "18601:3:8",
													"nodeType": "YulIdentifier",
													"src": "18601:3:8"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "18595:2:8",
												"nodeType": "YulIdentifier",
												"src": "18595:2:8"
											},
											"nativeSrc": "18595:10:8",
											"nodeType": "YulFunctionCall",
											"src": "18595:10:8"
										},
										"nativeSrc": "18592:36:8",
										"nodeType": "YulIf",
										"src": "18592:36:8"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "18444:191:8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "18475:1:8",
									"nodeType": "YulTypedName",
									"src": "18475:1:8",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "18478:1:8",
									"nodeType": "YulTypedName",
									"src": "18478:1:8",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "18484:3:8",
									"nodeType": "YulTypedName",
									"src": "18484:3:8",
									"type": ""
								}
							],
							"src": "18444:191:8"
						}
					]
				},
				"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address_payable(value) {\n        if iszero(eq(value, cleanup_t_address_payable(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_payable(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address_payable(value)\n    }\n\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_payable(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672(memPtr) {\n\n        mstore(add(memPtr, 0), \"no ETH\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 6)\n        store_literal_in_memory_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d99a2638c952b73e243c327c35e4fb7f8e0135166e0ae2ad389016b18f80672_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint8(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"too little ETH\")\n\n    }\n\n    function abi_encode_t_stringliteral_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2b8d879a40d4c4c90084c76be30d3247631f6c2e903cf249ccd6fde0ba3533b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15(memPtr) {\n\n        mstore(add(memPtr, 0), \"to=0\")\n\n    }\n\n    function abi_encode_t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 4)\n        store_literal_in_memory_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80(memPtr) {\n\n        mstore(add(memPtr, 0), \"empty\")\n\n    }\n\n    function abi_encode_t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 5)\n        store_literal_in_memory_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763(memPtr) {\n\n        mstore(add(memPtr, 0), \"withdraw fail\")\n\n    }\n\n    function abi_encode_t_stringliteral_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_161900ce9e3b9d2daa9947fe5e21b0893fe048a0b16e620b8dec61c787715763_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882(memPtr) {\n\n        mstore(add(memPtr, 0), \"price=0\")\n\n    }\n\n    function abi_encode_t_stringliteral_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 7)\n        store_literal_in_memory_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1d8b26c0a8604842caf846734bcf8aaf5fe1bb783fc906c283161f7bdee7b882_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n}\n",
				"id": 8,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "6080604052600436106100f6575f3560e01c8063715018a611610089578063c133106111610058578063c133106114610331578063dbf09d661461033b578063dd62ed3e14610365578063f2fde38b146103a157610105565b8063715018a61461028b5780638da5cb5b146102a157806395d89b41146102cb578063a9059cbb146102f557610105565b8063313ce567116100c5578063313ce567146101d557806351cff8d9146101ff578063707e422f1461022757806370a082311461024f57610105565b806306fdde0314610109578063095ea7b31461013357806318160ddd1461016f57806323b872dd1461019957610105565b36610105576101036103c9565b005b5f5ffd5b348015610114575f5ffd5b5061011d6104e9565b60405161012a9190611267565b60405180910390f35b34801561013e575f5ffd5b5061015960048036038101906101549190611318565b610579565b6040516101669190611370565b60405180910390f35b34801561017a575f5ffd5b5061018361059b565b6040516101909190611398565b60405180910390f35b3480156101a4575f5ffd5b506101bf60048036038101906101ba91906113b1565b6105a4565b6040516101cc9190611370565b60405180910390f35b3480156101e0575f5ffd5b506101e96105d2565b6040516101f6919061141c565b60405180910390f35b34801561020a575f5ffd5b5061022560048036038101906102209190611470565b6105da565b005b348015610232575f5ffd5b5061024d6004803603810190610248919061149b565b610791565b005b34801561025a575f5ffd5b50610275600480360381019061027091906114c6565b61081c565b6040516102829190611398565b60405180910390f35b348015610296575f5ffd5b5061029f610861565b005b3480156102ac575f5ffd5b506102b5610874565b6040516102c29190611500565b60405180910390f35b3480156102d6575f5ffd5b506102df61089c565b6040516102ec9190611267565b60405180910390f35b348015610300575f5ffd5b5061031b60048036038101906103169190611318565b61092c565b6040516103289190611370565b60405180910390f35b6103396103c9565b005b348015610346575f5ffd5b5061034f61094e565b60405161035c9190611398565b60405180910390f35b348015610370575f5ffd5b5061038b60048036038101906103869190611519565b610954565b6040516103989190611398565b60405180910390f35b3480156103ac575f5ffd5b506103c760048036038101906103c291906114c6565b6109d6565b005b6103d1610a5a565b5f3411610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040a906115a1565b60405180910390fd5b5f60075461041f6105d2565b600a61042b919061171b565b346104369190611765565b61044091906117d3565b90505f8111610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b9061184d565b60405180910390fd5b61048e3382610aa0565b3373ffffffffffffffffffffffffffffffffffffffff167f1226f1537b00d316270056dd247f05739ee0aca67a32cdd8258b675b6f0658b034836040516104d692919061186b565b60405180910390a2506104e7610b1f565b565b6060600380546104f8906118bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610524906118bf565b801561056f5780601f106105465761010080835404028352916020019161056f565b820191905f5260205f20905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b5f5f610583610b29565b9050610590818585610b30565b600191505092915050565b5f600254905090565b5f5f6105ae610b29565b90506105bb858285610b42565b6105c6858585610bd5565b60019150509392505050565b5f6012905090565b6105e2610cc5565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064790611939565b60405180910390fd5b5f4790505f8111610696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068d906119a1565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff16826040516106bb906119ec565b5f6040518083038185875af1925050503d805f81146106f5576040519150601f19603f3d011682016040523d82523d5f602084013e6106fa565b606091505b505090508061073e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073590611a4a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040516107849190611398565b60405180910390a2505050565b610799610cc5565b5f81116107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d290611ab2565b60405180910390fd5b806007819055507f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe0816040516108119190611398565b60405180910390a150565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610869610cc5565b6108725f610d4c565b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546108ab906118bf565b80601f01602080910402602001604051908101604052809291908181526020018280546108d7906118bf565b80156109225780601f106108f957610100808354040283529160200191610922565b820191905f5260205f20905b81548152906001019060200180831161090557829003601f168201915b5050505050905090565b5f5f610936610b29565b9050610943818585610bd5565b600191505092915050565b60075481565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6109de610cc5565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a4e575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610a459190611500565b60405180910390fd5b610a5781610d4c565b50565b600260065403610a96576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b10575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610b079190611500565b60405180910390fd5b610b1b5f8383610e0f565b5050565b6001600681905550565b5f33905090565b610b3d8383836001611028565b505050565b5f610b4d8484610954565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610bcf5781811015610bc0578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610bb793929190611ad0565b60405180910390fd5b610bce84848484035f611028565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c45575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610c3c9190611500565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cb5575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610cac9190611500565b60405180910390fd5b610cc0838383610e0f565b505050565b610ccd610b29565b73ffffffffffffffffffffffffffffffffffffffff16610ceb610874565b73ffffffffffffffffffffffffffffffffffffffff1614610d4a57610d0e610b29565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d419190611500565b60405180910390fd5b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e5f578060025f828254610e539190611b05565b92505081905550610f2d565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610ee8578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610edf93929190611ad0565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f74578060025f8282540392505081905550610fbe565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161101b9190611398565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611098575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161108f9190611500565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611108575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016110ff9190611500565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156111f1578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516111e89190611398565b60405180910390a35b50505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611239826111f7565b6112438185611201565b9350611253818560208601611211565b61125c8161121f565b840191505092915050565b5f6020820190508181035f83015261127f818461122f565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6112b48261128b565b9050919050565b6112c4816112aa565b81146112ce575f5ffd5b50565b5f813590506112df816112bb565b92915050565b5f819050919050565b6112f7816112e5565b8114611301575f5ffd5b50565b5f81359050611312816112ee565b92915050565b5f5f6040838503121561132e5761132d611287565b5b5f61133b858286016112d1565b925050602061134c85828601611304565b9150509250929050565b5f8115159050919050565b61136a81611356565b82525050565b5f6020820190506113835f830184611361565b92915050565b611392816112e5565b82525050565b5f6020820190506113ab5f830184611389565b92915050565b5f5f5f606084860312156113c8576113c7611287565b5b5f6113d5868287016112d1565b93505060206113e6868287016112d1565b92505060406113f786828701611304565b9150509250925092565b5f60ff82169050919050565b61141681611401565b82525050565b5f60208201905061142f5f83018461140d565b92915050565b5f61143f8261128b565b9050919050565b61144f81611435565b8114611459575f5ffd5b50565b5f8135905061146a81611446565b92915050565b5f6020828403121561148557611484611287565b5b5f6114928482850161145c565b91505092915050565b5f602082840312156114b0576114af611287565b5b5f6114bd84828501611304565b91505092915050565b5f602082840312156114db576114da611287565b5b5f6114e8848285016112d1565b91505092915050565b6114fa816112aa565b82525050565b5f6020820190506115135f8301846114f1565b92915050565b5f5f6040838503121561152f5761152e611287565b5b5f61153c858286016112d1565b925050602061154d858286016112d1565b9150509250929050565b7f6e6f2045544800000000000000000000000000000000000000000000000000005f82015250565b5f61158b600683611201565b915061159682611557565b602082019050919050565b5f6020820190508181035f8301526115b88161157f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f5f8291508390505b60018511156116415780860481111561161d5761161c6115bf565b5b600185161561162c5780820291505b808102905061163a856115ec565b9450611601565b94509492505050565b5f826116595760019050611714565b81611666575f9050611714565b816001811461167c5760028114611686576116b5565b6001915050611714565b60ff841115611698576116976115bf565b5b8360020a9150848211156116af576116ae6115bf565b5b50611714565b5060208310610133831016604e8410600b84101617156116ea5782820a9050838111156116e5576116e46115bf565b5b611714565b6116f784848460016115f8565b9250905081840481111561170e5761170d6115bf565b5b81810290505b9392505050565b5f611725826112e5565b915061173083611401565b925061175d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461164a565b905092915050565b5f61176f826112e5565b915061177a836112e5565b9250828202611788816112e5565b9150828204841483151761179f5761179e6115bf565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6117dd826112e5565b91506117e8836112e5565b9250826117f8576117f76117a6565b5b828204905092915050565b7f746f6f206c6974746c65204554480000000000000000000000000000000000005f82015250565b5f611837600e83611201565b915061184282611803565b602082019050919050565b5f6020820190508181035f8301526118648161182b565b9050919050565b5f60408201905061187e5f830185611389565b61188b6020830184611389565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806118d657607f821691505b6020821081036118e9576118e8611892565b5b50919050565b7f746f3d30000000000000000000000000000000000000000000000000000000005f82015250565b5f611923600483611201565b915061192e826118ef565b602082019050919050565b5f6020820190508181035f83015261195081611917565b9050919050565b7f656d7074790000000000000000000000000000000000000000000000000000005f82015250565b5f61198b600583611201565b915061199682611957565b602082019050919050565b5f6020820190508181035f8301526119b88161197f565b9050919050565b5f81905092915050565b50565b5f6119d75f836119bf565b91506119e2826119c9565b5f82019050919050565b5f6119f6826119cc565b9150819050919050565b7f7769746864726177206661696c000000000000000000000000000000000000005f82015250565b5f611a34600d83611201565b9150611a3f82611a00565b602082019050919050565b5f6020820190508181035f830152611a6181611a28565b9050919050565b7f70726963653d30000000000000000000000000000000000000000000000000005f82015250565b5f611a9c600783611201565b9150611aa782611a68565b602082019050919050565b5f6020820190508181035f830152611ac981611a90565b9050919050565b5f606082019050611ae35f8301866114f1565b611af06020830185611389565b611afd6040830184611389565b949350505050565b5f611b0f826112e5565b9150611b1a836112e5565b9250828201905080821115611b3257611b316115bf565b5b9291505056fea26469706673582212206d2e3883aea79d1b3d43c94261dc2971d8bdeaabcd6b8d337f55462889155bc664736f6c634300081e0033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF6 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x89 JUMPI DUP1 PUSH4 0xC1331061 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0xC1331061 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0xDBF09D66 EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x365 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3A1 JUMPI PUSH2 0x105 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x28B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2CB JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2F5 JUMPI PUSH2 0x105 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xC5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x707E422F EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x24F JUMPI PUSH2 0x105 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x199 JUMPI PUSH2 0x105 JUMP JUMPDEST CALLDATASIZE PUSH2 0x105 JUMPI PUSH2 0x103 PUSH2 0x3C9 JUMP JUMPDEST STOP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x114 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x4E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x154 SWAP2 SWAP1 PUSH2 0x1318 JUMP JUMPDEST PUSH2 0x579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x1370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x190 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x13B1 JUMP JUMPDEST PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CC SWAP2 SWAP1 PUSH2 0x1370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E0 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x1E9 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x225 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x1470 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x24D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH2 0x791 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x275 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x270 SWAP2 SWAP1 PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x296 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x861 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AC JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x2B5 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D6 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x2DF PUSH2 0x89C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EC SWAP2 SWAP1 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x300 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x31B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x1318 JUMP JUMPDEST PUSH2 0x92C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x328 SWAP2 SWAP1 PUSH2 0x1370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x339 PUSH2 0x3C9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x346 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x34F PUSH2 0x94E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x35C SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x370 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x38B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x386 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH2 0x954 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x398 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x3C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C2 SWAP2 SWAP1 PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x9D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D1 PUSH2 0xA5A JUMP JUMPDEST PUSH0 CALLVALUE GT PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40A SWAP1 PUSH2 0x15A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x7 SLOAD PUSH2 0x41F PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0xA PUSH2 0x42B SWAP2 SWAP1 PUSH2 0x171B JUMP JUMPDEST CALLVALUE PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x1765 JUMP JUMPDEST PUSH2 0x440 SWAP2 SWAP1 PUSH2 0x17D3 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 GT PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x47B SWAP1 PUSH2 0x184D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x48E CALLER DUP3 PUSH2 0xAA0 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1226F1537B00D316270056DD247F05739EE0ACA67A32CDD8258B675B6F0658B0 CALLVALUE DUP4 PUSH1 0x40 MLOAD PUSH2 0x4D6 SWAP3 SWAP2 SWAP1 PUSH2 0x186B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x4E7 PUSH2 0xB1F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x4F8 SWAP1 PUSH2 0x18BF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x524 SWAP1 PUSH2 0x18BF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x56F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x546 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x552 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x583 PUSH2 0xB29 JUMP JUMPDEST SWAP1 POP PUSH2 0x590 DUP2 DUP6 DUP6 PUSH2 0xB30 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x5AE PUSH2 0xB29 JUMP JUMPDEST SWAP1 POP PUSH2 0x5BB DUP6 DUP3 DUP6 PUSH2 0xB42 JUMP JUMPDEST PUSH2 0x5C6 DUP6 DUP6 DUP6 PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x5E2 PUSH2 0xCC5 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x650 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x647 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SELFBALANCE SWAP1 POP PUSH0 DUP2 GT PUSH2 0x696 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68D SWAP1 PUSH2 0x19A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x6BB SWAP1 PUSH2 0x19EC JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x6F5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6FA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x73E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP1 PUSH2 0x1A4A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364 DUP4 PUSH1 0x40 MLOAD PUSH2 0x784 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x799 PUSH2 0xCC5 JUMP JUMPDEST PUSH0 DUP2 GT PUSH2 0x7DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D2 SWAP1 PUSH2 0x1AB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH32 0x66CBCA4F3C64FECF1DCB9CE094ABCF7F68C3450A1D4E3A8E917DD621EDB4EBE0 DUP2 PUSH1 0x40 MLOAD PUSH2 0x811 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x869 PUSH2 0xCC5 JUMP JUMPDEST PUSH2 0x872 PUSH0 PUSH2 0xD4C JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x8AB SWAP1 PUSH2 0x18BF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8D7 SWAP1 PUSH2 0x18BF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x922 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x922 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x905 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x936 PUSH2 0xB29 JUMP JUMPDEST SWAP1 POP PUSH2 0x943 DUP2 DUP6 DUP6 PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x9DE PUSH2 0xCC5 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA4E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA45 SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA57 DUP2 PUSH2 0xD4C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x6 SLOAD SUB PUSH2 0xA96 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB10 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB07 SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB1B PUSH0 DUP4 DUP4 PUSH2 0xE0F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB3D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1028 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB4D DUP5 DUP5 PUSH2 0x954 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 LT ISZERO PUSH2 0xBCF JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xBC0 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBCE DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1028 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC45 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3C SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCB5 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCAC SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC0 DUP4 DUP4 DUP4 PUSH2 0xE0F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xCCD PUSH2 0xB29 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xCEB PUSH2 0x874 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD4A JUMPI PUSH2 0xD0E PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD41 SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE5F JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xE53 SWAP2 SWAP1 PUSH2 0x1B05 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xF2D JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xEE8 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEDF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF74 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xFBE JUMP JUMPDEST DUP1 PUSH0 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x101B SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1098 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x108F SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1108 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10FF SWAP2 SWAP1 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x11F1 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x11E8 SWAP2 SWAP1 PUSH2 0x1398 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1239 DUP3 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x1243 DUP2 DUP6 PUSH2 0x1201 JUMP JUMPDEST SWAP4 POP PUSH2 0x1253 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1211 JUMP JUMPDEST PUSH2 0x125C DUP2 PUSH2 0x121F JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x127F DUP2 DUP5 PUSH2 0x122F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x12B4 DUP3 PUSH2 0x128B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12C4 DUP2 PUSH2 0x12AA JUMP JUMPDEST DUP2 EQ PUSH2 0x12CE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x12DF DUP2 PUSH2 0x12BB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12F7 DUP2 PUSH2 0x12E5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1301 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1312 DUP2 PUSH2 0x12EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x132E JUMPI PUSH2 0x132D PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x133B DUP6 DUP3 DUP7 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x134C DUP6 DUP3 DUP7 ADD PUSH2 0x1304 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x136A DUP2 PUSH2 0x1356 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1383 PUSH0 DUP4 ADD DUP5 PUSH2 0x1361 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1392 DUP2 PUSH2 0x12E5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x13AB PUSH0 DUP4 ADD DUP5 PUSH2 0x1389 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x13C8 JUMPI PUSH2 0x13C7 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x13D5 DUP7 DUP3 DUP8 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x13E6 DUP7 DUP3 DUP8 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x13F7 DUP7 DUP3 DUP8 ADD PUSH2 0x1304 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1416 DUP2 PUSH2 0x1401 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x142F PUSH0 DUP4 ADD DUP5 PUSH2 0x140D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x143F DUP3 PUSH2 0x128B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x144F DUP2 PUSH2 0x1435 JUMP JUMPDEST DUP2 EQ PUSH2 0x1459 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x146A DUP2 PUSH2 0x1446 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1485 JUMPI PUSH2 0x1484 PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1492 DUP5 DUP3 DUP6 ADD PUSH2 0x145C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14B0 JUMPI PUSH2 0x14AF PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x14BD DUP5 DUP3 DUP6 ADD PUSH2 0x1304 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14DB JUMPI PUSH2 0x14DA PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x14E8 DUP5 DUP3 DUP6 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x14FA DUP2 PUSH2 0x12AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1513 PUSH0 DUP4 ADD DUP5 PUSH2 0x14F1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x152F JUMPI PUSH2 0x152E PUSH2 0x1287 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x153C DUP6 DUP3 DUP7 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x154D DUP6 DUP3 DUP7 ADD PUSH2 0x12D1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F204554480000000000000000000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x158B PUSH1 0x6 DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1596 DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x15B8 DUP2 PUSH2 0x157F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x1641 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x161D JUMPI PUSH2 0x161C PUSH2 0x15BF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x162C JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x163A DUP6 PUSH2 0x15EC JUMP JUMPDEST SWAP5 POP PUSH2 0x1601 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1659 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1714 JUMP JUMPDEST DUP2 PUSH2 0x1666 JUMPI PUSH0 SWAP1 POP PUSH2 0x1714 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x167C JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1686 JUMPI PUSH2 0x16B5 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1714 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1698 JUMPI PUSH2 0x1697 PUSH2 0x15BF JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x16AF JUMPI PUSH2 0x16AE PUSH2 0x15BF JUMP JUMPDEST JUMPDEST POP PUSH2 0x1714 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x16EA JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x16E5 JUMPI PUSH2 0x16E4 PUSH2 0x15BF JUMP JUMPDEST JUMPDEST PUSH2 0x1714 JUMP JUMPDEST PUSH2 0x16F7 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x15F8 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x170E JUMPI PUSH2 0x170D PUSH2 0x15BF JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1725 DUP3 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1730 DUP4 PUSH2 0x1401 JUMP JUMPDEST SWAP3 POP PUSH2 0x175D PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x164A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x176F DUP3 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x177A DUP4 PUSH2 0x12E5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x1788 DUP2 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x179F JUMPI PUSH2 0x179E PUSH2 0x15BF JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x17DD DUP3 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x17E8 DUP4 PUSH2 0x12E5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x17F8 JUMPI PUSH2 0x17F7 PUSH2 0x17A6 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x746F6F206C6974746C6520455448000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1837 PUSH1 0xE DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1842 DUP3 PUSH2 0x1803 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1864 DUP2 PUSH2 0x182B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x187E PUSH0 DUP4 ADD DUP6 PUSH2 0x1389 JUMP JUMPDEST PUSH2 0x188B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1389 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x18D6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x18E9 JUMPI PUSH2 0x18E8 PUSH2 0x1892 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x746F3D3000000000000000000000000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1923 PUSH1 0x4 DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x192E DUP3 PUSH2 0x18EF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1950 DUP2 PUSH2 0x1917 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x656D707479000000000000000000000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x198B PUSH1 0x5 DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1996 DUP3 PUSH2 0x1957 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x19B8 DUP2 PUSH2 0x197F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0x19D7 PUSH0 DUP4 PUSH2 0x19BF JUMP JUMPDEST SWAP2 POP PUSH2 0x19E2 DUP3 PUSH2 0x19C9 JUMP JUMPDEST PUSH0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x19F6 DUP3 PUSH2 0x19CC JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x7769746864726177206661696C00000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1A34 PUSH1 0xD DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A3F DUP3 PUSH2 0x1A00 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1A61 DUP2 PUSH2 0x1A28 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x70726963653D3000000000000000000000000000000000000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1A9C PUSH1 0x7 DUP4 PUSH2 0x1201 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AA7 DUP3 PUSH2 0x1A68 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1AC9 DUP2 PUSH2 0x1A90 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1AE3 PUSH0 DUP4 ADD DUP7 PUSH2 0x14F1 JUMP JUMPDEST PUSH2 0x1AF0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1389 JUMP JUMPDEST PUSH2 0x1AFD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1389 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1B0F DUP3 PUSH2 0x12E5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B1A DUP4 PUSH2 0x12E5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B32 JUMPI PUSH2 0x1B31 PUSH2 0x15BF JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x2E3883AEA79D1B3D43C94261DC29 PUSH18 0xD8BDEAABCD6B8D337F55462889155BC66473 PUSH16 0x6C634300081E00330000000000000000 ",
		"sourceMap": "764:1537:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2273:19;:17;:19::i;:::-;764:1537;;;;;1760:89:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3902:186;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2803:97;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4680:244;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2688:82;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1870:304:7;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1634:189;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2933:116:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;;;;;;;;;;;:::i;:::-;;1638:85;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1962:93:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3244:178;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1231:347:7;;;:::i;:::-;;881:38;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3455:140:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1231:347:7;2500:21:6;:19;:21::i;:::-;1318:1:7::1;1306:9;:13;1298:32;;;;;;;;;;;;:::i;:::-;;;;;;;;;1340:17;1395:16;;1380:10;:8;:10::i;:::-;1374:2;:16;;;;:::i;:::-;1361:9;:30;;;;:::i;:::-;1360:51;;;;:::i;:::-;1340:71;;1441:1;1429:9;:13;1421:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;1471:28;1477:10;1489:9;1471:5;:28::i;:::-;1538:10;1514:57;;;1550:9;1561;1514:57;;;;;;;:::i;:::-;;;;;;;;1288:290;2542:20:6::0;:18;:20::i;:::-;1231:347:7:o;1760:89:2:-;1805:13;1837:5;1830:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89;:::o;3902:186::-;3975:4;3991:13;4007:12;:10;:12::i;:::-;3991:28;;4029:31;4038:5;4045:7;4054:5;4029:8;:31::i;:::-;4077:4;4070:11;;;3902:186;;;;:::o;2803:97::-;2855:7;2881:12;;2874:19;;2803:97;:::o;4680:244::-;4767:4;4783:15;4801:12;:10;:12::i;:::-;4783:30;;4823:37;4839:4;4845:7;4854:5;4823:15;:37::i;:::-;4870:26;4880:4;4886:2;4890:5;4870:9;:26::i;:::-;4913:4;4906:11;;;4680:244;;;;;:::o;2688:82::-;2737:5;2761:2;2754:9;;2688:82;:::o;1870:304:7:-;1531:13:0;:11;:13::i;:::-;1959:1:7::1;1945:16;;:2;:16;;::::0;1937:33:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:11;1994:21;1980:35;;2039:1;2033:3;:7;2025:25;;;;;;;;;;;;:::i;:::-;;;;;;;;;2061:7;2074:2;:7;;2089:3;2074:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2060:37;;;2115:2;2107:28;;;;;;;;;;;;:::i;:::-;;;;;;;;;2159:2;2150:17;;;2163:3;2150:17;;;;;;:::i;:::-;;;;;;;;1927:247;;1870:304:::0;:::o;1634:189::-;1531:13:0;:11;:13::i;:::-;1729:1:7::1;1718:8;:12;1710:32;;;;;;;;;;;;:::i;:::-;;;;;;;;;1771:8;1752:16;:27;;;;1794:22;1807:8;1794:22;;;;;;:::i;:::-;;;;;;;;1634:189:::0;:::o;2933:116:2:-;2998:7;3024:9;:18;3034:7;3024:18;;;;;;;;;;;;;;;;3017:25;;2933:116;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1638:85::-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;1962:93:2:-;2009:13;2041:7;2034:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1962:93;:::o;3244:178::-;3313:4;3329:13;3345:12;:10;:12::i;:::-;3329:28;;3367:27;3377:5;3384:2;3388:5;3367:9;:27::i;:::-;3411:4;3404:11;;;3244:178;;;;:::o;881:38:7:-;;;;:::o;3455:140:2:-;3535:7;3561:11;:18;3573:5;3561:18;;;;;;;;;;;;;;;:27;3580:7;3561:27;;;;;;;;;;;;;;;;3554:34;;3455:140;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;2575:307:6:-;1899:1;2702:7;;:18;2698:86;;2743:30;;;;;;;;;;;;;;2698:86;1899:1;2858:7;:17;;;;2575:307::o;7362:208:2:-;7451:1;7432:21;;:7;:21;;;7428:91;;7505:1;7476:32;;;;;;;;;;;:::i;:::-;;;;;;;;7428:91;7528:35;7544:1;7548:7;7557:5;7528:7;:35::i;:::-;7362:208;;:::o;2888::6:-;1857:1;3068:7;:21;;;;2888:208::o;656:96:5:-;709:7;735:10;728:17;;656:96;:::o;8630:128:2:-;8714:37;8723:5;8730:7;8739:5;8746:4;8714:8;:37::i;:::-;8630:128;;;:::o;10319:476::-;10418:24;10445:25;10455:5;10462:7;10445:9;:25::i;:::-;10418:52;;10503:17;10484:16;:36;10480:309;;;10559:5;10540:16;:24;10536:130;;;10618:7;10627:16;10645:5;10591:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10536:130;10707:57;10716:5;10723:7;10751:5;10732:16;:24;10758:5;10707:8;:57::i;:::-;10480:309;10408:387;10319:476;;;:::o;5297:300::-;5396:1;5380:18;;:4;:18;;;5376:86;;5448:1;5421:30;;;;;;;;;;;:::i;:::-;;;;;;;;5376:86;5489:1;5475:16;;:2;:16;;;5471:86;;5543:1;5514:32;;;;;;;;;;;:::i;:::-;;;;;;;;5471:86;5566:24;5574:4;5580:2;5584:5;5566:7;:24::i;:::-;5297:300;;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2912:187::-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;5912:1107:2:-;6017:1;6001:18;;:4;:18;;;5997:540;;6153:5;6137:12;;:21;;;;;;;:::i;:::-;;;;;;;;5997:540;;;6189:19;6211:9;:15;6221:4;6211:15;;;;;;;;;;;;;;;;6189:37;;6258:5;6244:11;:19;6240:115;;;6315:4;6321:11;6334:5;6290:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6240:115;6507:5;6493:11;:19;6475:9;:15;6485:4;6475:15;;;;;;;;;;;;;;;:37;;;;6175:362;5997:540;6565:1;6551:16;;:2;:16;;;6547:425;;6730:5;6714:12;;:21;;;;;;;;;;;6547:425;;;6942:5;6925:9;:13;6935:2;6925:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6547:425;7002:2;6987:25;;6996:4;6987:25;;;7006:5;6987:25;;;;;;:::i;:::-;;;;;;;;5912:1107;;;:::o;9605:432::-;9734:1;9717:19;;:5;:19;;;9713:89;;9788:1;9759:32;;;;;;;;;;;:::i;:::-;;;;;;;;9713:89;9834:1;9815:21;;:7;:21;;;9811:90;;9887:1;9859:31;;;;;;;;;;;:::i;:::-;;;;;;;;9811:90;9940:5;9910:11;:18;9922:5;9910:18;;;;;;;;;;;;;;;:27;9929:7;9910:27;;;;;;;;;;;;;;;:35;;;;9959:9;9955:76;;;10005:7;9989:31;;9998:5;9989:31;;;10014:5;9989:31;;;;;;:::i;:::-;;;;;;;;9955:76;9605:432;;;;:::o;7:99:8:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:139::-;376:6;371:3;366;360:23;417:1;408:6;403:3;399:16;392:27;287:139;;;:::o;432:102::-;473:6;524:2;520:7;515:2;508:5;504:14;500:28;490:38;;432:102;;;:::o;540:377::-;628:3;656:39;689:5;656:39;:::i;:::-;711:71;775:6;770:3;711:71;:::i;:::-;704:78;;791:65;849:6;844:3;837:4;830:5;826:16;791:65;:::i;:::-;881:29;903:6;881:29;:::i;:::-;876:3;872:39;865:46;;632:285;540:377;;;;:::o;923:313::-;1036:4;1074:2;1063:9;1059:18;1051:26;;1123:9;1117:4;1113:20;1109:1;1098:9;1094:17;1087:47;1151:78;1224:4;1215:6;1151:78;:::i;:::-;1143:86;;923:313;;;;:::o;1323:117::-;1432:1;1429;1422:12;1569:126;1606:7;1646:42;1639:5;1635:54;1624:65;;1569:126;;;:::o;1701:96::-;1738:7;1767:24;1785:5;1767:24;:::i;:::-;1756:35;;1701:96;;;:::o;1803:122::-;1876:24;1894:5;1876:24;:::i;:::-;1869:5;1866:35;1856:63;;1915:1;1912;1905:12;1856:63;1803:122;:::o;1931:139::-;1977:5;2015:6;2002:20;1993:29;;2031:33;2058:5;2031:33;:::i;:::-;1931:139;;;;:::o;2076:77::-;2113:7;2142:5;2131:16;;2076:77;;;:::o;2159:122::-;2232:24;2250:5;2232:24;:::i;:::-;2225:5;2222:35;2212:63;;2271:1;2268;2261:12;2212:63;2159:122;:::o;2287:139::-;2333:5;2371:6;2358:20;2349:29;;2387:33;2414:5;2387:33;:::i;:::-;2287:139;;;;:::o;2432:474::-;2500:6;2508;2557:2;2545:9;2536:7;2532:23;2528:32;2525:119;;;2563:79;;:::i;:::-;2525:119;2683:1;2708:53;2753:7;2744:6;2733:9;2729:22;2708:53;:::i;:::-;2698:63;;2654:117;2810:2;2836:53;2881:7;2872:6;2861:9;2857:22;2836:53;:::i;:::-;2826:63;;2781:118;2432:474;;;;;:::o;2912:90::-;2946:7;2989:5;2982:13;2975:21;2964:32;;2912:90;;;:::o;3008:109::-;3089:21;3104:5;3089:21;:::i;:::-;3084:3;3077:34;3008:109;;:::o;3123:210::-;3210:4;3248:2;3237:9;3233:18;3225:26;;3261:65;3323:1;3312:9;3308:17;3299:6;3261:65;:::i;:::-;3123:210;;;;:::o;3339:118::-;3426:24;3444:5;3426:24;:::i;:::-;3421:3;3414:37;3339:118;;:::o;3463:222::-;3556:4;3594:2;3583:9;3579:18;3571:26;;3607:71;3675:1;3664:9;3660:17;3651:6;3607:71;:::i;:::-;3463:222;;;;:::o;3691:619::-;3768:6;3776;3784;3833:2;3821:9;3812:7;3808:23;3804:32;3801:119;;;3839:79;;:::i;:::-;3801:119;3959:1;3984:53;4029:7;4020:6;4009:9;4005:22;3984:53;:::i;:::-;3974:63;;3930:117;4086:2;4112:53;4157:7;4148:6;4137:9;4133:22;4112:53;:::i;:::-;4102:63;;4057:118;4214:2;4240:53;4285:7;4276:6;4265:9;4261:22;4240:53;:::i;:::-;4230:63;;4185:118;3691:619;;;;;:::o;4316:86::-;4351:7;4391:4;4384:5;4380:16;4369:27;;4316:86;;;:::o;4408:112::-;4491:22;4507:5;4491:22;:::i;:::-;4486:3;4479:35;4408:112;;:::o;4526:214::-;4615:4;4653:2;4642:9;4638:18;4630:26;;4666:67;4730:1;4719:9;4715:17;4706:6;4666:67;:::i;:::-;4526:214;;;;:::o;4746:104::-;4791:7;4820:24;4838:5;4820:24;:::i;:::-;4809:35;;4746:104;;;:::o;4856:138::-;4937:32;4963:5;4937:32;:::i;:::-;4930:5;4927:43;4917:71;;4984:1;4981;4974:12;4917:71;4856:138;:::o;5000:155::-;5054:5;5092:6;5079:20;5070:29;;5108:41;5143:5;5108:41;:::i;:::-;5000:155;;;;:::o;5161:345::-;5228:6;5277:2;5265:9;5256:7;5252:23;5248:32;5245:119;;;5283:79;;:::i;:::-;5245:119;5403:1;5428:61;5481:7;5472:6;5461:9;5457:22;5428:61;:::i;:::-;5418:71;;5374:125;5161:345;;;;:::o;5512:329::-;5571:6;5620:2;5608:9;5599:7;5595:23;5591:32;5588:119;;;5626:79;;:::i;:::-;5588:119;5746:1;5771:53;5816:7;5807:6;5796:9;5792:22;5771:53;:::i;:::-;5761:63;;5717:117;5512:329;;;;:::o;5847:::-;5906:6;5955:2;5943:9;5934:7;5930:23;5926:32;5923:119;;;5961:79;;:::i;:::-;5923:119;6081:1;6106:53;6151:7;6142:6;6131:9;6127:22;6106:53;:::i;:::-;6096:63;;6052:117;5847:329;;;;:::o;6182:118::-;6269:24;6287:5;6269:24;:::i;:::-;6264:3;6257:37;6182:118;;:::o;6306:222::-;6399:4;6437:2;6426:9;6422:18;6414:26;;6450:71;6518:1;6507:9;6503:17;6494:6;6450:71;:::i;:::-;6306:222;;;;:::o;6534:474::-;6602:6;6610;6659:2;6647:9;6638:7;6634:23;6630:32;6627:119;;;6665:79;;:::i;:::-;6627:119;6785:1;6810:53;6855:7;6846:6;6835:9;6831:22;6810:53;:::i;:::-;6800:63;;6756:117;6912:2;6938:53;6983:7;6974:6;6963:9;6959:22;6938:53;:::i;:::-;6928:63;;6883:118;6534:474;;;;;:::o;7014:156::-;7154:8;7150:1;7142:6;7138:14;7131:32;7014:156;:::o;7176:365::-;7318:3;7339:66;7403:1;7398:3;7339:66;:::i;:::-;7332:73;;7414:93;7503:3;7414:93;:::i;:::-;7532:2;7527:3;7523:12;7516:19;;7176:365;;;:::o;7547:419::-;7713:4;7751:2;7740:9;7736:18;7728:26;;7800:9;7794:4;7790:20;7786:1;7775:9;7771:17;7764:47;7828:131;7954:4;7828:131;:::i;:::-;7820:139;;7547:419;;;:::o;7972:180::-;8020:77;8017:1;8010:88;8117:4;8114:1;8107:15;8141:4;8138:1;8131:15;8158:102;8200:8;8247:5;8244:1;8240:13;8219:34;;8158:102;;;:::o;8266:848::-;8327:5;8334:4;8358:6;8349:15;;8382:5;8373:14;;8396:712;8417:1;8407:8;8404:15;8396:712;;;8512:4;8507:3;8503:14;8497:4;8494:24;8491:50;;;8521:18;;:::i;:::-;8491:50;8571:1;8561:8;8557:16;8554:451;;;8986:4;8979:5;8975:16;8966:25;;8554:451;9036:4;9030;9026:15;9018:23;;9066:32;9089:8;9066:32;:::i;:::-;9054:44;;8396:712;;;8266:848;;;;;;;:::o;9120:1073::-;9174:5;9365:8;9355:40;;9386:1;9377:10;;9388:5;;9355:40;9414:4;9404:36;;9431:1;9422:10;;9433:5;;9404:36;9500:4;9548:1;9543:27;;;;9584:1;9579:191;;;;9493:277;;9543:27;9561:1;9552:10;;9563:5;;;9579:191;9624:3;9614:8;9611:17;9608:43;;;9631:18;;:::i;:::-;9608:43;9680:8;9677:1;9673:16;9664:25;;9715:3;9708:5;9705:14;9702:40;;;9722:18;;:::i;:::-;9702:40;9755:5;;;9493:277;;9879:2;9869:8;9866:16;9860:3;9854:4;9851:13;9847:36;9829:2;9819:8;9816:16;9811:2;9805:4;9802:12;9798:35;9782:111;9779:246;;;9935:8;9929:4;9925:19;9916:28;;9970:3;9963:5;9960:14;9957:40;;;9977:18;;:::i;:::-;9957:40;10010:5;;9779:246;10050:42;10088:3;10078:8;10072:4;10069:1;10050:42;:::i;:::-;10035:57;;;;10124:4;10119:3;10115:14;10108:5;10105:25;10102:51;;;10133:18;;:::i;:::-;10102:51;10182:4;10175:5;10171:16;10162:25;;9120:1073;;;;;;:::o;10199:281::-;10257:5;10281:23;10299:4;10281:23;:::i;:::-;10273:31;;10325:25;10341:8;10325:25;:::i;:::-;10313:37;;10369:104;10406:66;10396:8;10390:4;10369:104;:::i;:::-;10360:113;;10199:281;;;;:::o;10486:410::-;10526:7;10549:20;10567:1;10549:20;:::i;:::-;10544:25;;10583:20;10601:1;10583:20;:::i;:::-;10578:25;;10638:1;10635;10631:9;10660:30;10678:11;10660:30;:::i;:::-;10649:41;;10839:1;10830:7;10826:15;10823:1;10820:22;10800:1;10793:9;10773:83;10750:139;;10869:18;;:::i;:::-;10750:139;10534:362;10486:410;;;;:::o;10902:180::-;10950:77;10947:1;10940:88;11047:4;11044:1;11037:15;11071:4;11068:1;11061:15;11088:185;11128:1;11145:20;11163:1;11145:20;:::i;:::-;11140:25;;11179:20;11197:1;11179:20;:::i;:::-;11174:25;;11218:1;11208:35;;11223:18;;:::i;:::-;11208:35;11265:1;11262;11258:9;11253:14;;11088:185;;;;:::o;11279:164::-;11419:16;11415:1;11407:6;11403:14;11396:40;11279:164;:::o;11449:366::-;11591:3;11612:67;11676:2;11671:3;11612:67;:::i;:::-;11605:74;;11688:93;11777:3;11688:93;:::i;:::-;11806:2;11801:3;11797:12;11790:19;;11449:366;;;:::o;11821:419::-;11987:4;12025:2;12014:9;12010:18;12002:26;;12074:9;12068:4;12064:20;12060:1;12049:9;12045:17;12038:47;12102:131;12228:4;12102:131;:::i;:::-;12094:139;;11821:419;;;:::o;12246:332::-;12367:4;12405:2;12394:9;12390:18;12382:26;;12418:71;12486:1;12475:9;12471:17;12462:6;12418:71;:::i;:::-;12499:72;12567:2;12556:9;12552:18;12543:6;12499:72;:::i;:::-;12246:332;;;;;:::o;12584:180::-;12632:77;12629:1;12622:88;12729:4;12726:1;12719:15;12753:4;12750:1;12743:15;12770:320;12814:6;12851:1;12845:4;12841:12;12831:22;;12898:1;12892:4;12888:12;12919:18;12909:81;;12975:4;12967:6;12963:17;12953:27;;12909:81;13037:2;13029:6;13026:14;13006:18;13003:38;13000:84;;13056:18;;:::i;:::-;13000:84;12821:269;12770:320;;;:::o;13096:154::-;13236:6;13232:1;13224:6;13220:14;13213:30;13096:154;:::o;13256:365::-;13398:3;13419:66;13483:1;13478:3;13419:66;:::i;:::-;13412:73;;13494:93;13583:3;13494:93;:::i;:::-;13612:2;13607:3;13603:12;13596:19;;13256:365;;;:::o;13627:419::-;13793:4;13831:2;13820:9;13816:18;13808:26;;13880:9;13874:4;13870:20;13866:1;13855:9;13851:17;13844:47;13908:131;14034:4;13908:131;:::i;:::-;13900:139;;13627:419;;;:::o;14052:155::-;14192:7;14188:1;14180:6;14176:14;14169:31;14052:155;:::o;14213:365::-;14355:3;14376:66;14440:1;14435:3;14376:66;:::i;:::-;14369:73;;14451:93;14540:3;14451:93;:::i;:::-;14569:2;14564:3;14560:12;14553:19;;14213:365;;;:::o;14584:419::-;14750:4;14788:2;14777:9;14773:18;14765:26;;14837:9;14831:4;14827:20;14823:1;14812:9;14808:17;14801:47;14865:131;14991:4;14865:131;:::i;:::-;14857:139;;14584:419;;;:::o;15009:147::-;15110:11;15147:3;15132:18;;15009:147;;;;:::o;15162:114::-;;:::o;15282:398::-;15441:3;15462:83;15543:1;15538:3;15462:83;:::i;:::-;15455:90;;15554:93;15643:3;15554:93;:::i;:::-;15672:1;15667:3;15663:11;15656:18;;15282:398;;;:::o;15686:379::-;15870:3;15892:147;16035:3;15892:147;:::i;:::-;15885:154;;16056:3;16049:10;;15686:379;;;:::o;16071:163::-;16211:15;16207:1;16199:6;16195:14;16188:39;16071:163;:::o;16240:366::-;16382:3;16403:67;16467:2;16462:3;16403:67;:::i;:::-;16396:74;;16479:93;16568:3;16479:93;:::i;:::-;16597:2;16592:3;16588:12;16581:19;;16240:366;;;:::o;16612:419::-;16778:4;16816:2;16805:9;16801:18;16793:26;;16865:9;16859:4;16855:20;16851:1;16840:9;16836:17;16829:47;16893:131;17019:4;16893:131;:::i;:::-;16885:139;;16612:419;;;:::o;17037:157::-;17177:9;17173:1;17165:6;17161:14;17154:33;17037:157;:::o;17200:365::-;17342:3;17363:66;17427:1;17422:3;17363:66;:::i;:::-;17356:73;;17438:93;17527:3;17438:93;:::i;:::-;17556:2;17551:3;17547:12;17540:19;;17200:365;;;:::o;17571:419::-;17737:4;17775:2;17764:9;17760:18;17752:26;;17824:9;17818:4;17814:20;17810:1;17799:9;17795:17;17788:47;17852:131;17978:4;17852:131;:::i;:::-;17844:139;;17571:419;;;:::o;17996:442::-;18145:4;18183:2;18172:9;18168:18;18160:26;;18196:71;18264:1;18253:9;18249:17;18240:6;18196:71;:::i;:::-;18277:72;18345:2;18334:9;18330:18;18321:6;18277:72;:::i;:::-;18359;18427:2;18416:9;18412:18;18403:6;18359:72;:::i;:::-;17996:442;;;;;;:::o;18444:191::-;18484:3;18503:20;18521:1;18503:20;:::i;:::-;18498:25;;18537:20;18555:1;18537:20;:::i;:::-;18532:25;;18580:1;18577;18573:9;18566:16;;18601:3;18598:1;18595:10;18592:36;;;18608:18;;:::i;:::-;18592:36;18444:191;;;;:::o"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tontract CarbonoToken20 is ERC2...\n  PUSH 40\t\t\tontract CarbonoToken20 is ERC2...\n  MSTORE \t\t\tontract CarbonoToken20 is ERC2...\n  PUSH 38D7EA4C68000\t\t\te15;\n  PUSH 7\t\t\tint256 public priceWeiPerToken...\n  SSTORE \t\t\tint256 public priceWeiPerToken...\n  CALLVALUE \t\t\tonstructor() ERC20(\"CarbonoTok...\n  DUP1 \t\t\tonstructor() ERC20(\"CarbonoTok...\n  ISZERO \t\t\tonstructor() ERC20(\"CarbonoTok...\n  PUSH [tag] 1\t\t\tonstructor() ERC20(\"CarbonoTok...\n  JUMPI \t\t\tonstructor() ERC20(\"CarbonoTok...\n  PUSH 0\t\t\tonstructor() ERC20(\"CarbonoTok...\n  PUSH 0\t\t\tonstructor() ERC20(\"CarbonoTok...\n  REVERT \t\t\tonstructor() ERC20(\"CarbonoTok...\ntag 1\t\t\tonstructor() ERC20(\"CarbonoTok...\n  JUMPDEST \t\t\tonstructor() ERC20(\"CarbonoTok...\n  POP \t\t\tonstructor() ERC20(\"CarbonoTok...\n  CALLER \t\t\tsg.sender)\n  PUSH 40\t\t\t /// @notice Cambiar el precio...\n  MLOAD \t\t\t /// @notice Cambiar el precio...\n  DUP1 \t\t\t /// @notice Cambiar el precio...\n  PUSH 40\t\t\t /// @notice Cambiar el precio...\n  ADD \t\t\t /// @notice Cambiar el precio...\n  PUSH 40\t\t\t /// @notice Cambiar el precio...\n  MSTORE \t\t\t /// @notice Cambiar el precio...\n  DUP1 \t\t\t /// @notice Cambiar el precio...\n  PUSH E\t\t\t /// @notice Cambiar el precio...\n  DUP2 \t\t\t /// @notice Cambiar el precio...\n  MSTORE \t\t\t /// @notice Cambiar el precio...\n  PUSH 20\t\t\t /// @notice Cambiar el precio...\n  ADD \t\t\t /// @notice Cambiar el precio...\n  PUSH 436172626F6E6F546F6B656E3230000000000000000000000000000000000000\t\t\t /// @notice Cambiar el precio...\n  DUP2 \t\t\t /// @notice Cambiar el precio...\n  MSTORE \t\t\t /// @notice Cambiar el precio...\n  POP \t\t\t /// @notice Cambiar el precio...\n  PUSH 40\t\t\t /// @notice Cambiar el precio...\n  MLOAD \t\t\t /// @notice Cambiar el precio...\n  DUP1 \t\t\t /// @notice Cambiar el precio...\n  PUSH 40\t\t\t /// @notice Cambiar el precio...\n  ADD \t\t\t /// @notice Cambiar el precio...\n  PUSH 40\t\t\t /// @notice Cambiar el precio...\n  MSTORE \t\t\t /// @notice Cambiar el precio...\n  DUP1 \t\t\t /// @notice Cambiar el precio...\n  PUSH 3\t\t\t /// @notice Cambiar el precio...\n  DUP2 \t\t\t /// @notice Cambiar el precio...\n  MSTORE \t\t\t /// @notice Cambiar el precio...\n  PUSH 20\t\t\t /// @notice Cambiar el precio...\n  ADD \t\t\t /// @notice Cambiar el precio...\n  PUSH 43424F0000000000000000000000000000000000000000000000000000000000\t\t\t /// @notice Cambiar el precio...\n  DUP2 \t\t\t /// @notice Cambiar el precio...\n  MSTORE \t\t\t /// @notice Cambiar el precio...\n  POP \t\t\t /// @notice Cambiar el precio...\n  DUP2 \t\t\tToken\n  PUSH 3\t\t\tceWei\n  SWAP1 \t\t\tceWeiPerToken\n  DUP2 \t\t\tceWeiPerToken\n  PUSH [tag] 7\t\t\tceWeiPerToken\n  SWAP2 \t\t\tceWeiPerToken\n  SWAP1 \t\t\tceWeiPerToken\n  PUSH [tag] 8\t\t\tceWeiPerToken\n  JUMP \t\t\tceWeiPerToken\ntag 7\t\t\tceWeiPerToken\n  JUMPDEST \t\t\tceWeiPerToken\n  POP \t\t\tceWeiPerToken\n  DUP1 \t\t\txternal\n  PUSH 4\t\t\tewPrice\n  SWAP1 \t\t\tewPrice) external\n  DUP2 \t\t\tewPrice) external\n  PUSH [tag] 9\t\t\tewPrice) external\n  SWAP2 \t\t\tewPrice) external\n  SWAP1 \t\t\tewPrice) external\n  PUSH [tag] 8\t\t\tewPrice) external\n  JUMP \t\t\tewPrice) external\ntag 9\t\t\tewPrice) external\n  JUMPDEST \t\t\tewPrice) external\n  POP \t\t\tewPrice) external\n  POP \t\t\t /// @notice Cambiar el precio...\n  POP \t\t\t /// @notice Cambiar el precio...\n  PUSH 0\t\t\tr\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t nonReentrant {\\n        re\n  AND \t\t\t nonReentrant {\\n        re\n  DUP2 \t\t\t nonReentran\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t nonReentrant {\\n        re\n  AND \t\t\t nonReentrant {\\n        re\n  SUB \t\t\t nonReentrant {\\n        re\n  PUSH [tag] 11\t\t\table nonReentrant {\\n        r...\n  JUMPI \t\t\table nonReentrant {\\n        r...\n  PUSH 0\t\t\te\n  PUSH 40\t\t\to ETH\");\\n        uint256 toke...\n  MLOAD \t\t\to ETH\");\\n        uint256 toke...\n  PUSH 1E4FBDF700000000000000000000000000000000000000000000000000000000\t\t\to ETH\");\\n        uint256 toke...\n  DUP2 \t\t\to ETH\");\\n        uint256 toke...\n  MSTORE \t\t\to ETH\");\\n        uint256 toke...\n  PUSH 4\t\t\to ETH\");\\n        uint256 toke...\n  ADD \t\t\to ETH\");\\n        uint256 toke...\n  PUSH [tag] 12\t\t\to ETH\");\\n        uint256 toke...\n  SWAP2 \t\t\to ETH\");\\n        uint256 toke...\n  SWAP1 \t\t\to ETH\");\\n        uint256 toke...\n  PUSH [tag] 13\t\t\to ETH\");\\n        uint256 toke...\n  JUMP \t\t\to ETH\");\\n        uint256 toke...\ntag 12\t\t\to ETH\");\\n        uint256 toke...\n  JUMPDEST \t\t\to ETH\");\\n        uint256 toke...\n  PUSH 40\t\t\to ETH\");\\n        uint256 toke...\n  MLOAD \t\t\to ETH\");\\n        uint256 toke...\n  DUP1 \t\t\to ETH\");\\n        uint256 toke...\n  SWAP2 \t\t\to ETH\");\\n        uint256 toke...\n  SUB \t\t\to ETH\");\\n        uint256 toke...\n  SWAP1 \t\t\to ETH\");\\n        uint256 toke...\n  REVERT \t\t\to ETH\");\\n        uint256 toke...\ntag 11\t\t\table nonReentrant {\\n        r...\n  JUMPDEST \t\t\table nonReentrant {\\n        r...\n  PUSH [tag] 14\t\t\t10 ** decimals())) / priceWeiP...\n  DUP2 \t\t\t/ priceWeiPe\n  PUSH [tag] 15\t\t\t10 ** decimals()))\n  PUSH 20\t\t\t10 ** decimals()))\n  SHL \t\t\t10 ** decimals()))\n  PUSH 20\t\t\t10 ** decimals())) / priceWeiP...\n  SHR \t\t\t10 ** decimals())) / priceWeiP...\n  JUMP \t\t\t10 ** decimals())) / priceWeiP...\ntag 14\t\t\t10 ** decimals())) / priceWeiP...\n  JUMPDEST \t\t\t10 ** decimals())) / priceWeiP...\n  POP \t\t\t\\n    function buyCarbonoToken...\n  PUSH 1\t\t\tc\n  PUSH 6\t\t\tool ok,\n  DUP2 \t\t\tool ok, ) = to.call{v\n  SWAP1 \t\t\tool ok, ) = to.call{v\n  SSTORE \t\t\tool ok, ) = to.call{v\n  POP \t\t\tool ok, ) = to.call{v\n  PUSH [tag] 18\t\t\tontract CarbonoToken20 is ERC2...\n  JUMP \t\t\tontract CarbonoToken20 is ERC2...\ntag 15\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 5\t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  SLOAD \t\t\t\n  SWAP1 \t\t\t\n  PUSH 100\t\t\t\n  EXP \t\t\t\n  SWAP1 \t\t\t\n  DIV \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 5\t\t\t\n  PUSH 0\t\t\t\n  PUSH 100\t\t\t\n  EXP \t\t\t\n  DUP2 \t\t\t\n  SLOAD \t\t\t\n  DUP2 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  MUL \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  SWAP1 \t\t\t\n  DUP4 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  MUL \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  LOG3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 20\t\t\t-License-Identifier: MIT\\n// C...\n  JUMPDEST \t\t\t-License-Identifier: MIT\\n// C...\n  PUSH 0\t\t\telin C\n  DUP2 \t\t\tity ^\n  MLOAD \t\t\t solidity ^0\n  SWAP1 \t\t\t4.0\\npragma solidity ^0\n  POP \t\t\t4.0\\npragma solidity ^0\n  SWAP2 \t\t\t-License-Identifier: MIT\\n// C...\n  SWAP1 \t\t\t-License-Identifier: MIT\\n// C...\n  POP \t\t\t-License-Identifier: MIT\\n// C...\n  JUMP \t\t\t-License-Identifier: MIT\\n// C...\ntag 21\t\t\tt {ERC20} from \"@openzeppelin/...\n  JUMPDEST \t\t\tt {ERC20} from \"@openzeppelin/...\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tC20/ERC20.sol\";\\nimport {Ownab...\n  PUSH 0\t\t\t/\n  MSTORE \t\t\ts/token/ERC20/ERC20.sol\";\\nimp...\n  PUSH 41\t\t\tranc\n  PUSH 4\t\t\te\n  MSTORE \t\t\tort {Reentrancy\n  PUSH 24\t\t\teppe\n  PUSH 0\t\t\te\n  REVERT \t\t\tom \"@openzeppel\ntag 22\t\t\t/utils/ReentrancyGuard.sol\";\\n...\n  JUMPDEST \t\t\t/utils/ReentrancyGuard.sol\";\\n...\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tonoToken20 (CBO)\\n * @notice E...\n  PUSH 0\t\t\ta\n  MSTORE \t\t\ttitle CarbonoToken20 (CBO)\\n *...\n  PUSH 22\t\t\t01 E\n  PUSH 4\t\t\t0\n  MSTORE \t\t\tfecto: 0.001 ET\n  PUSH 24\t\t\t pri\n  PUSH 0\t\t\t \n  REVERT \t\t\tBO.\\n *   - pric\ntag 23\t\t\t (wei por token, 18 decimales)...\n  JUMPDEST \t\t\t (wei por token, 18 decimales)...\n  PUSH 0\t\t\tceWeiP\n  PUSH 2\t\t\tl\n  DUP3 \t\t\tio (\n  DIV \t\t\tprecio (solo\n  SWAP1 \t\t\tcambia el precio (solo\n  POP \t\t\tcambia el precio (solo\n  PUSH 1\t\t\ta\n  DUP3 \t\t\table\n  AND \t\t\t payable, ac\n  DUP1 \t\t\tl a msg.value\\n *  \n  PUSH [tag] 48\t\t\troporcional a msg.value\\n *   ...\n  JUMPI \t\t\troporcional a msg.value\\n *   ...\n  PUSH 7F\t\t\t (so\n  DUP3 \t\t\tcumula\n  AND \t\t\tTH acumulado (sol\n  SWAP2 \t\t\tetira el ETH acumulado (sol\n  POP \t\t\tetira el ETH acumulado (sol\ntag 48\t\t\troporcional a msg.value\\n *   ...\n  JUMPDEST \t\t\troporcional a msg.value\\n *   ...\n  PUSH 20\t\t\ter\n  DUP3 \t\t\triceWe\n  LT \t\t\t/ priceWeiPerT\n  DUP2 \t\t\t (msg.value * 1e18\n  SUB \t\t\tt = (msg.value * 1e18) / price...\n  PUSH [tag] 49\t\t\tsOut = (msg.value * 1e18) / pr...\n  JUMPI \t\t\tsOut = (msg.value * 1e18) / pr...\n  PUSH [tag] 50\t\t\tt CarbonoToken20 i\n  PUSH [tag] 22\t\t\tt CarbonoToken20 i\n  JUMP \t\t\tt CarbonoToken20 i\ntag 50\t\t\tt CarbonoToken20 i\n  JUMPDEST \t\t\tt CarbonoToken20 i\ntag 49\t\t\tsOut = (msg.value * 1e18) / pr...\n  JUMPDEST \t\t\tsOut = (msg.value * 1e18) / pr...\n  POP \t\t\trToken(): cambia el precio (so...\n  SWAP2 \t\t\t (wei por token, 18 decimales)...\n  SWAP1 \t\t\t (wei por token, 18 decimales)...\n  POP \t\t\t (wei por token, 18 decimales)...\n  JUMP \t\t\t (wei por token, 18 decimales)...\ntag 24\t\t\ttrancyGuard {\\n    // Por defe...\n  JUMPDEST \t\t\ttrancyGuard {\\n    // Por defe...\n  PUSH 0\t\t\t1 CB\n  DUP2 \t\t\tnt2\n  SWAP1 \t\t\t)\\n    uint2\n  POP \t\t\t)\\n    uint2\n  DUP2 \t\t\trTo\n  PUSH 0\t\t\ti\n  MSTORE \t\t\tpriceWeiPerTok\n  PUSH 20\t\t\token\n  PUSH 0\t\t\tn\n  KECCAK256 \t\t\tvent CarbonoToken2\n  SWAP1 \t\t\t;\\n\\n    event CarbonoToken2\n  POP \t\t\t;\\n\\n    event CarbonoToken2\n  SWAP2 \t\t\ttrancyGuard {\\n    // Por defe...\n  SWAP1 \t\t\ttrancyGuard {\\n    // Por defe...\n  POP \t\t\ttrancyGuard {\\n    // Por defe...\n  JUMP \t\t\ttrancyGuard {\\n    // Por defe...\ntag 25\t\t\tdress indexed buyer, uint256 e...\n  JUMPDEST \t\t\tdress indexed buyer, uint256 e...\n  PUSH 0\t\t\tint256\n  PUSH 20\t\t\t56\n  PUSH 1F\t\t\tui\n  DUP4 \t\t\tpdate\n  ADD \t\t\ticeUpdated(uin\n  DIV \t\t\tt PriceUpdated(uint256 \n  SWAP1 \t\t\t;\\n    event PriceUpdated(uint...\n  POP \t\t\t;\\n    event PriceUpdated(uint...\n  SWAP2 \t\t\tdress indexed buyer, uint256 e...\n  SWAP1 \t\t\tdress indexed buyer, uint256 e...\n  POP \t\t\tdress indexed buyer, uint256 e...\n  JUMP \t\t\tdress indexed buyer, uint256 e...\ntag 26\t\t\t   event Withdraw(address inde...\n  JUMPDEST \t\t\t   event Withdraw(address inde...\n  PUSH 0\t\t\t6 amount\n  DUP3 \t\t\t0\", \"\n  DUP3 \t\t\tToke\n  SHL \t\t\tbonoToken20\", \"C\n  SWAP1 \t\t\tstructor() ERC20(\"CarbonoToken...\n  POP \t\t\tstructor() ERC20(\"CarbonoToken...\n  SWAP3 \t\t\t   event Withdraw(address inde...\n  SWAP2 \t\t\t   event Withdraw(address inde...\n  POP \t\t\t   event Withdraw(address inde...\n  POP \t\t\t   event Withdraw(address inde...\n  JUMP \t\t\t   event Withdraw(address inde...\ntag 27\t\t\tmsg.sender) {}\\n\\n    /// @not...\n  JUMPDEST \t\t\tmsg.sender) {}\\n\\n    /// @not...\n  PUSH 0\t\t\t buyCa\n  PUSH 8\t\t\t\\n\n  DUP4 \t\t\tnReentrant\n  MUL \t\t\te nonReentrant {\\n \n  PUSH [tag] 55\t\t\tlue > 0, \"no ETH\");\\n        u...\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnt256 tokensOut = (msg.value *...\n  DUP3 \t\t\t\\n        \n  PUSH [tag] 26\t\t\tlue > 0, \"no ETH\");\\n        u...\n  JUMP \t\t\tlue > 0, \"no ETH\");\\n        u...\ntag 55\t\t\tlue > 0, \"no ETH\");\\n        u...\n  JUMPDEST \t\t\tlue > 0, \"no ETH\");\\n        u...\n  PUSH [tag] 56\t\t\tokensOut > 0, \"too little ETH\"...\n  DUP7 \t\t\t);\\n     \n  DUP4 \t\t\tlittle ET\n  PUSH [tag] 26\t\t\tokensOut > 0, \"too little ETH\"...\n  JUMP \t\t\tokensOut > 0, \"too little ETH\"...\ntag 56\t\t\tokensOut > 0, \"too little ETH\"...\n  JUMPDEST \t\t\tokensOut > 0, \"too little ETH\"...\n  SWAP6 \t\t\t   require(tokensOut > 0, \"too...\n  POP \t\t\t   require(tokensOut > 0, \"too...\n  DUP1 \t\t\t    \n  NOT \t\t\t);\\n      \n  DUP5 \t\t\tkensO\n  AND \t\t\t, tokensOut);\\n       \n  SWAP4 \t\t\tsg.sender, tokensOut);\\n      ...\n  POP \t\t\tsg.sender, tokensOut);\\n      ...\n  DUP1 \t\t\tsg.v\n  DUP7 \t\t\t.sender,\n  AND \t\t\t(msg.sender, msg.va\n  DUP5 \t\t\trchas\n  OR \t\t\t0Purchased(msg.sender, msg.val\n  SWAP3 \t\t\tbonoToken20Purchased(msg.sende...\n  POP \t\t\tbonoToken20Purchased(msg.sende...\n  POP \t\t\tbonoToken20() public payable n...\n  POP \t\t\tbonoToken20() public payable n...\n  SWAP4 \t\t\tmsg.sender) {}\\n\\n    /// @not...\n  SWAP3 \t\t\tmsg.sender) {}\\n\\n    /// @not...\n  POP \t\t\tmsg.sender) {}\\n\\n    /// @not...\n  POP \t\t\tmsg.sender) {}\\n\\n    /// @not...\n  POP \t\t\tmsg.sender) {}\\n\\n    /// @not...\n  JUMP \t\t\tmsg.sender) {}\\n\\n    /// @not...\ntag 28\t\t\tt);\\n    }\\n\\n    /// @notice ...\n  JUMPDEST \t\t\tt);\\n    }\\n\\n    /// @notice ...\n  PUSH 0\t\t\t precio\n  DUP2 \t\t\tuncti\n  SWAP1 \t\t\t CBO)\\n    functi\n  POP \t\t\t CBO)\\n    functi\n  SWAP2 \t\t\tt);\\n    }\\n\\n    /// @notice ...\n  SWAP1 \t\t\tt);\\n    }\\n\\n    /// @notice ...\n  POP \t\t\tt);\\n    }\\n\\n    /// @notice ...\n  JUMP \t\t\tt);\\n    }\\n\\n    /// @notice ...\ntag 29\t\t\teiPerToken(uint256 newPrice) e...\n  JUMPDEST \t\t\teiPerToken(uint256 newPrice) e...\n  PUSH 0\t\t\t ex\n  DUP2 \t\t\t\\n    \n  SWAP1 \t\t\tOwner {\\n    \n  POP \t\t\tOwner {\\n    \n  SWAP2 \t\t\teiPerToken(uint256 newPrice) e...\n  SWAP1 \t\t\teiPerToken(uint256 newPrice) e...\n  POP \t\t\teiPerToken(uint256 newPrice) e...\n  JUMP \t\t\teiPerToken(uint256 newPrice) e...\ntag 30\t\t\tnewPrice > 0, \"price=0\");\\n   ...\n  JUMPDEST \t\t\tnewPrice > 0, \"price=0\");\\n   ...\n  PUSH 0\t\t\t = newPri\n  PUSH [tag] 60\t\t\tdated(newPrice);\\n    }\\n\\n   ...\n  PUSH [tag] 61\t\t\t   }\\n\\n    /// @notice Retira...\n  PUSH [tag] 62\t\t\t /// @notice Retirar el \n  DUP5 \t\t\tar el\n  PUSH [tag] 28\t\t\t /// @notice Retirar el \n  JUMP \t\t\t /// @notice Retirar el \ntag 62\t\t\t /// @notice Retirar el \n  JUMPDEST \t\t\t /// @notice Retirar el \n  PUSH [tag] 29\t\t\t   }\\n\\n    /// @notice Retira...\n  JUMP \t\t\t   }\\n\\n    /// @notice Retira...\ntag 61\t\t\t   }\\n\\n    /// @notice Retira...\n  JUMPDEST \t\t\t   }\\n\\n    /// @notice Retira...\n  PUSH [tag] 28\t\t\tdated(newPrice);\\n    }\\n\\n   ...\n  JUMP \t\t\tdated(newPrice);\\n    }\\n\\n   ...\ntag 60\t\t\tdated(newPrice);\\n    }\\n\\n   ...\n  JUMPDEST \t\t\tdated(newPrice);\\n    }\\n\\n   ...\n  SWAP1 \t\t\t emit PriceUpdated(newPrice);\\...\n  POP \t\t\t emit PriceUpdated(newPrice);\\...\n  SWAP2 \t\t\tnewPrice > 0, \"price=0\");\\n   ...\n  SWAP1 \t\t\tnewPrice > 0, \"price=0\");\\n   ...\n  POP \t\t\tnewPrice > 0, \"price=0\");\\n   ...\n  JUMP \t\t\tnewPrice > 0, \"price=0\");\\n   ...\ntag 31\t\t\t    function withdraw(address ...\n  JUMPDEST \t\t\t    function withdraw(address ...\n  PUSH 0\t\t\txte\n  DUP2 \t\t\t     \n  SWAP1 \t\t\tner {\\n      \n  POP \t\t\tner {\\n      \n  SWAP2 \t\t\t    function withdraw(address ...\n  SWAP1 \t\t\t    function withdraw(address ...\n  POP \t\t\t    function withdraw(address ...\n  JUMP \t\t\t    function withdraw(address ...\ntag 32\t\t\t != address(0), \"to=0\");\\n    ...\n  JUMPDEST \t\t\t != address(0), \"to=0\");\\n    ...\n  PUSH [tag] 65\t\t\t   (bool ok, ) = to.call{value...\n  DUP4 \t\t\t bal}(\"\n  PUSH [tag] 30\t\t\t   (bool ok, ) = to.call{value...\n  JUMP \t\t\t   (bool ok, ) = to.call{value...\ntag 65\t\t\t   (bool ok, ) = to.call{value...\n  JUMPDEST \t\t\t   (bool ok, ) = to.call{value...\n  PUSH [tag] 66\t\t\t \"withdraw fail\");\\n        em...\n  PUSH [tag] 67\t\t\t;\\n    }\\n\\n    /// @notice Re...\n  DUP3 \t\t\t Recibir ETH dir\n  PUSH [tag] 31\t\t\t;\\n    }\\n\\n    /// @notice Re...\n  JUMP \t\t\t;\\n    }\\n\\n    /// @notice Re...\ntag 67\t\t\t;\\n    }\\n\\n    /// @notice Re...\n  JUMPDEST \t\t\t;\\n    }\\n\\n    /// @notice Re...\n  DUP5 \t\t\tto, ba\n  DUP5 \t\t\tthdr\n  SLOAD \t\t\tmit Withdra\n  PUSH [tag] 27\t\t\t \"withdraw fail\");\\n        em...\n  JUMP \t\t\t \"withdraw fail\");\\n        em...\ntag 66\t\t\t \"withdraw fail\");\\n        em...\n  JUMPDEST \t\t\t \"withdraw fail\");\\n        em...\n  DUP3 \t\t\tre(o\n  SSTORE \t\t\t  require(ok, \"withdraw fail\")...\n  POP \t\t\t  require(bal > 0, \"empty\");\\n...\n  POP \t\t\t != address(0), \"to=0\");\\n    ...\n  POP \t\t\t != address(0), \"to=0\");\\n    ...\n  POP \t\t\t != address(0), \"to=0\");\\n    ...\n  JUMP \t\t\t != address(0), \"to=0\");\\n    ...\ntag 33\t\t\tmpra CBO\\n    receive() extern...\n  JUMPDEST \t\t\tmpra CBO\\n    receive() extern...\n  PUSH 0\t\t\t   \n  PUSH 0\t\t\t0\n  SWAP1 \t\t\toToken20\n  POP \t\t\toToken20\n  SWAP1 \t\t\tmpra CBO\\n    receive() extern...\n  JUMP \t\t\tmpra CBO\\n    receive() extern...\ntag 34\t\t\t\\n\n  JUMPDEST \t\t\t\\n\n  PUSH [tag] 70\t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 70\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 71\t\t\t\n  DUP2 \t\t\t\n  DUP5 \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 32\t\t\t\n  JUMP \t\t\t\ntag 71\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\\n\n  POP \t\t\t\\n\n  JUMP \t\t\t\\n\ntag 35\t\t\t\n  JUMPDEST \t\t\t\ntag 73\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 75\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 76\t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 34\t\t\t\n  JUMP \t\t\t\ntag 76\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 73\t\t\t\n  JUMP \t\t\t\ntag 75\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 36\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 78\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 79\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 24\t\t\t\n  JUMP \t\t\t\ntag 79\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 80\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 25\t\t\t\n  JUMP \t\t\t\ntag 80\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 81\t\t\t\n  JUMPI \t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 81\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 82\t\t\t\n  PUSH [tag] 83\t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 25\t\t\t\n  JUMP \t\t\t\ntag 83\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 35\t\t\t\n  JUMP \t\t\t\ntag 82\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 78\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 37\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SHR \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 38\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 86\t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  PUSH 8\t\t\t\n  MUL \t\t\t\n  PUSH [tag] 37\t\t\t\n  JUMP \t\t\t\ntag 86\t\t\t\n  JUMPDEST \t\t\t\n  NOT \t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 39\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 88\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 38\t\t\t\n  JUMP \t\t\t\ntag 88\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP3 \t\t\t\n  PUSH 2\t\t\t\n  MUL \t\t\t\n  DUP3 \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 8\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 90\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 20\t\t\t\n  JUMP \t\t\t\ntag 90\t\t\t\n  JUMPDEST \t\t\t\n  PUSH FFFFFFFFFFFFFFFF\t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 91\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 92\t\t\t\n  PUSH [tag] 21\t\t\t\n  JUMP \t\t\t\ntag 92\t\t\t\n  JUMPDEST \t\t\t\ntag 91\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 93\t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 23\t\t\t\n  JUMP \t\t\t\ntag 93\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 94\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 36\t\t\t\n  JUMP \t\t\t\ntag 94\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 96\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 97\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  DUP8 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 97\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 98\t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 39\t\t\t\n  JUMP \t\t\t\ntag 98\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 95\t\t\t\n  JUMP \t\t\t\ntag 96\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 99\t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 24\t\t\t\n  JUMP \t\t\t\ntag 99\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\ntag 100\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 102\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 100\t\t\t\n  JUMP \t\t\t\ntag 102\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 103\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 104\t\t\t\n  PUSH 1F\t\t\t\n  DUP10 \t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 38\t\t\t\n  JUMP \t\t\t\ntag 104\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\ntag 103\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 2\t\t\t\n  DUP9 \t\t\t\n  MUL \t\t\t\n  ADD \t\t\t\n  DUP9 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 95\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 40\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 41\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 107\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 40\t\t\t\n  JUMP \t\t\t\ntag 107\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 42\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 109\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 41\t\t\t\n  JUMP \t\t\t\ntag 109\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 13\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 111\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 42\t\t\t\n  JUMP \t\t\t\ntag 111\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 18\t\t\tontract CarbonoToken20 is ERC2...\n  JUMPDEST \t\t\tontract CarbonoToken20 is ERC2...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tontract CarbonoToken20 is ERC2...\n  DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tontract CarbonoToken20 is ERC2...\n  PUSH 0\t\t\tontract CarbonoToken20 is ERC2...\n  CODECOPY \t\t\tontract CarbonoToken20 is ERC2...\n  PUSH 0\t\t\tontract CarbonoToken20 is ERC2...\n  RETURN \t\t\tontract CarbonoToken20 is ERC2...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 40\t\t\tontract CarbonoToken20 is ERC2...\n      MSTORE \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 4\t\t\tontract CarbonoToken20 is ERC2...\n      CALLDATASIZE \t\t\tontract CarbonoToken20 is ERC2...\n      LT \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 1\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 0\t\t\tontract CarbonoToken20 is ERC2...\n      CALLDATALOAD \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH E0\t\t\tontract CarbonoToken20 is ERC2...\n      SHR \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 715018A6\t\t\tontract CarbonoToken20 is ERC2...\n      GT \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 19\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH C1331061\t\t\tontract CarbonoToken20 is ERC2...\n      GT \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 20\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH C1331061\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 15\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH DBF09D66\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 16\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH DD62ED3E\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 17\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH F2FDE38B\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 18\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 2\t\t\tontract CarbonoToken20 is ERC2...\n      JUMP \t\t\tontract CarbonoToken20 is ERC2...\n    tag 20\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPDEST \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 715018A6\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 11\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 8DA5CB5B\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 12\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 95D89B41\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 13\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH A9059CBB\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 14\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 2\t\t\tontract CarbonoToken20 is ERC2...\n      JUMP \t\t\tontract CarbonoToken20 is ERC2...\n    tag 19\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPDEST \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 313CE567\t\t\tontract CarbonoToken20 is ERC2...\n      GT \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 21\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 313CE567\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 7\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 51CFF8D9\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 8\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 707E422F\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 9\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 70A08231\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 10\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 2\t\t\tontract CarbonoToken20 is ERC2...\n      JUMP \t\t\tontract CarbonoToken20 is ERC2...\n    tag 21\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPDEST \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 6FDDE03\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 3\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 95EA7B3\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 4\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 18160DDD\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 5\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      DUP1 \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 23B872DD\t\t\tontract CarbonoToken20 is ERC2...\n      EQ \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 6\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 2\t\t\tontract CarbonoToken20 is ERC2...\n      JUMP \t\t\tontract CarbonoToken20 is ERC2...\n    tag 1\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPDEST \t\t\tontract CarbonoToken20 is ERC2...\n      CALLDATASIZE \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 2\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPI \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH [tag] 24\t\t\tyCarbonoToken20();\\n\n      PUSH [tag] 25\t\t\tyCarbonoToken20()\n      JUMP \t\t\tyCarbonoToken20();\\n\n    tag 24\t\t\tyCarbonoToken20();\\n\n      JUMPDEST \t\t\tyCarbonoToken20();\\n\n      STOP \t\t\tontract CarbonoToken20 is ERC2...\n    tag 2\t\t\tontract CarbonoToken20 is ERC2...\n      JUMPDEST \t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 0\t\t\tontract CarbonoToken20 is ERC2...\n      PUSH 0\t\t\tontract CarbonoToken20 is ERC2...\n      REVERT \t\t\tontract CarbonoToken20 is ERC2...\n    tag 3\t\t\terToken = newPrice;\\n        e...\n      JUMPDEST \t\t\terToken = newPrice;\\n        e...\n      CALLVALUE \t\t\terToken = newPrice;\\n        e...\n      DUP1 \t\t\terToken = newPrice;\\n        e...\n      ISZERO \t\t\terToken = newPrice;\\n        e...\n      PUSH [tag] 26\t\t\terToken = newPrice;\\n        e...\n      JUMPI \t\t\terToken = newPrice;\\n        e...\n      PUSH 0\t\t\terToken = newPrice;\\n        e...\n      PUSH 0\t\t\terToken = newPrice;\\n        e...\n      REVERT \t\t\terToken = newPrice;\\n        e...\n    tag 26\t\t\terToken = newPrice;\\n        e...\n      JUMPDEST \t\t\terToken = newPrice;\\n        e...\n      POP \t\t\terToken = newPrice;\\n        e...\n      PUSH [tag] 27\t\t\terToken = newPrice;\\n        e...\n      PUSH [tag] 28\t\t\terToken = newPrice;\\n        e...\n      JUMP \t\t\terToken = newPrice;\\n        e...\n    tag 27\t\t\terToken = newPrice;\\n        e...\n      JUMPDEST \t\t\terToken = newPrice;\\n        e...\n      PUSH 40\t\t\terToken = newPrice;\\n        e...\n      MLOAD \t\t\terToken = newPrice;\\n        e...\n      PUSH [tag] 29\t\t\terToken = newPrice;\\n        e...\n      SWAP2 \t\t\terToken = newPrice;\\n        e...\n      SWAP1 \t\t\terToken = newPrice;\\n        e...\n      PUSH [tag] 30\t\t\terToken = newPrice;\\n        e...\n      JUMP \t\t\terToken = newPrice;\\n        e...\n    tag 29\t\t\terToken = newPrice;\\n        e...\n      JUMPDEST \t\t\terToken = newPrice;\\n        e...\n      PUSH 40\t\t\terToken = newPrice;\\n        e...\n      MLOAD \t\t\terToken = newPrice;\\n        e...\n      DUP1 \t\t\terToken = newPrice;\\n        e...\n      SWAP2 \t\t\terToken = newPrice;\\n        e...\n      SUB \t\t\terToken = newPrice;\\n        e...\n      SWAP1 \t\t\terToken = newPrice;\\n        e...\n      RETURN \t\t\terToken = newPrice;\\n        e...\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 31\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 31\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 32\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 33\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 34\t\t\t\n      JUMP \t\t\t\n    tag 33\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 35\t\t\t\n      JUMP \t\t\t\n    tag 32\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 36\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 37\t\t\t\n      JUMP \t\t\t\n    tag 36\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 5\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 38\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 39\t\t\t\n      PUSH [tag] 40\t\t\t\n      JUMP \t\t\t\n    tag 39\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 41\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 41\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 43\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 43\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 44\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 45\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 46\t\t\t\n      JUMP \t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 44\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 48\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 37\t\t\t\n      JUMP \t\t\t\n    tag 48\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 7\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 49\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 49\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 50\t\t\t\n      PUSH [tag] 51\t\t\t\n      JUMP \t\t\t\n    tag 50\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 52\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 53\t\t\t\n      JUMP \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 8\t\t\tunction withdraw(address payab...\n      JUMPDEST \t\t\tunction withdraw(address payab...\n      CALLVALUE \t\t\tunction withdraw(address payab...\n      DUP1 \t\t\tunction withdraw(address payab...\n      ISZERO \t\t\tunction withdraw(address payab...\n      PUSH [tag] 54\t\t\tunction withdraw(address payab...\n      JUMPI \t\t\tunction withdraw(address payab...\n      PUSH 0\t\t\tunction withdraw(address payab...\n      PUSH 0\t\t\tunction withdraw(address payab...\n      REVERT \t\t\tunction withdraw(address payab...\n    tag 54\t\t\tunction withdraw(address payab...\n      JUMPDEST \t\t\tunction withdraw(address payab...\n      POP \t\t\tunction withdraw(address payab...\n      PUSH [tag] 55\t\t\tunction withdraw(address payab...\n      PUSH 4\t\t\tunction withdraw(address payab...\n      DUP1 \t\t\tunction withdraw(address payab...\n      CALLDATASIZE \t\t\tunction withdraw(address payab...\n      SUB \t\t\tunction withdraw(address payab...\n      DUP2 \t\t\tunction withdraw(address payab...\n      ADD \t\t\tunction withdraw(address payab...\n      SWAP1 \t\t\tunction withdraw(address payab...\n      PUSH [tag] 56\t\t\tunction withdraw(address payab...\n      SWAP2 \t\t\tunction withdraw(address payab...\n      SWAP1 \t\t\tunction withdraw(address payab...\n      PUSH [tag] 57\t\t\tunction withdraw(address payab...\n      JUMP \t\t\tunction withdraw(address payab...\n    tag 56\t\t\tunction withdraw(address payab...\n      JUMPDEST \t\t\tunction withdraw(address payab...\n      PUSH [tag] 58\t\t\tunction withdraw(address payab...\n      JUMP \t\t\tunction withdraw(address payab...\n    tag 55\t\t\tunction withdraw(address payab...\n      JUMPDEST \t\t\tunction withdraw(address payab...\n      STOP \t\t\tunction withdraw(address payab...\n    tag 9\t\t\tunction setPriceWeiPerToken(ui...\n      JUMPDEST \t\t\tunction setPriceWeiPerToken(ui...\n      CALLVALUE \t\t\tunction setPriceWeiPerToken(ui...\n      DUP1 \t\t\tunction setPriceWeiPerToken(ui...\n      ISZERO \t\t\tunction setPriceWeiPerToken(ui...\n      PUSH [tag] 59\t\t\tunction setPriceWeiPerToken(ui...\n      JUMPI \t\t\tunction setPriceWeiPerToken(ui...\n      PUSH 0\t\t\tunction setPriceWeiPerToken(ui...\n      PUSH 0\t\t\tunction setPriceWeiPerToken(ui...\n      REVERT \t\t\tunction setPriceWeiPerToken(ui...\n    tag 59\t\t\tunction setPriceWeiPerToken(ui...\n      JUMPDEST \t\t\tunction setPriceWeiPerToken(ui...\n      POP \t\t\tunction setPriceWeiPerToken(ui...\n      PUSH [tag] 60\t\t\tunction setPriceWeiPerToken(ui...\n      PUSH 4\t\t\tunction setPriceWeiPerToken(ui...\n      DUP1 \t\t\tunction setPriceWeiPerToken(ui...\n      CALLDATASIZE \t\t\tunction setPriceWeiPerToken(ui...\n      SUB \t\t\tunction setPriceWeiPerToken(ui...\n      DUP2 \t\t\tunction setPriceWeiPerToken(ui...\n      ADD \t\t\tunction setPriceWeiPerToken(ui...\n      SWAP1 \t\t\tunction setPriceWeiPerToken(ui...\n      PUSH [tag] 61\t\t\tunction setPriceWeiPerToken(ui...\n      SWAP2 \t\t\tunction setPriceWeiPerToken(ui...\n      SWAP1 \t\t\tunction setPriceWeiPerToken(ui...\n      PUSH [tag] 62\t\t\tunction setPriceWeiPerToken(ui...\n      JUMP \t\t\tunction setPriceWeiPerToken(ui...\n    tag 61\t\t\tunction setPriceWeiPerToken(ui...\n      JUMPDEST \t\t\tunction setPriceWeiPerToken(ui...\n      PUSH [tag] 63\t\t\tunction setPriceWeiPerToken(ui...\n      JUMP \t\t\tunction setPriceWeiPerToken(ui...\n    tag 60\t\t\tunction setPriceWeiPerToken(ui...\n      JUMPDEST \t\t\tunction setPriceWeiPerToken(ui...\n      STOP \t\t\tunction setPriceWeiPerToken(ui...\n    tag 10\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 64\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 64\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 65\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 66\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 67\t\t\t\n      JUMP \t\t\t\n    tag 66\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 68\t\t\t\n      JUMP \t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 69\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 11\t\t\t   }\\n}\\n\\n\n      JUMPDEST \t\t\t   }\\n}\\n\\n\n      CALLVALUE \t\t\t   }\\n}\\n\\n\n      DUP1 \t\t\t   }\\n}\\n\\n\n      ISZERO \t\t\t   }\\n}\\n\\n\n      PUSH [tag] 70\t\t\t   }\\n}\\n\\n\n      JUMPI \t\t\t   }\\n}\\n\\n\n      PUSH 0\t\t\t   }\\n}\\n\\n\n      PUSH 0\t\t\t   }\\n}\\n\\n\n      REVERT \t\t\t   }\\n}\\n\\n\n    tag 70\t\t\t   }\\n}\\n\\n\n      JUMPDEST \t\t\t   }\\n}\\n\\n\n      POP \t\t\t   }\\n}\\n\\n\n      PUSH [tag] 71\t\t\t   }\\n}\\n\\n\n      PUSH [tag] 72\t\t\t   }\\n}\\n\\n\n      JUMP \t\t\t   }\\n}\\n\\n\n    tag 71\t\t\t   }\\n}\\n\\n\n      JUMPDEST \t\t\t   }\\n}\\n\\n\n      STOP \t\t\t   }\\n}\\n\\n\n    tag 12\t\t\tion setPriceWeiPerToken(uint25...\n      JUMPDEST \t\t\tion setPriceWeiPerToken(uint25...\n      CALLVALUE \t\t\tion setPriceWeiPerToken(uint25...\n      DUP1 \t\t\tion setPriceWeiPerToken(uint25...\n      ISZERO \t\t\tion setPriceWeiPerToken(uint25...\n      PUSH [tag] 73\t\t\tion setPriceWeiPerToken(uint25...\n      JUMPI \t\t\tion setPriceWeiPerToken(uint25...\n      PUSH 0\t\t\tion setPriceWeiPerToken(uint25...\n      PUSH 0\t\t\tion setPriceWeiPerToken(uint25...\n      REVERT \t\t\tion setPriceWeiPerToken(uint25...\n    tag 73\t\t\tion setPriceWeiPerToken(uint25...\n      JUMPDEST \t\t\tion setPriceWeiPerToken(uint25...\n      POP \t\t\tion setPriceWeiPerToken(uint25...\n      PUSH [tag] 74\t\t\tion setPriceWeiPerToken(uint25...\n      PUSH [tag] 75\t\t\tion setPriceWeiPerToken(uint25...\n      JUMP \t\t\tion setPriceWeiPerToken(uint25...\n    tag 74\t\t\tion setPriceWeiPerToken(uint25...\n      JUMPDEST \t\t\tion setPriceWeiPerToken(uint25...\n      PUSH 40\t\t\tion setPriceWeiPerToken(uint25...\n      MLOAD \t\t\tion setPriceWeiPerToken(uint25...\n      PUSH [tag] 76\t\t\tion setPriceWeiPerToken(uint25...\n      SWAP2 \t\t\tion setPriceWeiPerToken(uint25...\n      SWAP1 \t\t\tion setPriceWeiPerToken(uint25...\n      PUSH [tag] 77\t\t\tion setPriceWeiPerToken(uint25...\n      JUMP \t\t\tion setPriceWeiPerToken(uint25...\n    tag 76\t\t\tion setPriceWeiPerToken(uint25...\n      JUMPDEST \t\t\tion setPriceWeiPerToken(uint25...\n      PUSH 40\t\t\tion setPriceWeiPerToken(uint25...\n      MLOAD \t\t\tion setPriceWeiPerToken(uint25...\n      DUP1 \t\t\tion setPriceWeiPerToken(uint25...\n      SWAP2 \t\t\tion setPriceWeiPerToken(uint25...\n      SUB \t\t\tion setPriceWeiPerToken(uint25...\n      SWAP1 \t\t\tion setPriceWeiPerToken(uint25...\n      RETURN \t\t\tion setPriceWeiPerToken(uint25...\n    tag 13\t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMPDEST \t\t\t\"to=0\");\\n        uint256 bal ...\n      CALLVALUE \t\t\t\"to=0\");\\n        uint256 bal ...\n      DUP1 \t\t\t\"to=0\");\\n        uint256 bal ...\n      ISZERO \t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH [tag] 78\t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMPI \t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH 0\t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH 0\t\t\t\"to=0\");\\n        uint256 bal ...\n      REVERT \t\t\t\"to=0\");\\n        uint256 bal ...\n    tag 78\t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMPDEST \t\t\t\"to=0\");\\n        uint256 bal ...\n      POP \t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH [tag] 79\t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH [tag] 80\t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMP \t\t\t\"to=0\");\\n        uint256 bal ...\n    tag 79\t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMPDEST \t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH 40\t\t\t\"to=0\");\\n        uint256 bal ...\n      MLOAD \t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH [tag] 81\t\t\t\"to=0\");\\n        uint256 bal ...\n      SWAP2 \t\t\t\"to=0\");\\n        uint256 bal ...\n      SWAP1 \t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH [tag] 30\t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMP \t\t\t\"to=0\");\\n        uint256 bal ...\n    tag 81\t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMPDEST \t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH 40\t\t\t\"to=0\");\\n        uint256 bal ...\n      MLOAD \t\t\t\"to=0\");\\n        uint256 bal ...\n      DUP1 \t\t\t\"to=0\");\\n        uint256 bal ...\n      SWAP2 \t\t\t\"to=0\");\\n        uint256 bal ...\n      SUB \t\t\t\"to=0\");\\n        uint256 bal ...\n      SWAP1 \t\t\t\"to=0\");\\n        uint256 bal ...\n      RETURN \t\t\t\"to=0\");\\n        uint256 bal ...\n    tag 14\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 82\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 82\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 83\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 84\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 34\t\t\t\n      JUMP \t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 83\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 86\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 37\t\t\t\n      JUMP \t\t\t\n    tag 86\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 15\t\t\tunction buyCarbonoToken20() pu...\n      JUMPDEST \t\t\tunction buyCarbonoToken20() pu...\n      PUSH [tag] 87\t\t\tunction buyCarbonoToken20() pu...\n      PUSH [tag] 25\t\t\tunction buyCarbonoToken20() pu...\n      JUMP \t\t\tunction buyCarbonoToken20() pu...\n    tag 87\t\t\tunction buyCarbonoToken20() pu...\n      JUMPDEST \t\t\tunction buyCarbonoToken20() pu...\n      STOP \t\t\tunction buyCarbonoToken20() pu...\n    tag 16\t\t\tint256 public priceWeiPerToken...\n      JUMPDEST \t\t\tint256 public priceWeiPerToken...\n      CALLVALUE \t\t\tint256 public priceWeiPerToken...\n      DUP1 \t\t\tint256 public priceWeiPerToken...\n      ISZERO \t\t\tint256 public priceWeiPerToken...\n      PUSH [tag] 88\t\t\tint256 public priceWeiPerToken...\n      JUMPI \t\t\tint256 public priceWeiPerToken...\n      PUSH 0\t\t\tint256 public priceWeiPerToken...\n      PUSH 0\t\t\tint256 public priceWeiPerToken...\n      REVERT \t\t\tint256 public priceWeiPerToken...\n    tag 88\t\t\tint256 public priceWeiPerToken...\n      JUMPDEST \t\t\tint256 public priceWeiPerToken...\n      POP \t\t\tint256 public priceWeiPerToken...\n      PUSH [tag] 89\t\t\tint256 public priceWeiPerToken...\n      PUSH [tag] 90\t\t\tint256 public priceWeiPerToken...\n      JUMP \t\t\tint256 public priceWeiPerToken...\n    tag 89\t\t\tint256 public priceWeiPerToken...\n      JUMPDEST \t\t\tint256 public priceWeiPerToken...\n      PUSH 40\t\t\tint256 public priceWeiPerToken...\n      MLOAD \t\t\tint256 public priceWeiPerToken...\n      PUSH [tag] 91\t\t\tint256 public priceWeiPerToken...\n      SWAP2 \t\t\tint256 public priceWeiPerToken...\n      SWAP1 \t\t\tint256 public priceWeiPerToken...\n      PUSH [tag] 42\t\t\tint256 public priceWeiPerToken...\n      JUMP \t\t\tint256 public priceWeiPerToken...\n    tag 91\t\t\tint256 public priceWeiPerToken...\n      JUMPDEST \t\t\tint256 public priceWeiPerToken...\n      PUSH 40\t\t\tint256 public priceWeiPerToken...\n      MLOAD \t\t\tint256 public priceWeiPerToken...\n      DUP1 \t\t\tint256 public priceWeiPerToken...\n      SWAP2 \t\t\tint256 public priceWeiPerToken...\n      SUB \t\t\tint256 public priceWeiPerToken...\n      SWAP1 \t\t\tint256 public priceWeiPerToken...\n      RETURN \t\t\tint256 public priceWeiPerToken...\n    tag 17\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 92\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 92\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 93\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 94\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 95\t\t\t\n      JUMP \t\t\t\n    tag 94\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMP \t\t\t\n    tag 93\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 97\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 97\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 18\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 98\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 98\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 99\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 100\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 67\t\t\t\n      JUMP \t\t\t\n    tag 100\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 101\t\t\t\n      JUMP \t\t\t\n    tag 99\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 25\t\t\tunction buyCarbonoToken20() pu...\n      JUMPDEST \t\t\tunction buyCarbonoToken20() pu...\n      PUSH [tag] 103\t\t\t\n      PUSH [tag] 104\t\t\t\n      JUMP \t\t\t\n    tag 103\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t,\n      CALLVALUE \t\t\tsg.value \n      GT \t\t\tsg.value > 0,\n      PUSH [tag] 106\t\t\tequire(msg.value > 0, \"no ETH\"...\n      JUMPI \t\t\tequire(msg.value > 0, \"no ETH\"...\n      PUSH 40\t\t\tequire(msg.value > 0, \"no ETH\"...\n      MLOAD \t\t\tequire(msg.value > 0, \"no ETH\"...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tequire(msg.value > 0, \"no ETH\"...\n      DUP2 \t\t\tequire(msg.value > 0, \"no ETH\"...\n      MSTORE \t\t\tequire(msg.value > 0, \"no ETH\"...\n      PUSH 4\t\t\tequire(msg.value > 0, \"no ETH\"...\n      ADD \t\t\tequire(msg.value > 0, \"no ETH\"...\n      PUSH [tag] 107\t\t\tequire(msg.value > 0, \"no ETH\"...\n      SWAP1 \t\t\tequire(msg.value > 0, \"no ETH\"...\n      PUSH [tag] 108\t\t\tequire(msg.value > 0, \"no ETH\"...\n      JUMP \t\t\tequire(msg.value > 0, \"no ETH\"...\n    tag 107\t\t\tequire(msg.value > 0, \"no ETH\"...\n      JUMPDEST \t\t\tequire(msg.value > 0, \"no ETH\"...\n      PUSH 40\t\t\tequire(msg.value > 0, \"no ETH\"...\n      MLOAD \t\t\tequire(msg.value > 0, \"no ETH\"...\n      DUP1 \t\t\tequire(msg.value > 0, \"no ETH\"...\n      SWAP2 \t\t\tequire(msg.value > 0, \"no ETH\"...\n      SUB \t\t\tequire(msg.value > 0, \"no ETH\"...\n      SWAP1 \t\t\tequire(msg.value > 0, \"no ETH\"...\n      REVERT \t\t\tequire(msg.value > 0, \"no ETH\"...\n    tag 106\t\t\tequire(msg.value > 0, \"no ETH\"...\n      JUMPDEST \t\t\tequire(msg.value > 0, \"no ETH\"...\n      PUSH 0\t\t\tint256 tokensOut \n      PUSH 7\t\t\triceWeiPerToken;\n      SLOAD \t\t\triceWeiPerToken;\n      PUSH [tag] 109\t\t\tecimals())\n      PUSH [tag] 51\t\t\tecimals(\n      JUMP \t\t\tecimals())\n    tag 109\t\t\tecimals())\n      JUMPDEST \t\t\tecimals())\n      PUSH A\t\t\t0 \n      PUSH [tag] 110\t\t\t0 ** decimals())\n      SWAP2 \t\t\t0 ** decimals())\n      SWAP1 \t\t\t0 ** decimals())\n      PUSH [tag] 111\t\t\t0 ** decimals())\n      JUMP \t\t\t0 ** decimals())\n    tag 110\t\t\t0 ** decimals())\n      JUMPDEST \t\t\t0 ** decimals())\n      CALLVALUE \t\t\tsg.value \n      PUSH [tag] 112\t\t\tsg.value * (10 ** decimals()))\n      SWAP2 \t\t\tsg.value * (10 ** decimals()))\n      SWAP1 \t\t\tsg.value * (10 ** decimals()))\n      PUSH [tag] 113\t\t\tsg.value * (10 ** decimals()))\n      JUMP \t\t\tsg.value * (10 ** decimals()))\n    tag 112\t\t\tsg.value * (10 ** decimals()))\n      JUMPDEST \t\t\tsg.value * (10 ** decimals()))\n      PUSH [tag] 114\t\t\tmsg.value * (10 ** decimals())...\n      SWAP2 \t\t\tmsg.value * (10 ** decimals())...\n      SWAP1 \t\t\tmsg.value * (10 ** decimals())...\n      PUSH [tag] 115\t\t\tmsg.value * (10 ** decimals())...\n      JUMP \t\t\tmsg.value * (10 ** decimals())...\n    tag 114\t\t\tmsg.value * (10 ** decimals())...\n      JUMPDEST \t\t\tmsg.value * (10 ** decimals())...\n      SWAP1 \t\t\tint256 tokensOut = (msg.value ...\n      POP \t\t\tint256 tokensOut = (msg.value ...\n      PUSH 0\t\t\t,\n      DUP2 \t\t\tokensOut \n      GT \t\t\tokensOut > 0,\n      PUSH [tag] 116\t\t\tequire(tokensOut > 0, \"too lit...\n      JUMPI \t\t\tequire(tokensOut > 0, \"too lit...\n      PUSH 40\t\t\tequire(tokensOut > 0, \"too lit...\n      MLOAD \t\t\tequire(tokensOut > 0, \"too lit...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tequire(tokensOut > 0, \"too lit...\n      DUP2 \t\t\tequire(tokensOut > 0, \"too lit...\n      MSTORE \t\t\tequire(tokensOut > 0, \"too lit...\n      PUSH 4\t\t\tequire(tokensOut > 0, \"too lit...\n      ADD \t\t\tequire(tokensOut > 0, \"too lit...\n      PUSH [tag] 117\t\t\tequire(tokensOut > 0, \"too lit...\n      SWAP1 \t\t\tequire(tokensOut > 0, \"too lit...\n      PUSH [tag] 118\t\t\tequire(tokensOut > 0, \"too lit...\n      JUMP \t\t\tequire(tokensOut > 0, \"too lit...\n    tag 117\t\t\tequire(tokensOut > 0, \"too lit...\n      JUMPDEST \t\t\tequire(tokensOut > 0, \"too lit...\n      PUSH 40\t\t\tequire(tokensOut > 0, \"too lit...\n      MLOAD \t\t\tequire(tokensOut > 0, \"too lit...\n      DUP1 \t\t\tequire(tokensOut > 0, \"too lit...\n      SWAP2 \t\t\tequire(tokensOut > 0, \"too lit...\n      SUB \t\t\tequire(tokensOut > 0, \"too lit...\n      SWAP1 \t\t\tequire(tokensOut > 0, \"too lit...\n      REVERT \t\t\tequire(tokensOut > 0, \"too lit...\n    tag 116\t\t\tequire(tokensOut > 0, \"too lit...\n      JUMPDEST \t\t\tequire(tokensOut > 0, \"too lit...\n      PUSH [tag] 119\t\t\tmint(msg.sender, tokensOut);\n      CALLER \t\t\tsg.sender,\n      DUP3 \t\t\tokensOut)\n      PUSH [tag] 120\t\t\tmint(\n      JUMP \t\t\tmint(msg.sender, tokensOut);\n    tag 119\t\t\tmint(msg.sender, tokensOut);\n      JUMPDEST \t\t\tmint(msg.sender, tokensOut);\n      CALLER \t\t\tsg.sender,\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tarbonoToken20Purchased(msg.sen...\n      AND \t\t\tarbonoToken20Purchased(msg.sen...\n      PUSH 1226F1537B00D316270056DD247F05739EE0ACA67A32CDD8258B675B6F0658B0\t\t\tarbonoToken20Purchased(msg.sen...\n      CALLVALUE \t\t\tsg.value,\n      DUP4 \t\t\tokensOut)\n      PUSH 40\t\t\tarbonoToken20Purchased(msg.sen...\n      MLOAD \t\t\tarbonoToken20Purchased(msg.sen...\n      PUSH [tag] 121\t\t\tarbonoToken20Purchased(msg.sen...\n      SWAP3 \t\t\tarbonoToken20Purchased(msg.sen...\n      SWAP2 \t\t\tarbonoToken20Purchased(msg.sen...\n      SWAP1 \t\t\tarbonoToken20Purchased(msg.sen...\n      PUSH [tag] 122\t\t\tarbonoToken20Purchased(msg.sen...\n      JUMP \t\t\tarbonoToken20Purchased(msg.sen...\n    tag 121\t\t\tarbonoToken20Purchased(msg.sen...\n      JUMPDEST \t\t\tarbonoToken20Purchased(msg.sen...\n      PUSH 40\t\t\tarbonoToken20Purchased(msg.sen...\n      MLOAD \t\t\tarbonoToken20Purchased(msg.sen...\n      DUP1 \t\t\tarbonoToken20Purchased(msg.sen...\n      SWAP2 \t\t\tarbonoToken20Purchased(msg.sen...\n      SUB \t\t\tarbonoToken20Purchased(msg.sen...\n      SWAP1 \t\t\tarbonoToken20Purchased(msg.sen...\n      LOG2 \t\t\tarbonoToken20Purchased(msg.sen...\n      POP \t\t\t\\n        require(msg.value > ...\n      PUSH [tag] 123\t\t\t\n      PUSH [tag] 124\t\t\t\n      JUMP \t\t\t\n    tag 123\t\t\t\n      JUMPDEST \t\t\t\n      JUMP \t\t\tunction buyCarbonoToken20() pu...\n    tag 28\t\t\terToken = newPrice;\\n        e...\n      JUMPDEST \t\t\terToken = newPrice;\\n        e...\n      PUSH 60\t\t\t(newPrice);\\n \n      PUSH 3\t\t\tce Re\n      DUP1 \t\t\t/ @notice Re\n      SLOAD \t\t\t/ @notice Re\n      PUSH [tag] 126\t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      PUSH [tag] 127\t\t\t/ @notice Re\n      JUMP \t\t\t/ @notice Re\n    tag 126\t\t\t/ @notice Re\n      JUMPDEST \t\t\t/ @notice Re\n      DUP1 \t\t\t/ @notice Re\n      PUSH 1F\t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      PUSH 20\t\t\t/ @notice Re\n      DUP1 \t\t\t/ @notice Re\n      SWAP2 \t\t\t/ @notice Re\n      DIV \t\t\t/ @notice Re\n      MUL \t\t\t/ @notice Re\n      PUSH 20\t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      PUSH 40\t\t\t/ @notice Re\n      MLOAD \t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      DUP2 \t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      PUSH 40\t\t\t/ @notice Re\n      MSTORE \t\t\t/ @notice Re\n      DUP1 \t\t\t/ @notice Re\n      SWAP3 \t\t\t/ @notice Re\n      SWAP2 \t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      DUP2 \t\t\t/ @notice Re\n      DUP2 \t\t\t/ @notice Re\n      MSTORE \t\t\t/ @notice Re\n      PUSH 20\t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      DUP3 \t\t\t/ @notice Re\n      DUP1 \t\t\t/ @notice Re\n      SLOAD \t\t\t/ @notice Re\n      PUSH [tag] 128\t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      PUSH [tag] 127\t\t\t/ @notice Re\n      JUMP \t\t\t/ @notice Re\n    tag 128\t\t\t/ @notice Re\n      JUMPDEST \t\t\t/ @notice Re\n      DUP1 \t\t\t/ @notice Re\n      ISZERO \t\t\t/ @notice Re\n      PUSH [tag] 129\t\t\t/ @notice Re\n      JUMPI \t\t\t/ @notice Re\n      DUP1 \t\t\t/ @notice Re\n      PUSH 1F\t\t\t/ @notice Re\n      LT \t\t\t/ @notice Re\n      PUSH [tag] 130\t\t\t/ @notice Re\n      JUMPI \t\t\t/ @notice Re\n      PUSH 100\t\t\t/ @notice Re\n      DUP1 \t\t\t/ @notice Re\n      DUP4 \t\t\t/ @notice Re\n      SLOAD \t\t\t/ @notice Re\n      DIV \t\t\t/ @notice Re\n      MUL \t\t\t/ @notice Re\n      DUP4 \t\t\t/ @notice Re\n      MSTORE \t\t\t/ @notice Re\n      SWAP2 \t\t\t/ @notice Re\n      PUSH 20\t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      SWAP2 \t\t\t/ @notice Re\n      PUSH [tag] 129\t\t\t/ @notice Re\n      JUMP \t\t\t/ @notice Re\n    tag 130\t\t\t/ @notice Re\n      JUMPDEST \t\t\t/ @notice Re\n      DUP3 \t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      SWAP2 \t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      PUSH 0\t\t\t/ @notice Re\n      MSTORE \t\t\t/ @notice Re\n      PUSH 20\t\t\t/ @notice Re\n      PUSH 0\t\t\t/ @notice Re\n      KECCAK256 \t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n    tag 131\t\t\t/ @notice Re\n      JUMPDEST \t\t\t/ @notice Re\n      DUP2 \t\t\t/ @notice Re\n      SLOAD \t\t\t/ @notice Re\n      DUP2 \t\t\t/ @notice Re\n      MSTORE \t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      PUSH 1\t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      PUSH 20\t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      DUP1 \t\t\t/ @notice Re\n      DUP4 \t\t\t/ @notice Re\n      GT \t\t\t/ @notice Re\n      PUSH [tag] 131\t\t\t/ @notice Re\n      JUMPI \t\t\t/ @notice Re\n      DUP3 \t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      SUB \t\t\t/ @notice Re\n      PUSH 1F\t\t\t/ @notice Re\n      AND \t\t\t/ @notice Re\n      DUP3 \t\t\t/ @notice Re\n      ADD \t\t\t/ @notice Re\n      SWAP2 \t\t\t/ @notice Re\n    tag 129\t\t\t/ @notice Re\n      JUMPDEST \t\t\t/ @notice Re\n      POP \t\t\t/ @notice Re\n      POP \t\t\t/ @notice Re\n      POP \t\t\t/ @notice Re\n      POP \t\t\t/ @notice Re\n      POP \t\t\t/ @notice Re\n      SWAP1 \t\t\t/ @notice Re\n      POP \t\t\t/ @notice Re\n      SWAP1 \t\t\terToken = newPrice;\\n        e...\n      JUMP \t\t\terToken = newPrice;\\n        e...\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 133\t\t\t\n      PUSH [tag] 134\t\t\t\n      JUMP \t\t\t\n    tag 133\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 135\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 136\t\t\t\n      JUMP \t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 40\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 47\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 139\t\t\t\n      PUSH [tag] 134\t\t\t\n      JUMP \t\t\t\n    tag 139\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 140\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMP \t\t\t\n    tag 140\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 142\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 142\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 51\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 12\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 58\t\t\tunction withdraw(address payab...\n      JUMPDEST \t\t\tunction withdraw(address payab...\n      PUSH [tag] 146\t\t\thased(msg.sen\n      PUSH [tag] 147\t\t\thased(msg.s\n      JUMP \t\t\thased(msg.sen\n    tag 146\t\t\thased(msg.sen\n      JUMPDEST \t\t\thased(msg.sen\n      PUSH 0\t\t\t)\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\to != address(0),\n      AND \t\t\to != address(0),\n      DUP2 \t\t\to \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\to != address(0),\n      AND \t\t\to != address(0),\n      SUB \t\t\to != address(0),\n      PUSH [tag] 149\t\t\tequire(to != address(0), \"to=0...\n      JUMPI \t\t\tequire(to != address(0), \"to=0...\n      PUSH 40\t\t\tequire(to != address(0), \"to=0...\n      MLOAD \t\t\tequire(to != address(0), \"to=0...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tequire(to != address(0), \"to=0...\n      DUP2 \t\t\tequire(to != address(0), \"to=0...\n      MSTORE \t\t\tequire(to != address(0), \"to=0...\n      PUSH 4\t\t\tequire(to != address(0), \"to=0...\n      ADD \t\t\tequire(to != address(0), \"to=0...\n      PUSH [tag] 150\t\t\tequire(to != address(0), \"to=0...\n      SWAP1 \t\t\tequire(to != address(0), \"to=0...\n      PUSH [tag] 151\t\t\tequire(to != address(0), \"to=0...\n      JUMP \t\t\tequire(to != address(0), \"to=0...\n    tag 150\t\t\tequire(to != address(0), \"to=0...\n      JUMPDEST \t\t\tequire(to != address(0), \"to=0...\n      PUSH 40\t\t\tequire(to != address(0), \"to=0...\n      MLOAD \t\t\tequire(to != address(0), \"to=0...\n      DUP1 \t\t\tequire(to != address(0), \"to=0...\n      SWAP2 \t\t\tequire(to != address(0), \"to=0...\n      SUB \t\t\tequire(to != address(0), \"to=0...\n      SWAP1 \t\t\tequire(to != address(0), \"to=0...\n      REVERT \t\t\tequire(to != address(0), \"to=0...\n    tag 149\t\t\tequire(to != address(0), \"to=0...\n      JUMPDEST \t\t\tequire(to != address(0), \"to=0...\n      PUSH 0\t\t\tint256 bal \n      SELFBALANCE \t\t\tddress(this).balance;\n      SWAP1 \t\t\tint256 bal = address(this).bal...\n      POP \t\t\tint256 bal = address(this).bal...\n      PUSH 0\t\t\t,\n      DUP2 \t\t\tal \n      GT \t\t\tal > 0,\n      PUSH [tag] 152\t\t\tequire(bal > 0, \"empty\");\n      JUMPI \t\t\tequire(bal > 0, \"empty\");\n      PUSH 40\t\t\tequire(bal > 0, \"empty\");\n      MLOAD \t\t\tequire(bal > 0, \"empty\");\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tequire(bal > 0, \"empty\");\n      DUP2 \t\t\tequire(bal > 0, \"empty\");\n      MSTORE \t\t\tequire(bal > 0, \"empty\");\n      PUSH 4\t\t\tequire(bal > 0, \"empty\");\n      ADD \t\t\tequire(bal > 0, \"empty\");\n      PUSH [tag] 153\t\t\tequire(bal > 0, \"empty\");\n      SWAP1 \t\t\tequire(bal > 0, \"empty\");\n      PUSH [tag] 154\t\t\tequire(bal > 0, \"empty\");\n      JUMP \t\t\tequire(bal > 0, \"empty\");\n    tag 153\t\t\tequire(bal > 0, \"empty\");\n      JUMPDEST \t\t\tequire(bal > 0, \"empty\");\n      PUSH 40\t\t\tequire(bal > 0, \"empty\");\n      MLOAD \t\t\tequire(bal > 0, \"empty\");\n      DUP1 \t\t\tequire(bal > 0, \"empty\");\n      SWAP2 \t\t\tequire(bal > 0, \"empty\");\n      SUB \t\t\tequire(bal > 0, \"empty\");\n      SWAP1 \t\t\tequire(bal > 0, \"empty\");\n      REVERT \t\t\tequire(bal > 0, \"empty\");\n    tag 152\t\t\tequire(bal > 0, \"empty\");\n      JUMPDEST \t\t\tequire(bal > 0, \"empty\");\n      PUSH 0\t\t\tool ok,\n      DUP3 \t\t\to.\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\to.call{\n      AND \t\t\to.call{\n      DUP3 \t\t\tal}\n      PUSH 40\t\t\to.call{value: bal}(\"\");\n      MLOAD \t\t\to.call{value: bal}(\"\");\n      PUSH [tag] 155\t\t\to.call{value: bal}(\"\");\n      SWAP1 \t\t\to.call{value: bal}(\"\");\n      PUSH [tag] 156\t\t\to.call{value: bal}(\"\");\n      JUMP \t\t\to.call{value: bal}(\"\");\n    tag 155\t\t\to.call{value: bal}(\"\");\n      JUMPDEST \t\t\to.call{value: bal}(\"\");\n      PUSH 0\t\t\to.call{value: bal}(\"\");\n      PUSH 40\t\t\to.call{value: bal}(\"\");\n      MLOAD \t\t\to.call{value: bal}(\"\");\n      DUP1 \t\t\to.call{value: bal}(\"\");\n      DUP4 \t\t\to.call{value: bal}(\"\");\n      SUB \t\t\to.call{value: bal}(\"\");\n      DUP2 \t\t\to.call{value: bal}(\"\");\n      DUP6 \t\t\to.call{value: bal}(\"\");\n      DUP8 \t\t\to.call{value: bal}(\"\");\n      GAS \t\t\to.call{value: bal}(\"\");\n      CALL \t\t\to.call{value: bal}(\"\");\n      SWAP3 \t\t\to.call{value: bal}(\"\");\n      POP \t\t\to.call{value: bal}(\"\");\n      POP \t\t\to.call{value: bal}(\"\");\n      POP \t\t\to.call{value: bal}(\"\");\n      RETURNDATASIZE \t\t\to.call{value: bal}(\"\");\n      DUP1 \t\t\to.call{value: bal}(\"\");\n      PUSH 0\t\t\to.call{value: bal}(\"\");\n      DUP2 \t\t\to.call{value: bal}(\"\");\n      EQ \t\t\to.call{value: bal}(\"\");\n      PUSH [tag] 159\t\t\to.call{value: bal}(\"\");\n      JUMPI \t\t\to.call{value: bal}(\"\");\n      PUSH 40\t\t\to.call{value: bal}(\"\");\n      MLOAD \t\t\to.call{value: bal}(\"\");\n      SWAP2 \t\t\to.call{value: bal}(\"\");\n      POP \t\t\to.call{value: bal}(\"\");\n      PUSH 1F\t\t\to.call{value: bal}(\"\");\n      NOT \t\t\to.call{value: bal}(\"\");\n      PUSH 3F\t\t\to.call{value: bal}(\"\");\n      RETURNDATASIZE \t\t\to.call{value: bal}(\"\");\n      ADD \t\t\to.call{value: bal}(\"\");\n      AND \t\t\to.call{value: bal}(\"\");\n      DUP3 \t\t\to.call{value: bal}(\"\");\n      ADD \t\t\to.call{value: bal}(\"\");\n      PUSH 40\t\t\to.call{value: bal}(\"\");\n      MSTORE \t\t\to.call{value: bal}(\"\");\n      RETURNDATASIZE \t\t\to.call{value: bal}(\"\");\n      DUP3 \t\t\to.call{value: bal}(\"\");\n      MSTORE \t\t\to.call{value: bal}(\"\");\n      RETURNDATASIZE \t\t\to.call{value: bal}(\"\");\n      PUSH 0\t\t\to.call{value: bal}(\"\");\n      PUSH 20\t\t\to.call{value: bal}(\"\");\n      DUP5 \t\t\to.call{value: bal}(\"\");\n      ADD \t\t\to.call{value: bal}(\"\");\n      RETURNDATACOPY \t\t\to.call{value: bal}(\"\");\n      PUSH [tag] 158\t\t\to.call{value: bal}(\"\");\n      JUMP \t\t\to.call{value: bal}(\"\");\n    tag 159\t\t\to.call{value: bal}(\"\");\n      JUMPDEST \t\t\to.call{value: bal}(\"\");\n      PUSH 60\t\t\to.call{value: bal}(\"\");\n      SWAP2 \t\t\to.call{value: bal}(\"\");\n      POP \t\t\to.call{value: bal}(\"\");\n    tag 158\t\t\to.call{value: bal}(\"\");\n      JUMPDEST \t\t\to.call{value: bal}(\"\");\n      POP \t\t\to.call{value: bal}(\"\");\n      POP \t\t\tbool ok, ) = to.call{value: ba...\n      SWAP1 \t\t\tbool ok, ) = to.call{value: ba...\n      POP \t\t\tbool ok, ) = to.call{value: ba...\n      DUP1 \t\t\tk,\n      PUSH [tag] 160\t\t\tequire(ok, \"withdraw fail\");\n      JUMPI \t\t\tequire(ok, \"withdraw fail\");\n      PUSH 40\t\t\tequire(ok, \"withdraw fail\");\n      MLOAD \t\t\tequire(ok, \"withdraw fail\");\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tequire(ok, \"withdraw fail\");\n      DUP2 \t\t\tequire(ok, \"withdraw fail\");\n      MSTORE \t\t\tequire(ok, \"withdraw fail\");\n      PUSH 4\t\t\tequire(ok, \"withdraw fail\");\n      ADD \t\t\tequire(ok, \"withdraw fail\");\n      PUSH [tag] 161\t\t\tequire(ok, \"withdraw fail\");\n      SWAP1 \t\t\tequire(ok, \"withdraw fail\");\n      PUSH [tag] 162\t\t\tequire(ok, \"withdraw fail\");\n      JUMP \t\t\tequire(ok, \"withdraw fail\");\n    tag 161\t\t\tequire(ok, \"withdraw fail\");\n      JUMPDEST \t\t\tequire(ok, \"withdraw fail\");\n      PUSH 40\t\t\tequire(ok, \"withdraw fail\");\n      MLOAD \t\t\tequire(ok, \"withdraw fail\");\n      DUP1 \t\t\tequire(ok, \"withdraw fail\");\n      SWAP2 \t\t\tequire(ok, \"withdraw fail\");\n      SUB \t\t\tequire(ok, \"withdraw fail\");\n      SWAP1 \t\t\tequire(ok, \"withdraw fail\");\n      REVERT \t\t\tequire(ok, \"withdraw fail\");\n    tag 160\t\t\tequire(ok, \"withdraw fail\");\n      JUMPDEST \t\t\tequire(ok, \"withdraw fail\");\n      DUP3 \t\t\to,\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tithdraw(to, bal);\n      AND \t\t\tithdraw(to, bal);\n      PUSH 884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364\t\t\tithdraw(to, bal);\n      DUP4 \t\t\tal)\n      PUSH 40\t\t\tithdraw(to, bal);\n      MLOAD \t\t\tithdraw(to, bal);\n      PUSH [tag] 163\t\t\tithdraw(to, bal);\n      SWAP2 \t\t\tithdraw(to, bal);\n      SWAP1 \t\t\tithdraw(to, bal);\n      PUSH [tag] 42\t\t\tithdraw(to, bal);\n      JUMP \t\t\tithdraw(to, bal);\n    tag 163\t\t\tithdraw(to, bal);\n      JUMPDEST \t\t\tithdraw(to, bal);\n      PUSH 40\t\t\tithdraw(to, bal);\n      MLOAD \t\t\tithdraw(to, bal);\n      DUP1 \t\t\tithdraw(to, bal);\n      SWAP2 \t\t\tithdraw(to, bal);\n      SUB \t\t\tithdraw(to, bal);\n      SWAP1 \t\t\tithdraw(to, bal);\n      LOG2 \t\t\tithdraw(to, bal);\n      POP \t\t\t\\n        require(to != addres...\n      POP \t\t\t\\n        require(to != addres...\n      POP \t\t\tunction withdraw(address payab...\n      JUMP \t\t\tunction withdraw(address payab...\n    tag 63\t\t\tunction setPriceWeiPerToken(ui...\n      JUMPDEST \t\t\tunction setPriceWeiPerToken(ui...\n      PUSH [tag] 165\t\t\thased(msg.sen\n      PUSH [tag] 147\t\t\thased(msg.s\n      JUMP \t\t\thased(msg.sen\n    tag 165\t\t\thased(msg.sen\n      JUMPDEST \t\t\thased(msg.sen\n      PUSH 0\t\t\t,\n      DUP2 \t\t\tewPrice \n      GT \t\t\tewPrice > 0,\n      PUSH [tag] 167\t\t\tequire(newPrice > 0, \"price=0\"...\n      JUMPI \t\t\tequire(newPrice > 0, \"price=0\"...\n      PUSH 40\t\t\tequire(newPrice > 0, \"price=0\"...\n      MLOAD \t\t\tequire(newPrice > 0, \"price=0\"...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\tequire(newPrice > 0, \"price=0\"...\n      DUP2 \t\t\tequire(newPrice > 0, \"price=0\"...\n      MSTORE \t\t\tequire(newPrice > 0, \"price=0\"...\n      PUSH 4\t\t\tequire(newPrice > 0, \"price=0\"...\n      ADD \t\t\tequire(newPrice > 0, \"price=0\"...\n      PUSH [tag] 168\t\t\tequire(newPrice > 0, \"price=0\"...\n      SWAP1 \t\t\tequire(newPrice > 0, \"price=0\"...\n      PUSH [tag] 169\t\t\tequire(newPrice > 0, \"price=0\"...\n      JUMP \t\t\tequire(newPrice > 0, \"price=0\"...\n    tag 168\t\t\tequire(newPrice > 0, \"price=0\"...\n      JUMPDEST \t\t\tequire(newPrice > 0, \"price=0\"...\n      PUSH 40\t\t\tequire(newPrice > 0, \"price=0\"...\n      MLOAD \t\t\tequire(newPrice > 0, \"price=0\"...\n      DUP1 \t\t\tequire(newPrice > 0, \"price=0\"...\n      SWAP2 \t\t\tequire(newPrice > 0, \"price=0\"...\n      SUB \t\t\tequire(newPrice > 0, \"price=0\"...\n      SWAP1 \t\t\tequire(newPrice > 0, \"price=0\"...\n      REVERT \t\t\tequire(newPrice > 0, \"price=0\"...\n    tag 167\t\t\tequire(newPrice > 0, \"price=0\"...\n      JUMPDEST \t\t\tequire(newPrice > 0, \"price=0\"...\n      DUP1 \t\t\tewPrice;\n      PUSH 7\t\t\triceWeiPerToken \n      DUP2 \t\t\triceWeiPerToken = newPrice;\n      SWAP1 \t\t\triceWeiPerToken = newPrice;\n      SSTORE \t\t\triceWeiPerToken = newPrice;\n      POP \t\t\triceWeiPerToken = newPrice;\n      PUSH 66CBCA4F3C64FECF1DCB9CE094ABCF7F68C3450A1D4E3A8E917DD621EDB4EBE0\t\t\triceUpdated(newPrice);\n      DUP2 \t\t\tewPrice)\n      PUSH 40\t\t\triceUpdated(newPrice);\n      MLOAD \t\t\triceUpdated(newPrice);\n      PUSH [tag] 170\t\t\triceUpdated(newPrice);\n      SWAP2 \t\t\triceUpdated(newPrice);\n      SWAP1 \t\t\triceUpdated(newPrice);\n      PUSH [tag] 42\t\t\triceUpdated(newPrice);\n      JUMP \t\t\triceUpdated(newPrice);\n    tag 170\t\t\triceUpdated(newPrice);\n      JUMPDEST \t\t\triceUpdated(newPrice);\n      PUSH 40\t\t\triceUpdated(newPrice);\n      MLOAD \t\t\triceUpdated(newPrice);\n      DUP1 \t\t\triceUpdated(newPrice);\n      SWAP2 \t\t\triceUpdated(newPrice);\n      SUB \t\t\triceUpdated(newPrice);\n      SWAP1 \t\t\triceUpdated(newPrice);\n      LOG1 \t\t\triceUpdated(newPrice);\n      POP \t\t\tunction setPriceWeiPerToken(ui...\n      JUMP \t\t\tunction setPriceWeiPerToken(ui...\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 72\t\t\t   }\\n}\\n\\n\n      JUMPDEST \t\t\t   }\\n}\\n\\n\n      PUSH [tag] 173\t\t\thased(msg.sen\n      PUSH [tag] 147\t\t\thased(msg.s\n      JUMP \t\t\thased(msg.sen\n    tag 173\t\t\thased(msg.sen\n      JUMPDEST \t\t\thased(msg.sen\n      PUSH [tag] 175\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMP \t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      JUMP \t\t\t   }\\n}\\n\\n\n    tag 75\t\t\tion setPriceWeiPerToken(uint25...\n      JUMPDEST \t\t\tion setPriceWeiPerToken(uint25...\n      PUSH 0\t\t\trnal on\n      PUSH 5\t\t\tequire\n      PUSH 0\t\t\tequire\n      SWAP1 \t\t\tequire\n      SLOAD \t\t\tequire\n      SWAP1 \t\t\tequire\n      PUSH 100\t\t\tequire\n      EXP \t\t\tequire\n      SWAP1 \t\t\tequire\n      DIV \t\t\tequire\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tequire\n      AND \t\t\tequire\n      SWAP1 \t\t\t      require\n      POP \t\t\t      require\n      SWAP1 \t\t\tion setPriceWeiPerToken(uint25...\n      JUMP \t\t\tion setPriceWeiPerToken(uint25...\n    tag 80\t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMPDEST \t\t\t\"to=0\");\\n        uint256 bal ...\n      PUSH 60\t\t\tlance;\\n      \n      PUSH 4\t\t\t\"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      SLOAD \t\t\tl > 0, \"empty\"\n      PUSH [tag] 179\t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      PUSH [tag] 127\t\t\tl > 0, \"empty\"\n      JUMP \t\t\tl > 0, \"empty\"\n    tag 179\t\t\tl > 0, \"empty\"\n      JUMPDEST \t\t\tl > 0, \"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      PUSH 1F\t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      PUSH 20\t\t\tl > 0, \"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      SWAP2 \t\t\tl > 0, \"empty\"\n      DIV \t\t\tl > 0, \"empty\"\n      MUL \t\t\tl > 0, \"empty\"\n      PUSH 20\t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      PUSH 40\t\t\tl > 0, \"empty\"\n      MLOAD \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      DUP2 \t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      PUSH 40\t\t\tl > 0, \"empty\"\n      MSTORE \t\t\tl > 0, \"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      SWAP3 \t\t\tl > 0, \"empty\"\n      SWAP2 \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      DUP2 \t\t\tl > 0, \"empty\"\n      DUP2 \t\t\tl > 0, \"empty\"\n      MSTORE \t\t\tl > 0, \"empty\"\n      PUSH 20\t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      DUP3 \t\t\tl > 0, \"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      SLOAD \t\t\tl > 0, \"empty\"\n      PUSH [tag] 180\t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      PUSH [tag] 127\t\t\tl > 0, \"empty\"\n      JUMP \t\t\tl > 0, \"empty\"\n    tag 180\t\t\tl > 0, \"empty\"\n      JUMPDEST \t\t\tl > 0, \"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      ISZERO \t\t\tl > 0, \"empty\"\n      PUSH [tag] 181\t\t\tl > 0, \"empty\"\n      JUMPI \t\t\tl > 0, \"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      PUSH 1F\t\t\tl > 0, \"empty\"\n      LT \t\t\tl > 0, \"empty\"\n      PUSH [tag] 182\t\t\tl > 0, \"empty\"\n      JUMPI \t\t\tl > 0, \"empty\"\n      PUSH 100\t\t\tl > 0, \"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      DUP4 \t\t\tl > 0, \"empty\"\n      SLOAD \t\t\tl > 0, \"empty\"\n      DIV \t\t\tl > 0, \"empty\"\n      MUL \t\t\tl > 0, \"empty\"\n      DUP4 \t\t\tl > 0, \"empty\"\n      MSTORE \t\t\tl > 0, \"empty\"\n      SWAP2 \t\t\tl > 0, \"empty\"\n      PUSH 20\t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      SWAP2 \t\t\tl > 0, \"empty\"\n      PUSH [tag] 181\t\t\tl > 0, \"empty\"\n      JUMP \t\t\tl > 0, \"empty\"\n    tag 182\t\t\tl > 0, \"empty\"\n      JUMPDEST \t\t\tl > 0, \"empty\"\n      DUP3 \t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      SWAP2 \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      PUSH 0\t\t\tl > 0, \"empty\"\n      MSTORE \t\t\tl > 0, \"empty\"\n      PUSH 20\t\t\tl > 0, \"empty\"\n      PUSH 0\t\t\tl > 0, \"empty\"\n      KECCAK256 \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n    tag 183\t\t\tl > 0, \"empty\"\n      JUMPDEST \t\t\tl > 0, \"empty\"\n      DUP2 \t\t\tl > 0, \"empty\"\n      SLOAD \t\t\tl > 0, \"empty\"\n      DUP2 \t\t\tl > 0, \"empty\"\n      MSTORE \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      PUSH 1\t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      PUSH 20\t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      DUP1 \t\t\tl > 0, \"empty\"\n      DUP4 \t\t\tl > 0, \"empty\"\n      GT \t\t\tl > 0, \"empty\"\n      PUSH [tag] 183\t\t\tl > 0, \"empty\"\n      JUMPI \t\t\tl > 0, \"empty\"\n      DUP3 \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      SUB \t\t\tl > 0, \"empty\"\n      PUSH 1F\t\t\tl > 0, \"empty\"\n      AND \t\t\tl > 0, \"empty\"\n      DUP3 \t\t\tl > 0, \"empty\"\n      ADD \t\t\tl > 0, \"empty\"\n      SWAP2 \t\t\tl > 0, \"empty\"\n    tag 181\t\t\tl > 0, \"empty\"\n      JUMPDEST \t\t\tl > 0, \"empty\"\n      POP \t\t\tl > 0, \"empty\"\n      POP \t\t\tl > 0, \"empty\"\n      POP \t\t\tl > 0, \"empty\"\n      POP \t\t\tl > 0, \"empty\"\n      POP \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\tl > 0, \"empty\"\n      POP \t\t\tl > 0, \"empty\"\n      SWAP1 \t\t\t\"to=0\");\\n        uint256 bal ...\n      JUMP \t\t\t\"to=0\");\\n        uint256 bal ...\n    tag 85\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 185\t\t\t\n      PUSH [tag] 134\t\t\t\n      JUMP \t\t\t\n    tag 185\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 186\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 90\t\t\tint256 public priceWeiPerToken...\n      JUMPDEST \t\t\tint256 public priceWeiPerToken...\n      PUSH 7\t\t\tint256 public priceWeiPerToken...\n      SLOAD \t\t\tint256 public priceWeiPerToken...\n      DUP2 \t\t\tint256 public priceWeiPerToken...\n      JUMP \t\t\tint256 public priceWeiPerToken...\n    tag 96\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 101\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 189\t\t\thased(msg.sen\n      PUSH [tag] 147\t\t\thased(msg.s\n      JUMP \t\t\thased(msg.sen\n    tag 189\t\t\thased(msg.sen\n      JUMPDEST \t\t\thased(msg.sen\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1E4FBDF700000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 192\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 191\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 193\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMP \t\t\t\n    tag 193\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 104\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\tb\n      PUSH 6\t\t\t\n      SLOAD \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 195\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 3EE5AEB500000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 195\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\tb\n      PUSH 6\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 120\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F0500000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 198\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 198\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 197\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 199\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 200\t\t\t\n      JUMP \t\t\t\n    tag 199\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 124\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\tc\n      PUSH 6\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 134\t\t\tthdraw(): retira el ETH acumul...\n      JUMPDEST \t\t\tthdraw(): retira el ETH acumul...\n      PUSH 0\t\t\ttokensO\n      CALLER \t\t\te18) / pri\n      SWAP1 \t\t\tlue * 1e18) / pri\n      POP \t\t\tlue * 1e18) / pri\n      SWAP1 \t\t\tthdraw(): retira el ETH acumul...\n      JUMP \t\t\tthdraw(): retira el ETH acumul...\n    tag 136\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 141\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 207\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 208\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FB8F41B200000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 210\t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 211\t\t\t\n      JUMP \t\t\t\n    tag 210\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 212\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMP \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 143\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 96C6FD1E00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 215\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 215\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 216\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F0500000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 217\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 216\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 218\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 200\t\t\t\n      JUMP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 147\t\t\tceUpdated(newPrice);\\n    }\\n\\...\n      JUMPDEST \t\t\tceUpdated(newPrice);\\n    }\\n\\...\n      PUSH [tag] 220\t\t\t   function \n      PUSH [tag] 134\t\t\t   functio\n      JUMP \t\t\t   function \n    tag 220\t\t\t   function \n      JUMPDEST \t\t\t   function \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\trecaudado\\n    function \n      AND \t\t\trecaudado\\n    function \n      PUSH [tag] 221\t\t\trecauda\n      PUSH [tag] 75\t\t\trecau\n      JUMP \t\t\trecauda\n    tag 221\t\t\trecauda\n      JUMPDEST \t\t\trecauda\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\trecaudado\\n    function \n      AND \t\t\trecaudado\\n    function \n      EQ \t\t\trecaudado\\n    function \n      PUSH [tag] 222\t\t\tETH recaudado\\n    function wi...\n      JUMPI \t\t\tETH recaudado\\n    function wi...\n      PUSH [tag] 223\t\t\t        requ\n      PUSH [tag] 134\t\t\t        re\n      JUMP \t\t\t        requ\n    tag 223\t\t\t        requ\n      JUMPDEST \t\t\t        requ\n      PUSH 40\t\t\te to) external onlyOwner {\\n  ...\n      MLOAD \t\t\te to) external onlyOwner {\\n  ...\n      PUSH 118CDAA700000000000000000000000000000000000000000000000000000000\t\t\te to) external onlyOwner {\\n  ...\n      DUP2 \t\t\te to) external onlyOwner {\\n  ...\n      MSTORE \t\t\te to) external onlyOwner {\\n  ...\n      PUSH 4\t\t\te to) external onlyOwner {\\n  ...\n      ADD \t\t\te to) external onlyOwner {\\n  ...\n      PUSH [tag] 224\t\t\te to) external onlyOwner {\\n  ...\n      SWAP2 \t\t\te to) external onlyOwner {\\n  ...\n      SWAP1 \t\t\te to) external onlyOwner {\\n  ...\n      PUSH [tag] 77\t\t\te to) external onlyOwner {\\n  ...\n      JUMP \t\t\te to) external onlyOwner {\\n  ...\n    tag 224\t\t\te to) external onlyOwner {\\n  ...\n      JUMPDEST \t\t\te to) external onlyOwner {\\n  ...\n      PUSH 40\t\t\te to) external onlyOwner {\\n  ...\n      MLOAD \t\t\te to) external onlyOwner {\\n  ...\n      DUP1 \t\t\te to) external onlyOwner {\\n  ...\n      SWAP2 \t\t\te to) external onlyOwner {\\n  ...\n      SUB \t\t\te to) external onlyOwner {\\n  ...\n      SWAP1 \t\t\te to) external onlyOwner {\\n  ...\n      REVERT \t\t\te to) external onlyOwner {\\n  ...\n    tag 222\t\t\tETH recaudado\\n    function wi...\n      JUMPDEST \t\t\tETH recaudado\\n    function wi...\n      JUMP \t\t\tceUpdated(newPrice);\\n    }\\n\\...\n    tag 176\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 5\t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH 5\t\t\t\n      PUSH 0\t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      MUL \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      MUL \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 200\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 227\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 228\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 229\t\t\t\n      JUMP \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 230\t\t\t\n      JUMP \t\t\t\n    tag 227\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 231\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E450D38C00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 232\t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 211\t\t\t\n      JUMP \t\t\t\n    tag 232\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 231\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP7 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 230\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 233\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      SUB \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 234\t\t\t\n      JUMP \t\t\t\n    tag 233\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 235\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 235\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 205\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 237\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E602DF0500000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 238\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 237\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 239\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 94280D6200000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 240\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 240\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 239\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 0\t\t\t\n      DUP7 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 241\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      DUP5 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 242\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 242\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n    tag 241\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 243\t\t\t-License-Identifier: MIT\\n// C...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\n// C...\n      PUSH 0\t\t\telin C\n      DUP2 \t\t\tity ^\n      MLOAD \t\t\t solidity ^0\n      SWAP1 \t\t\t4.0\\npragma solidity ^0\n      POP \t\t\t4.0\\npragma solidity ^0\n      SWAP2 \t\t\t-License-Identifier: MIT\\n// C...\n      SWAP1 \t\t\t-License-Identifier: MIT\\n// C...\n      POP \t\t\t-License-Identifier: MIT\\n// C...\n      JUMP \t\t\t-License-Identifier: MIT\\n// C...\n    tag 244\t\t\tt {ERC20} from \"@openzeppelin/...\n      JUMPDEST \t\t\tt {ERC20} from \"@openzeppelin/...\n      PUSH 0\t\t\tm \"@openzep\n      DUP3 \t\t\tOwnabl\n      DUP3 \t\t\tces\n      MSTORE \t\t\tacts/access/Ownable\n      PUSH 20\t\t\trom \n      DUP3 \t\t\trd}\n      ADD \t\t\tyGuard} from \"\n      SWAP1 \t\t\tport {ReentrancyGuard} from \"\n      POP \t\t\tport {ReentrancyGuard} from \"\n      SWAP3 \t\t\tt {ERC20} from \"@openzeppelin/...\n      SWAP2 \t\t\tt {ERC20} from \"@openzeppelin/...\n      POP \t\t\tt {ERC20} from \"@openzeppelin/...\n      POP \t\t\tt {ERC20} from \"@openzeppelin/...\n      JUMP \t\t\tt {ERC20} from \"@openzeppelin/...\n    tag 245\t\t\tn/contracts/utils/ReentrancyGu...\n      JUMPDEST \t\t\tn/contracts/utils/ReentrancyGu...\n      DUP3 \t\t\tC-20 c\n      DUP2 \t\t\tce \n      DUP4 \t\t\t@no\n      MCOPY \t\t\tO)\\n * @notice ERC-20 co\n      PUSH 0\t\t\t)\n      DUP4 \t\t\tnoToke\n      DUP4 \t\t\tCar\n      ADD \t\t\t(buyCarbonoToken\n      MSTORE \t\t\ton ETH (buyCarbonoToken20).\n      POP \t\t\tn/contracts/utils/ReentrancyGu...\n      POP \t\t\tn/contracts/utils/ReentrancyGu...\n      POP \t\t\tn/contracts/utils/ReentrancyGu...\n      JUMP \t\t\tn/contracts/utils/ReentrancyGu...\n    tag 246\t\t\tefecto: 0.001 ETH por 1 CBO.\\n...\n      JUMPDEST \t\t\tefecto: 0.001 ETH por 1 CBO.\\n...\n      PUSH 0\t\t\tWeiPer\n      PUSH 1F\t\t\ttP\n      NOT \t\t\t- setPr\n      PUSH 1F\t\t\t *\n      DUP4 \t\t\tmales\n      ADD \t\t\tdecimales)\\n * \n      AND \t\t\t 18 decimales)\\n *   - setPri\n      SWAP1 \t\t\tpor token, 18 decimales)\\n *  ...\n      POP \t\t\tpor token, 18 decimales)\\n *  ...\n      SWAP2 \t\t\tefecto: 0.001 ETH por 1 CBO.\\n...\n      SWAP1 \t\t\tefecto: 0.001 ETH por 1 CBO.\\n...\n      POP \t\t\tefecto: 0.001 ETH por 1 CBO.\\n...\n      JUMP \t\t\tefecto: 0.001 ETH por 1 CBO.\\n...\n    tag 247\t\t\tn(): cambia el precio (solo ow...\n      JUMPDEST \t\t\tn(): cambia el precio (solo ow...\n      PUSH 0\t\t\tcio\n      PUSH [tag] 294\t\t\tthdraw(): retira el ETH acumul...\n      DUP3 \t\t\t (sol\n      PUSH [tag] 243\t\t\tthdraw(): retira el ETH acumul...\n      JUMP \t\t\tthdraw(): retira el ETH acumul...\n    tag 294\t\t\tthdraw(): retira el ETH acumul...\n      JUMPDEST \t\t\tthdraw(): retira el ETH acumul...\n      PUSH [tag] 295\t\t\tkensOut = (msg.value * 1e18) /...\n      DUP2 \t\t\tbonoTo\n      DUP6 \t\t\tt C\n      PUSH [tag] 244\t\t\tkensOut = (msg.value * 1e18) /...\n      JUMP \t\t\tkensOut = (msg.value * 1e18) /...\n    tag 295\t\t\tkensOut = (msg.value * 1e18) /...\n      JUMPDEST \t\t\tkensOut = (msg.value * 1e18) /...\n      SWAP4 \t\t\t*\\n * tokensOut = (msg.value *...\n      POP \t\t\t*\\n * tokensOut = (msg.value *...\n      PUSH [tag] 296\t\t\tRC20, Ownable, ReentrancyGuard...\n      DUP2 \t\t\tether \n      DUP6 \t\t\t.00\n      PUSH 20\t\t\tfect\n      DUP7 \t\t\t Por \n      ADD \t\t\t  // Por defecto\n      PUSH [tag] 245\t\t\tRC20, Ownable, ReentrancyGuard...\n      JUMP \t\t\tRC20, Ownable, ReentrancyGuard...\n    tag 296\t\t\tRC20, Ownable, ReentrancyGuard...\n      JUMPDEST \t\t\tRC20, Ownable, ReentrancyGuard...\n      PUSH [tag] 297\t\t\tint256 public priceWeiPerToke\n      DUP2 \t\t\tPerTok\n      PUSH [tag] 246\t\t\tint256 public priceWeiPerToke\n      JUMP \t\t\tint256 public priceWeiPerToke\n    tag 297\t\t\tint256 public priceWeiPerToke\n      JUMPDEST \t\t\tint256 public priceWeiPerToke\n      DUP5 \t\t\t   \n      ADD \t\t\tei)\\n    uint256 public priceW...\n      SWAP2 \t\t\t(1e15 wei)\\n    uint256 public...\n      POP \t\t\t(1e15 wei)\\n    uint256 public...\n      POP \t\t\tal a msg.value\\n *   - withdra...\n      SWAP3 \t\t\tn(): cambia el precio (solo ow...\n      SWAP2 \t\t\tn(): cambia el precio (solo ow...\n      POP \t\t\tn(): cambia el precio (solo ow...\n      POP \t\t\tn(): cambia el precio (solo ow...\n      JUMP \t\t\tn(): cambia el precio (solo ow...\n    tag 30\t\t\t  event CarbonoToken20Purchase...\n      JUMPDEST \t\t\t  event CarbonoToken20Purchase...\n      PUSH 0\t\t\tuint\n      PUSH 20\t\t\tad\n      DUP3 \t\t\tt Withdra\n      ADD \t\t\tevent Withdraw(add\n      SWAP1 \t\t\te);\\n    event Withdraw(add\n      POP \t\t\te);\\n    event Withdraw(add\n      DUP2 \t\t\tctor() ER\n      DUP2 \t\t\tonst\n      SUB \t\t\t   constructor() ERC\n      PUSH 0\t\t\t;\n      DUP4 \t\t\t256 amoun\n      ADD \t\t\tuint256 amount);\\n\n      MSTORE \t\t\ted to, uint256 amount);\\n\\n   ...\n      PUSH [tag] 299\t\t\t\", \"CBO\") Ownable(msg.sender) ...\n      DUP2 \t\t\tH\\n  \n      DUP5 \t\t\tviando\n      PUSH [tag] 247\t\t\t\", \"CBO\") Ownable(msg.sender) ...\n      JUMP \t\t\t\", \"CBO\") Ownable(msg.sender) ...\n    tag 299\t\t\t\", \"CBO\") Ownable(msg.sender) ...\n      JUMPDEST \t\t\t\", \"CBO\") Ownable(msg.sender) ...\n      SWAP1 \t\t\toToken20\", \"CBO\") Ownable(msg....\n      POP \t\t\toToken20\", \"CBO\") Ownable(msg....\n      SWAP3 \t\t\t  event CarbonoToken20Purchase...\n      SWAP2 \t\t\t  event CarbonoToken20Purchase...\n      POP \t\t\t  event CarbonoToken20Purchase...\n      POP \t\t\t  event CarbonoToken20Purchase...\n      JUMP \t\t\t  event CarbonoToken20Purchase...\n    tag 249\t\t\t ETH\");\\n        uint256 token...\n      JUMPDEST \t\t\t ETH\");\\n        uint256 token...\n      PUSH 0\t\t\tn\n      PUSH 0\t\t\to\n      REVERT \t\t\tquire(tokens\n    tag 251\t\t\t);\\n    }\\n\\n    /// @notice C...\n      JUMPDEST \t\t\t);\\n    }\\n\\n    /// @notice C...\n      PUSH 0\t\t\tprecio \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\triceWeiPerToken(uint256 newPri...\n      DUP3 \t\t\ton se\n      AND \t\t\tnction setPriceWeiPerToken(uin...\n      SWAP1 \t\t\tCBO)\\n    function setPriceWei...\n      POP \t\t\tCBO)\\n    function setPriceWei...\n      SWAP2 \t\t\t);\\n    }\\n\\n    /// @notice C...\n      SWAP1 \t\t\t);\\n    }\\n\\n    /// @notice C...\n      POP \t\t\t);\\n    }\\n\\n    /// @notice C...\n      JUMP \t\t\t);\\n    }\\n\\n    /// @notice C...\n    tag 252\t\t\t        require(newPrice > 0, ...\n      JUMPDEST \t\t\t        require(newPrice > 0, ...\n      PUSH 0\t\t\t0\");\\n  \n      PUSH [tag] 305\t\t\t = newPrice;\\n        emi\n      DUP3 \t\t\t   em\n      PUSH [tag] 251\t\t\t = newPrice;\\n        emi\n      JUMP \t\t\t = newPrice;\\n        emi\n    tag 305\t\t\t = newPrice;\\n        emi\n      JUMPDEST \t\t\t = newPrice;\\n        emi\n      SWAP1 \t\t\tWeiPerToken = newPrice;\\n     ...\n      POP \t\t\tWeiPerToken = newPrice;\\n     ...\n      SWAP2 \t\t\t        require(newPrice > 0, ...\n      SWAP1 \t\t\t        require(newPrice > 0, ...\n      POP \t\t\t        require(newPrice > 0, ...\n      JUMP \t\t\t        require(newPrice > 0, ...\n    tag 253\t\t\ted(newPrice);\\n    }\\n\\n    //...\n      JUMPDEST \t\t\ted(newPrice);\\n    }\\n\\n    //...\n      PUSH [tag] 307\t\t\tn withdraw(address payab\n      DUP2 \t\t\t paya\n      PUSH [tag] 252\t\t\tn withdraw(address payab\n      JUMP \t\t\tn withdraw(address payab\n    tag 307\t\t\tn withdraw(address payab\n      JUMPDEST \t\t\tn withdraw(address payab\n      DUP2 \t\t\tfunct\n      EQ \t\t\t   function withdraw(address p...\n      PUSH [tag] 308\t\t\tecaudado\\n    function withdra...\n      JUMPI \t\t\tecaudado\\n    function withdra...\n      PUSH 0\t\t\t \n      PUSH 0\t\t\tn\n      REVERT \t\t\t) external o\n    tag 308\t\t\tecaudado\\n    function withdra...\n      JUMPDEST \t\t\tecaudado\\n    function withdra...\n      POP \t\t\ted(newPrice);\\n    }\\n\\n    //...\n      JUMP \t\t\ted(newPrice);\\n    }\\n\\n    //...\n    tag 254\t\t\t     require(to != address(0),...\n      JUMPDEST \t\t\t     require(to != address(0),...\n      PUSH 0\t\t\t  uin\n      DUP2 \t\t\t\\n     \n      CALLDATALOAD \t\t\this).balance;\\n      \n      SWAP1 \t\t\taddress(this).balance;\\n      \n      POP \t\t\taddress(this).balance;\\n      \n      PUSH [tag] 310\t\t\t(bal > 0, \"empty\");\\n        (...\n      DUP2 \t\t\t (boo\n      PUSH [tag] 253\t\t\t(bal > 0, \"empty\");\\n        (...\n      JUMP \t\t\t(bal > 0, \"empty\");\\n        (...\n    tag 310\t\t\t(bal > 0, \"empty\");\\n        (...\n      JUMPDEST \t\t\t(bal > 0, \"empty\");\\n        (...\n      SWAP3 \t\t\t     require(to != address(0),...\n      SWAP2 \t\t\t     require(to != address(0),...\n      POP \t\t\t     require(to != address(0),...\n      POP \t\t\t     require(to != address(0),...\n      JUMP \t\t\t     require(to != address(0),...\n    tag 255\t\t\tcall{value: bal}(\"\");\\n       ...\n      JUMPDEST \t\t\tcall{value: bal}(\"\");\\n       ...\n      PUSH 0\t\t\t(ok, \"w\n      DUP2 \t\t\t  emi\n      SWAP1 \t\t\tl\");\\n        emi\n      POP \t\t\tl\");\\n        emi\n      SWAP2 \t\t\tcall{value: bal}(\"\");\\n       ...\n      SWAP1 \t\t\tcall{value: bal}(\"\");\\n       ...\n      POP \t\t\tcall{value: bal}(\"\");\\n       ...\n      JUMP \t\t\tcall{value: bal}(\"\");\\n       ...\n    tag 256\t\t\to, bal);\\n    }\\n\\n    /// @no...\n      JUMPDEST \t\t\to, bal);\\n    }\\n\\n    /// @no...\n      PUSH [tag] 313\t\t\t  receive() external pay\n      DUP2 \t\t\tal pa\n      PUSH [tag] 255\t\t\t  receive() external pay\n      JUMP \t\t\t  receive() external pay\n    tag 313\t\t\t  receive() external pay\n      JUMPDEST \t\t\t  receive() external pay\n      DUP2 \t\t\t CBO\\n\n      EQ \t\t\tpra CBO\\n    receive() externa...\n      PUSH [tag] 314\t\t\también compra CBO\\n    receive...\n      JUMPI \t\t\también compra CBO\\n    receive...\n      PUSH 0\t\t\tb\n      PUSH 0\t\t\t \n      REVERT \t\t\t{\\n        bu\n    tag 314\t\t\también compra CBO\\n    receive...\n      JUMPDEST \t\t\también compra CBO\\n    receive...\n      POP \t\t\to, bal);\\n    }\\n\\n    /// @no...\n      JUMP \t\t\to, bal);\\n    }\\n\\n    /// @no...\n    tag 257\t\t\t0();\\n    }\\n}\\n\\n\n      JUMPDEST \t\t\t0();\\n    }\\n}\\n\\n\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 316\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 256\t\t\t\n      JUMP \t\t\t\n    tag 316\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t0();\\n    }\\n}\\n\\n\n      SWAP2 \t\t\t0();\\n    }\\n}\\n\\n\n      POP \t\t\t0();\\n    }\\n}\\n\\n\n      POP \t\t\t0();\\n    }\\n}\\n\\n\n      JUMP \t\t\t0();\\n    }\\n}\\n\\n\n    tag 34\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 318\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 319\t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 319\t\t\t\n      JUMPDEST \t\t\t\n    tag 318\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 320\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 254\t\t\t\n      JUMP \t\t\t\n    tag 320\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 321\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 257\t\t\t\n      JUMP \t\t\t\n    tag 321\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 258\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 259\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 324\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 258\t\t\t\n      JUMP \t\t\t\n    tag 324\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 37\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 326\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 259\t\t\t\n      JUMP \t\t\t\n    tag 326\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 260\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 328\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 328\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 42\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 330\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 330\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 46\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 332\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 333\t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 333\t\t\t\n      JUMPDEST \t\t\t\n    tag 332\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 334\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 254\t\t\t\n      JUMP \t\t\t\n    tag 334\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 335\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 254\t\t\t\n      JUMP \t\t\t\n    tag 335\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 336\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 257\t\t\t\n      JUMP \t\t\t\n    tag 336\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 339\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMP \t\t\t\n    tag 339\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 53\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 341\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 262\t\t\t\n      JUMP \t\t\t\n    tag 341\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 263\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 343\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 251\t\t\t\n      JUMP \t\t\t\n    tag 343\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 264\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 345\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 263\t\t\t\n      JUMP \t\t\t\n    tag 345\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 346\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 346\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 265\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 348\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 264\t\t\t\n      JUMP \t\t\t\n    tag 348\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 57\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 350\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 351\t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 351\t\t\t\n      JUMPDEST \t\t\t\n    tag 350\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 352\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 265\t\t\t\n      JUMP \t\t\t\n    tag 352\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 62\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 354\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 355\t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 355\t\t\t\n      JUMPDEST \t\t\t\n    tag 354\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 356\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 257\t\t\t\n      JUMP \t\t\t\n    tag 356\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 67\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 358\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 359\t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 359\t\t\t\n      JUMPDEST \t\t\t\n    tag 358\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 360\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 254\t\t\t\n      JUMP \t\t\t\n    tag 360\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 266\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 362\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 252\t\t\t\n      JUMP \t\t\t\n    tag 362\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 77\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 364\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 266\t\t\t\n      JUMP \t\t\t\n    tag 364\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 366\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 367\t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 367\t\t\t\n      JUMPDEST \t\t\t\n    tag 366\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 368\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 254\t\t\t\n      JUMP \t\t\t\n    tag 368\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 369\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 254\t\t\t\n      JUMP \t\t\t\n    tag 369\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 267\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 6E6F204554480000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 268\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 372\t\t\t\n      PUSH 6\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 244\t\t\t\n      JUMP \t\t\t\n    tag 372\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 373\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 267\t\t\t\n      JUMP \t\t\t\n    tag 373\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 108\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 375\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 268\t\t\t\n      JUMP \t\t\t\n    tag 375\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 269\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 270\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 271\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 379\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP6 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 381\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      DUP7 \t\t\t\n      DIV \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 382\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 383\t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMP \t\t\t\n    tag 383\t\t\t\n      JUMPDEST \t\t\t\n    tag 382\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 384\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 384\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP2 \t\t\t\n      MUL \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 385\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 270\t\t\t\n      JUMP \t\t\t\n    tag 385\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 379\t\t\t\n      JUMP \t\t\t\n    tag 381\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 272\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 387\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 386\t\t\t\n      JUMP \t\t\t\n    tag 387\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 388\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 386\t\t\t\n      JUMP \t\t\t\n    tag 388\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMPI \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 391\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 389\t\t\t\n      JUMP \t\t\t\n    tag 390\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH [tag] 386\t\t\t\n      JUMP \t\t\t\n    tag 391\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FF\t\t\t\n      DUP5 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 392\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 393\t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMP \t\t\t\n    tag 393\t\t\t\n      JUMPDEST \t\t\t\n    tag 392\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      PUSH 2\t\t\t\n      EXP \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 394\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 395\t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMP \t\t\t\n    tag 395\t\t\t\n      JUMPDEST \t\t\t\n    tag 394\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 386\t\t\t\n      JUMP \t\t\t\n    tag 389\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH 133\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      AND \t\t\t\n      PUSH 4E\t\t\t\n      DUP5 \t\t\t\n      LT \t\t\t\n      PUSH B\t\t\t\n      DUP5 \t\t\t\n      LT \t\t\t\n      AND \t\t\t\n      OR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 396\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      EXP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 397\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 398\t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMP \t\t\t\n    tag 398\t\t\t\n      JUMPDEST \t\t\t\n    tag 397\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 386\t\t\t\n      JUMP \t\t\t\n    tag 396\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 399\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 271\t\t\t\n      JUMP \t\t\t\n    tag 399\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DIV \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 400\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 401\t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMP \t\t\t\n    tag 401\t\t\t\n      JUMPDEST \t\t\t\n    tag 400\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MUL \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 386\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 111\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 403\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 403\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 404\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMP \t\t\t\n    tag 404\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 405\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 272\t\t\t\n      JUMP \t\t\t\n    tag 405\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 113\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 407\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 407\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 408\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 408\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      PUSH [tag] 409\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 409\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      DUP5 \t\t\t\n      EQ \t\t\t\n      DUP4 \t\t\t\n      ISZERO \t\t\t\n      OR \t\t\t\n      PUSH [tag] 410\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 411\t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMP \t\t\t\n    tag 411\t\t\t\n      JUMPDEST \t\t\t\n    tag 410\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 273\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 115\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 414\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 414\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 415\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 415\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 416\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 417\t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMP \t\t\t\n    tag 417\t\t\t\n      JUMPDEST \t\t\t\n    tag 416\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 274\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 746F6F206C6974746C6520455448000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 275\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 420\t\t\t\n      PUSH E\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 244\t\t\t\n      JUMP \t\t\t\n    tag 420\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 421\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 274\t\t\t\n      JUMP \t\t\t\n    tag 421\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 118\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 423\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 275\t\t\t\n      JUMP \t\t\t\n    tag 423\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 122\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 425\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 425\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 426\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 426\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 276\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 127\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 429\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 429\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 430\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 431\t\t\t\n      PUSH [tag] 276\t\t\t\n      JUMP \t\t\t\n    tag 431\t\t\t\n      JUMPDEST \t\t\t\n    tag 430\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 277\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 746F3D3000000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 278\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 434\t\t\t\n      PUSH 4\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 244\t\t\t\n      JUMP \t\t\t\n    tag 434\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 435\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 277\t\t\t\n      JUMP \t\t\t\n    tag 435\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 437\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 278\t\t\t\n      JUMP \t\t\t\n    tag 437\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 656D707479000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 280\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 440\t\t\t\n      PUSH 5\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 244\t\t\t\n      JUMP \t\t\t\n    tag 440\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 441\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMP \t\t\t\n    tag 441\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 154\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 443\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 443\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 281\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 282\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 283\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 447\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 281\t\t\t\n      JUMP \t\t\t\n    tag 447\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 448\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 282\t\t\t\n      JUMP \t\t\t\n    tag 448\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 450\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 283\t\t\t\n      JUMP \t\t\t\n    tag 450\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 284\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 7769746864726177206661696C00000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 285\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 453\t\t\t\n      PUSH D\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 244\t\t\t\n      JUMP \t\t\t\n    tag 453\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 454\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 284\t\t\t\n      JUMP \t\t\t\n    tag 454\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 162\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 456\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 285\t\t\t\n      JUMP \t\t\t\n    tag 456\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 286\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 70726963653D3000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 287\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 459\t\t\t\n      PUSH 7\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 244\t\t\t\n      JUMP \t\t\t\n    tag 459\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 460\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 286\t\t\t\n      JUMP \t\t\t\n    tag 460\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 462\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMP \t\t\t\n    tag 462\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 211\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 464\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 266\t\t\t\n      JUMP \t\t\t\n    tag 464\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 465\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 465\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 466\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 466\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 229\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 468\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 468\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 469\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMP \t\t\t\n    tag 469\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 470\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 471\t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMP \t\t\t\n    tag 471\t\t\t\n      JUMPDEST \t\t\t\n    tag 470\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    .data\n"
}